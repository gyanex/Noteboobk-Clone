import { Logger } from '@llamaindex/env';
import { JSONSchemaType } from 'ajv';
import * as z3 from 'zod/v3';
import * as z4 from 'zod/v4/core';
import { JSONValue } from '../../global/dist/index.cjs';
import { BaseTool, ToolMetadata } from '../../llms/dist/index.cjs';
import { ZodSchema } from '../../zod/dist/index.cjs';

declare class FunctionTool<T, R extends JSONValue | Promise<JSONValue>, AdditionalToolArgument extends object = object> implements BaseTool<T> {
    #private;
    constructor(fn: (input: T, additionalArg?: AdditionalToolArgument) => R, metadata: ToolMetadata<JSONSchemaType<T>>, zodType?: ZodSchema<T>, additionalArg?: AdditionalToolArgument, logger?: Logger);
    static from<T, AdditionalToolArgument extends object = object>(fn: (input: T, additionalArg?: AdditionalToolArgument) => JSONValue | Promise<JSONValue>, schema: ToolMetadata<JSONSchemaType<T>>): FunctionTool<T, JSONValue | Promise<JSONValue>, AdditionalToolArgument>;
    static from<R, AdditionalToolArgument extends object = object>(fn: (input: z3.infer<R>, additionalArg?: AdditionalToolArgument) => JSONValue | Promise<JSONValue>, schema: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
    }): FunctionTool<z3.infer<R>, JSONValue | Promise<JSONValue>, AdditionalToolArgument>;
    static from<R, AdditionalToolArgument extends object = object>(fn: (input: z4.infer<R>, additionalArg?: AdditionalToolArgument) => JSONValue | Promise<JSONValue>, schema: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
    }): FunctionTool<z4.infer<R>, JSONValue | Promise<JSONValue>, AdditionalToolArgument>;
    static from<R, AdditionalToolArgument extends object = object>(config: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
        execute: (input: z3.infer<R>, additionalArg?: AdditionalToolArgument) => JSONValue | Promise<JSONValue>;
    }): FunctionTool<z3.infer<R>, JSONValue | Promise<JSONValue>, AdditionalToolArgument>;
    static from<R, AdditionalToolArgument extends object = object>(config: Omit<ToolMetadata, "parameters"> & {
        parameters: R;
        execute: (input: z4.infer<R>, additionalArg?: AdditionalToolArgument) => JSONValue | Promise<JSONValue>;
    }): FunctionTool<z4.infer<R>, JSONValue | Promise<JSONValue>, AdditionalToolArgument>;
    get metadata(): BaseTool<T>["metadata"];
    bind: (additionalArg: AdditionalToolArgument) => FunctionTool<T, R, AdditionalToolArgument>;
    call: (input: T) => R;
}
/**
 * A simpler alias for creating a FunctionTool.
 */
declare const tool: typeof FunctionTool.from;

export { FunctionTool, tool };
