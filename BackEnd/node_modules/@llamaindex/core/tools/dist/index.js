import { consoleLogger } from '@llamaindex/env';
import { safeParseSchema, isZodSchema, zodToJsonSchema } from '../../zod/dist/index.js';

class FunctionTool {
    #fn;
    #additionalArg;
    #metadata;
    #zodType;
    #logger;
    constructor(fn, metadata, zodType, additionalArg, logger){
        this.#zodType = null;
        this.bind = (additionalArg)=>{
            return new FunctionTool(this.#fn, this.#metadata, this.#zodType ?? undefined, additionalArg);
        };
        this.call = (input)=>{
            let params = input;
            if (this.#zodType) {
                const result = safeParseSchema(this.#zodType, input);
                if (result.success) {
                    params = result.data;
                } else {
                    this.#logger.warn(result.error);
                }
            }
            return this.#fn.call(null, params, this.#additionalArg);
        };
        this.#fn = fn;
        this.#metadata = metadata;
        if (zodType) {
            this.#zodType = zodType;
        }
        this.#additionalArg = additionalArg;
        this.#logger = logger ?? consoleLogger;
    }
    // ----------------- IMPLEMENTATION -----------------
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static from(fnOrConfig, schema) {
        if (typeof schema === "undefined" && typeof fnOrConfig === "object" && fnOrConfig.execute) {
            const { execute, parameters, ...restConfig } = fnOrConfig;
            if (isZodSchema(parameters)) {
                const jsonSchema = zodToJsonSchema(parameters);
                return new FunctionTool(execute, {
                    ...restConfig,
                    parameters: jsonSchema
                }, parameters);
            }
            return new FunctionTool(execute, fnOrConfig);
        }
        if (schema && isZodSchema(schema.parameters)) {
            const jsonSchema = zodToJsonSchema(schema.parameters);
            return new FunctionTool(fnOrConfig, {
                ...schema,
                parameters: jsonSchema
            }, schema.parameters);
        }
        return new FunctionTool(fnOrConfig, schema);
    }
    get metadata() {
        return this.#metadata;
    }
}
/**
 * A simpler alias for creating a FunctionTool.
 */ const tool = FunctionTool.from;

export { FunctionTool, tool };
