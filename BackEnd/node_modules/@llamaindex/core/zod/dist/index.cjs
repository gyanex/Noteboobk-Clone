Object.defineProperty(exports, '__esModule', { value: true });

var zodToJsonSchema$1 = require('@finom/zod-to-json-schema');
var zod = require('zod');
var v3 = require('zod/v3');
var z4 = require('zod/v4/core');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return n;
}

var zod__namespace = /*#__PURE__*/_interopNamespace(zod);
var v3__namespace = /*#__PURE__*/_interopNamespace(v3);
var z4__namespace = /*#__PURE__*/_interopNamespace(z4);

// support parsing both Zod 3 schemas and Zod 4 schemas
function parseSchema(schema, data) {
    if ("_zod" in schema) {
        // Zod 4 schema
        return z4__namespace.parse(schema, data);
    } else {
        // Zod 3 schema
        return schema.parse(data);
    }
}
// safe parse schema
function safeParseSchema(schema, data) {
    if ("_zod" in schema) {
        // Zod 4 schema
        return z4__namespace.safeParse(schema, data);
    } else {
        // Zod 3 schema
        return schema.safeParse(data);
    }
}
function isZodSchema(obj) {
    return obj !== null && typeof obj === "object" && "parse" in obj && typeof obj.parse === "function" && "safeParse" in obj && typeof obj.safeParse === "function";
}
// zod 3 schema does not have _zod property
function isZodV3Schema(obj) {
    return isZodSchema(obj) && !("_zod" in obj);
}
// zod 4 schema has _zod property
function isZodV4Schema(obj) {
    return isZodSchema(obj) && "_zod" in obj;
}
function zodToJsonSchema(obj) {
    if (isZodV4Schema(obj)) {
        // if schema is created from zod v4, use native toJSONSchema
        return z4__namespace.toJSONSchema(obj);
    }
    // otherwise, use zod-to-json-schema
    return zodToJsonSchema$1.zodToJsonSchema(obj); // FIXME: use any to avoid type instantiation excessively
}

exports.z = zod__namespace;
exports.z3 = v3__namespace;
exports.z4 = z4__namespace;
exports.isZodSchema = isZodSchema;
exports.isZodV3Schema = isZodV3Schema;
exports.isZodV4Schema = isZodV4Schema;
exports.parseSchema = parseSchema;
exports.safeParseSchema = safeParseSchema;
exports.zodToJsonSchema = zodToJsonSchema;
