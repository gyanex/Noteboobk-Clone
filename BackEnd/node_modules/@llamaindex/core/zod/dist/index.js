import { zodToJsonSchema as zodToJsonSchema$1 } from '@finom/zod-to-json-schema';
import * as zod from 'zod';
export { zod as z };
import * as v3 from 'zod/v3';
export { v3 as z3 };
import * as z4 from 'zod/v4/core';
export { z4 };

// support parsing both Zod 3 schemas and Zod 4 schemas
function parseSchema(schema, data) {
    if ("_zod" in schema) {
        // Zod 4 schema
        return z4.parse(schema, data);
    } else {
        // Zod 3 schema
        return schema.parse(data);
    }
}
// safe parse schema
function safeParseSchema(schema, data) {
    if ("_zod" in schema) {
        // Zod 4 schema
        return z4.safeParse(schema, data);
    } else {
        // Zod 3 schema
        return schema.safeParse(data);
    }
}
function isZodSchema(obj) {
    return obj !== null && typeof obj === "object" && "parse" in obj && typeof obj.parse === "function" && "safeParse" in obj && typeof obj.safeParse === "function";
}
// zod 3 schema does not have _zod property
function isZodV3Schema(obj) {
    return isZodSchema(obj) && !("_zod" in obj);
}
// zod 4 schema has _zod property
function isZodV4Schema(obj) {
    return isZodSchema(obj) && "_zod" in obj;
}
function zodToJsonSchema(obj) {
    if (isZodV4Schema(obj)) {
        // if schema is created from zod v4, use native toJSONSchema
        return z4.toJSONSchema(obj);
    }
    // otherwise, use zod-to-json-schema
    return zodToJsonSchema$1(obj); // FIXME: use any to avoid type instantiation excessively
}

export { isZodSchema, isZodV3Schema, isZodV4Schema, parseSchema, safeParseSchema, zodToJsonSchema };
