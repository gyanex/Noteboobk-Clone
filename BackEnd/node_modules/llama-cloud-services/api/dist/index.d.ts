import * as _hey_api_client_fetch from '@hey-api/client-fetch';
import { TDataShape, Options as Options$1, Client } from '@hey-api/client-fetch';

/**
 * Schema for an API Key.
 */
type ApiKey = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name?: string | null;
    project_id?: string | null;
    key_type?: ApiKeyType;
    user_id: string;
    redacted_api_key: string;
};
/**
 * Schema for creating an API key.
 */
type ApiKeyCreate = {
    name?: string | null;
    /**
     * The project ID to associate with the API key.
     */
    project_id?: string | null;
    key_type?: ApiKeyType;
};
/**
 * Response schema for paginated API key queries.
 */
type ApiKeyQueryResponse = {
    /**
     * The list of items.
     */
    items: Array<ApiKey>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
type ApiKeyType = "user" | "agent";
declare const ApiKeyType: {
    readonly USER: "user";
    readonly AGENT: "agent";
};
type AdvancedModeTransformConfig = {
    mode?: "advanced";
    /**
     * Configuration for the segmentation.
     */
    segmentation_config?: NoneSegmentationConfig | PageSegmentationConfig | ElementSegmentationConfig;
    /**
     * Configuration for the chunking.
     */
    chunking_config?: NoneChunkingConfig | CharacterChunkingConfig | TokenChunkingConfig | SentenceChunkingConfig | SemanticChunkingConfig;
};
/**
 * API Result for a single agent data item
 */
type AgentData = {
    id?: string | null;
    deployment_name: string;
    collection?: string;
    data: {
        [key: string]: unknown;
    };
    created_at?: string | null;
    updated_at?: string | null;
};
/**
 * API request model for creating agent data
 */
type AgentDataCreate = {
    deployment_name: string;
    collection?: string;
    data: {
        [key: string]: unknown;
    };
};
/**
 * API request model for updating agent data
 */
type AgentDataUpdate = {
    data: {
        [key: string]: unknown;
    };
};
type AgentDeploymentList = {
    /**
     * List of deployments
     */
    deployments: Array<AgentDeploymentSummary>;
};
type AgentDeploymentSummary = {
    /**
     * Deployment ID. Prefixed with dpl-
     */
    id: string;
    /**
     * Project ID
     */
    project_id: string;
    /**
     * Identifier of the deployed app
     */
    deployment_name: string;
    /**
     * Thumbnail URL of the deployed app
     */
    thumbnail_url?: string | null;
    /**
     * Base URL of the deployed app
     */
    base_url: string;
    /**
     * Timestamp when the app deployment was created
     */
    created_at: string;
    /**
     * Timestamp when the app deployment was last updated
     */
    updated_at: string;
    /**
     * API key ID
     */
    api_key_id?: string | null;
};
/**
 * API Result for a single group in the aggregate response
 */
type AggregateGroup = {
    group_key: {
        [key: string]: unknown;
    };
    count?: number | null;
    first_item?: {
        [key: string]: unknown;
    } | null;
};
/**
 * API request body for aggregating agent data
 */
type AggregateRequest = {
    /**
     * The maximum number of items to return. The service may return fewer than this value. If unspecified, a default page size will be used. The maximum value is typically 1000; values above this will be coerced to the maximum.
     */
    page_size?: number | null;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    page_token?: string | null;
    /**
     * A filter object or expression that filters resources listed in the response.
     */
    filter?: {
        [key: string]: FilterOperation;
    } | null;
    /**
     * A comma-separated list of fields to order by, sorted in ascending order. Use 'field_name desc' to specify descending order.
     */
    order_by?: string | null;
    /**
     * The agent deployment's name to aggregate data for
     */
    deployment_name: string;
    /**
     * The logical agent data collection to aggregate data for
     */
    collection?: string;
    /**
     * The fields to group by. If empty, the entire dataset is grouped on. e.g. if left out, can be used for simple count operations
     */
    group_by?: Array<string> | null;
    /**
     * Whether to count the number of items in each group
     */
    count?: boolean | null;
    /**
     * Whether to return the first item in each group (Sorted by created_at)
     */
    first?: boolean | null;
    /**
     * The offset to start from. If not provided, the first page is returned
     */
    offset?: number | null;
};
/**
 * This is the input schema for the chat app endpoint
 */
type AppChatInputParams = {
    messages?: Array<InputMessage>;
};
type AutoTransformConfig = {
    mode?: "auto";
    /**
     * Chunk size for the transformation.
     */
    chunk_size?: number;
    /**
     * Chunk overlap for the transformation.
     */
    chunk_overlap?: number;
};
type AzureOpenAiEmbedding = {
    /**
     * The name of the OpenAI embedding model.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Additional kwargs for the OpenAI API.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The OpenAI API key.
     */
    api_key?: string | null;
    /**
     * The base URL for Azure deployment.
     */
    api_base?: string;
    /**
     * The version for Azure OpenAI API.
     */
    api_version?: string;
    /**
     * Maximum number of retries.
     */
    max_retries?: number;
    /**
     * Timeout for each request.
     */
    timeout?: number;
    /**
     * The default headers for API requests.
     */
    default_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.
     */
    reuse_client?: boolean;
    /**
     * The number of dimensions on the output embedding vectors. Works only with v3 embedding models.
     */
    dimensions?: number | null;
    /**
     * The Azure endpoint to use.
     */
    azure_endpoint?: string | null;
    /**
     * The Azure deployment to use.
     */
    azure_deployment?: string | null;
    class_name?: string;
};
type AzureOpenAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "AZURE_EMBEDDING";
    /**
     * Configuration for the Azure OpenAI embedding model.
     */
    component?: AzureOpenAiEmbedding;
};
/**
 * Base response model for connection validation.
 */
type BaseConnectionValidation = {
    success: boolean;
    message: string;
};
type BasePlan = {
    /**
     * The ID of the plan in Metronome
     */
    id?: string | null;
    name: "free" | "llama_parse" | "enterprise" | "unknown" | "free_contract" | "pro" | "enterprise_contract" | "enterprise_poc" | "free_v1" | "starter_v1" | "pro_v1";
    metronome_plan_type: "plan" | "contract";
    metronome_rate_card_alias: string | null;
    limits: PlanLimits;
    recurring_credits?: Array<RecurringCreditGrant> | null;
    plan_frequency: "MONTHLY" | "QUARTERLY" | "ANNUAL";
    /**
     * The ID of the customer in Metronome
     */
    metronome_customer_id?: string | null;
    /**
     * The date the plan starts on
     */
    starting_on?: string | null;
    /**
     * The date the plan ends on
     */
    ending_before?: string | null;
    /**
     * The current billing period
     */
    current_billing_period?: BillingPeriod | null;
    /**
     * Whether the organization has a failed payment that requires support contact
     */
    is_payment_failed?: boolean;
    /**
     * The number of payment failures for this organization
     */
    failure_count?: number;
};
type Batch = {
    /**
     * The tool to be used for all requests in the batch.
     */
    tool: string;
    /**
     * The data to be used for the tool.
     */
    tool_data?: LlamaParseParameters | null;
    /**
     * The type of input file. Currently only 'datasource' is supported.
     */
    input_type: string;
    /**
     * The ID of the input file for the batch.
     */
    input_id: string;
    /**
     * The type of output file. Currently only 'datasource' is supported.
     */
    output_type?: string | null;
    /**
     * The ID of the output file for the batch.
     */
    output_id?: string | null;
    /**
     * Unique identifier for the batch
     */
    id: string;
    /**
     * The ID of the project to which the batch belongs
     */
    project_id: string;
    /**
     * The ID of the organization to which the batch belongs
     */
    organization_id: string;
    /**
     * The ID of the user who created the batch
     */
    user_id: string;
    /**
     * A developer-provided ID for the batch. This ID will be returned in the response.
     */
    external_id?: string | null;
    /**
     * The time frame within which the batch should be processed
     */
    completion_window: number;
    /**
     * The ID of the pipeline to which the batch belongs
     */
    pipeline_id: string;
    /**
     * The current status of the batch
     */
    status: string;
    /**
     * The Unix timestamp (in seconds) for when the batch was created
     */
    created_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch was last updated
     */
    updated_at?: string | null;
};
type BatchCreate = {
    /**
     * The tool to be used for all requests in the batch.
     */
    tool: string;
    /**
     * The data to be used for the tool.
     */
    tool_data?: LlamaParseParameters | null;
    /**
     * The type of input file. Currently only 'datasource' is supported.
     */
    input_type: string;
    /**
     * The ID of the input file for the batch.
     */
    input_id: string;
    /**
     * The type of output file. Currently only 'datasource' is supported.
     */
    output_type?: string | null;
    /**
     * The ID of the output file for the batch.
     */
    output_id?: string | null;
    /**
     * The ID of the project to which the batch belongs
     */
    project_id: string;
    /**
     * A developer-provided ID for the batch. This ID will be returned in the response.
     */
    external_id: string;
    /**
     * The time frame within which the batch should be processed. Currently only 24h is supported.
     */
    completion_window?: number;
};
type BatchItem = {
    /**
     * Unique identifier for the batch item
     */
    id: string;
    /**
     * The ID of the batch to which the item belongs
     */
    batch_id: string;
    /**
     * The current status of the batch item
     */
    status: string;
    /**
     * The Unix timestamp (in seconds) for when the batch item status was last updated
     */
    status_updated_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch item was created
     */
    created_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch item was last updated
     */
    updated_at?: string | null;
    /**
     * The input file associated with the batch item
     */
    input_file: string;
    /**
     * The output file associated with the batch item
     */
    output_file?: string | null;
    /**
     * Worker Task for that item
     */
    task?: FileParsePublic | null;
};
type BatchPaginatedList = {
    /**
     * List of batches
     */
    data: Array<Batch>;
    /**
     * Pagination limit
     */
    limit: number;
    /**
     * Pagination offset
     */
    offset: number;
    /**
     * Total number of batches
     */
    total_count: number;
};
type BatchPublicOutput = {
    batch: Batch;
    batch_items: Array<BatchItem>;
    ingestion_status: ManagedIngestionStatusResponse;
};
type BedrockEmbedding = {
    /**
     * The modelId of the Bedrock model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The name of aws profile to use. If not given, then the default profile is used.
     */
    profile_name?: string | null;
    /**
     * AWS Access Key ID to use
     */
    aws_access_key_id?: string | null;
    /**
     * AWS Secret Access Key to use
     */
    aws_secret_access_key?: string | null;
    /**
     * AWS Session Token to use
     */
    aws_session_token?: string | null;
    /**
     * AWS region name to use. Uses region configured in AWS CLI if not passed
     */
    region_name?: string | null;
    /**
     * The maximum number of API retries.
     */
    max_retries?: number;
    /**
     * The timeout for the Bedrock API request in seconds. It will be used for both connect and read timeouts.
     */
    timeout?: number;
    /**
     * Additional kwargs for the bedrock client.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
type BedrockEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "BEDROCK_EMBEDDING";
    /**
     * Configuration for the Bedrock embedding model.
     */
    component?: BedrockEmbedding;
};
type BillingPeriod = {
    start_date: string;
    end_date: string;
};
type BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut = {
    upload_file: Blob | File;
};
type BodyRunJobOnFileApiV1ExtractionJobsFilePost = {
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The file to run the job on
     */
    file: Blob | File;
    /**
     * The data schema to override the extraction agent's data schema with as a JSON string
     */
    data_schema_override?: string | null;
    /**
     * The config to override the extraction agent's config with as a JSON string
     */
    config_override?: string | null;
};
type BodyScreenshotApiParsingScreenshotPost = {
    file?: (Blob | File) | null;
    do_not_cache?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    max_pages?: number | null;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    target_pages?: string;
    webhook_url?: string;
    webhook_configurations?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
};
type BodyScreenshotApiV1ParsingScreenshotPost = {
    file?: (Blob | File) | null;
    do_not_cache?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    max_pages?: number | null;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    target_pages?: string;
    webhook_url?: string;
    webhook_configurations?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
};
type BodyUploadFileApiParsingUploadPost = {
    file?: (Blob | File) | null;
    adaptive_long_table?: boolean;
    annotate_links?: boolean;
    auto_mode?: boolean;
    auto_mode_trigger_on_image_in_page?: boolean;
    auto_mode_trigger_on_table_in_page?: boolean;
    auto_mode_trigger_on_text_in_page?: string;
    auto_mode_trigger_on_regexp_in_page?: string;
    auto_mode_configuration_json?: string;
    azure_openai_api_version?: string;
    azure_openai_deployment_name?: string;
    azure_openai_endpoint?: string;
    azure_openai_key?: string;
    bbox_bottom?: number;
    bbox_left?: number;
    bbox_right?: number;
    bbox_top?: number;
    compact_markdown_table?: boolean;
    disable_ocr?: boolean;
    disable_reconstruction?: boolean;
    disable_image_extraction?: boolean;
    do_not_cache?: boolean;
    do_not_unroll_columns?: boolean;
    extract_charts?: boolean;
    guess_xlsx_sheet_name?: boolean;
    high_res_ocr?: boolean;
    html_make_all_elements_visible?: boolean;
    layout_aware?: boolean;
    specialized_chart_parsing_agentic?: boolean;
    specialized_chart_parsing_plus?: boolean;
    specialized_chart_parsing_efficient?: boolean;
    specialized_image_parsing?: boolean;
    precise_bounding_box?: boolean;
    html_remove_fixed_elements?: boolean;
    html_remove_navigation_elements?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    language?: Array<ParserLanguages>;
    extract_layout?: boolean;
    max_pages?: number | null;
    merge_tables_across_pages_in_markdown?: boolean;
    outlined_table_extraction?: boolean;
    output_pdf_of_document?: boolean;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    page_prefix?: string;
    page_separator?: string;
    page_suffix?: string;
    preserve_layout_alignment_across_pages?: boolean;
    preserve_very_small_text?: boolean;
    skip_diagonal_text?: boolean;
    spreadsheet_extract_sub_tables?: boolean;
    spreadsheet_force_formula_computation?: boolean;
    inline_images_in_markdown?: boolean;
    structured_output?: boolean;
    structured_output_json_schema?: string;
    structured_output_json_schema_name?: string;
    take_screenshot?: boolean;
    target_pages?: string;
    vendor_multimodal_api_key?: string;
    vendor_multimodal_model_name?: string;
    model?: string;
    webhook_url?: string;
    webhook_configurations?: string;
    preset?: string;
    parse_mode?: ParsingMode | null;
    page_error_tolerance?: number;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string;
    replace_failed_page_with_error_message_suffix?: string;
    system_prompt?: string;
    system_prompt_append?: string;
    user_prompt?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
    strict_mode_image_extraction?: boolean;
    strict_mode_image_ocr?: boolean;
    strict_mode_reconstruction?: boolean;
    strict_mode_buggy_font?: boolean;
    save_images?: boolean;
    ignore_document_elements_for_layout_detection?: boolean;
    output_tables_as_HTML?: boolean;
    markdown_table_multiline_header_separator?: string;
    use_vendor_multimodal_model?: boolean;
    bounding_box?: string;
    gpt4o_mode?: boolean;
    gpt4o_api_key?: string;
    complemental_formatting_instruction?: string;
    content_guideline_instruction?: string;
    premium_mode?: boolean;
    is_formatting_instruction?: boolean;
    continuous_mode?: boolean;
    parsing_instruction?: string;
    fast_mode?: boolean;
    formatting_instruction?: string;
    hide_headers?: boolean;
    hide_footers?: boolean;
    page_header_prefix?: string;
    page_header_suffix?: string;
    page_footer_prefix?: string;
    page_footer_suffix?: string;
};
type BodyUploadFileApiV1FilesPost = {
    upload_file: Blob | File;
};
type BodyUploadFileApiV1ParsingUploadPost = {
    file?: (Blob | File) | null;
    adaptive_long_table?: boolean;
    annotate_links?: boolean;
    auto_mode?: boolean;
    auto_mode_trigger_on_image_in_page?: boolean;
    auto_mode_trigger_on_table_in_page?: boolean;
    auto_mode_trigger_on_text_in_page?: string;
    auto_mode_trigger_on_regexp_in_page?: string;
    auto_mode_configuration_json?: string;
    azure_openai_api_version?: string;
    azure_openai_deployment_name?: string;
    azure_openai_endpoint?: string;
    azure_openai_key?: string;
    bbox_bottom?: number;
    bbox_left?: number;
    bbox_right?: number;
    bbox_top?: number;
    compact_markdown_table?: boolean;
    disable_ocr?: boolean;
    disable_reconstruction?: boolean;
    disable_image_extraction?: boolean;
    do_not_cache?: boolean;
    do_not_unroll_columns?: boolean;
    extract_charts?: boolean;
    guess_xlsx_sheet_name?: boolean;
    high_res_ocr?: boolean;
    html_make_all_elements_visible?: boolean;
    layout_aware?: boolean;
    specialized_chart_parsing_agentic?: boolean;
    specialized_chart_parsing_plus?: boolean;
    specialized_chart_parsing_efficient?: boolean;
    specialized_image_parsing?: boolean;
    precise_bounding_box?: boolean;
    html_remove_fixed_elements?: boolean;
    html_remove_navigation_elements?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    language?: Array<ParserLanguages>;
    extract_layout?: boolean;
    max_pages?: number | null;
    merge_tables_across_pages_in_markdown?: boolean;
    outlined_table_extraction?: boolean;
    output_pdf_of_document?: boolean;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    page_prefix?: string;
    page_separator?: string;
    page_suffix?: string;
    preserve_layout_alignment_across_pages?: boolean;
    preserve_very_small_text?: boolean;
    skip_diagonal_text?: boolean;
    spreadsheet_extract_sub_tables?: boolean;
    spreadsheet_force_formula_computation?: boolean;
    inline_images_in_markdown?: boolean;
    structured_output?: boolean;
    structured_output_json_schema?: string;
    structured_output_json_schema_name?: string;
    take_screenshot?: boolean;
    target_pages?: string;
    vendor_multimodal_api_key?: string;
    vendor_multimodal_model_name?: string;
    model?: string;
    webhook_url?: string;
    webhook_configurations?: string;
    preset?: string;
    parse_mode?: ParsingMode | null;
    page_error_tolerance?: number;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string;
    replace_failed_page_with_error_message_suffix?: string;
    system_prompt?: string;
    system_prompt_append?: string;
    user_prompt?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
    strict_mode_image_extraction?: boolean;
    strict_mode_image_ocr?: boolean;
    strict_mode_reconstruction?: boolean;
    strict_mode_buggy_font?: boolean;
    save_images?: boolean;
    ignore_document_elements_for_layout_detection?: boolean;
    output_tables_as_HTML?: boolean;
    markdown_table_multiline_header_separator?: string;
    use_vendor_multimodal_model?: boolean;
    bounding_box?: string;
    gpt4o_mode?: boolean;
    gpt4o_api_key?: string;
    complemental_formatting_instruction?: string;
    content_guideline_instruction?: string;
    premium_mode?: boolean;
    is_formatting_instruction?: boolean;
    continuous_mode?: boolean;
    parsing_instruction?: string;
    fast_mode?: boolean;
    formatting_instruction?: string;
    hide_headers?: boolean;
    hide_footers?: boolean;
    page_header_prefix?: string;
    page_header_suffix?: string;
    page_footer_prefix?: string;
    page_footer_suffix?: string;
};
type BoxAuthMechanism = "developer_token" | "ccg";
declare const BoxAuthMechanism: {
    readonly DEVELOPER_TOKEN: "developer_token";
    readonly CCG: "ccg";
};
type CharacterChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "character";
};
/**
 * Schema for a chat app
 */
type ChatApp = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
    /**
     * ID of the project the chat app belongs to
     */
    project_id: string;
};
/**
 * Schema for creating a new chat app
 */
type ChatAppCreate = {
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
};
type ChatAppResponse = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
    /**
     * ID of the project the chat app belongs to
     */
    project_id: string;
    retriever_name: string;
};
/**
 * Schema for updating a chat app
 */
type ChatAppUpdate = {
    name?: string | null;
    llm_config?: LlmParameters | null;
    retrieval_config?: PresetCompositeRetrievalParams | null;
};
type ChatData = {
    retrieval_parameters?: PresetRetrievalParams;
    llm_parameters?: LlmParameters | null;
    class_name?: string;
};
type ChatInputParams = {
    messages?: Array<InputMessage>;
    data?: ChatData;
    class_name?: string;
};
type ChatMessage = {
    id: string;
    /**
     * The index of the message in the chat.
     */
    index: number;
    /**
     * Retrieval annotations for the message.
     */
    annotations?: Array<MessageAnnotation>;
    /**
     * The role of the message.
     */
    role: MessageRole;
    /**
     * Text content of the generation
     */
    content?: string | null;
    /**
     * Additional arguments passed to the model
     */
    additional_kwargs?: {
        [key: string]: string;
    };
    class_name?: string;
};
/**
 * Result of classifying a single file.
 */
type ClassificationResult = {
    /**
     * Step-by-step explanation of why this classification was chosen and the confidence score assigned
     */
    reasoning: string;
    /**
     * Confidence score of the classification (0.0-1.0)
     */
    confidence: number;
    /**
     * The document type that best matches, or null if no match.
     */
    type: string | null;
};
/**
 * A rule for classifying documents - v0 simplified version.
 *
 * This represents a single classification rule that will be applied to documents.
 * All rules are content-based and use natural language descriptions.
 */
type ClassifierRule = {
    /**
     * The document type to assign when this rule matches (e.g., 'invoice', 'receipt', 'contract')
     */
    type: string;
    /**
     * Natural language description of what to classify. Be specific about the content characteristics that identify this document type.
     */
    description: string;
};
/**
 * A classify job.
 */
type ClassifyJob = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The rules to classify the files
     */
    rules: Array<ClassifierRule>;
    /**
     * The ID of the user
     */
    user_id: string;
    /**
     * The ID of the project
     */
    project_id: string;
    /**
     * The status of the classify job
     */
    status: StatusEnum;
    /**
     * The configuration for the parsing job
     */
    parsing_configuration?: ClassifyParsingConfiguration;
};
/**
 * A classify job.
 */
type ClassifyJobCreate = {
    /**
     * The rules to classify the files
     */
    rules: Array<ClassifierRule>;
    /**
     * The IDs of the files to classify
     */
    file_ids: Array<string>;
    /**
     * The configuration for the parsing job
     */
    parsing_configuration?: ClassifyParsingConfiguration;
};
/**
 * Response model for the classify endpoint following AIP-132 pagination standard.
 */
type ClassifyJobResults = {
    /**
     * The list of items.
     */
    items: Array<FileClassification>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
/**
 * Parsing configuration for a classify job.
 */
type ClassifyParsingConfiguration = {
    /**
     * The language to parse the files in
     */
    lang?: ParserLanguages;
    /**
     * The maximum number of pages to parse
     */
    max_pages?: number | null;
    /**
     * The pages to target for parsing (0-indexed, so first page is at 0)
     */
    target_pages?: Array<number> | null;
};
/**
 * Cloud AstraDB Vector Store.
 *
 * This class is used to store the configuration for an AstraDB vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * token (str): The Astra DB Application Token to use.
 * api_endpoint (str): The Astra DB JSON API endpoint for your database.
 * collection_name (str): Collection name to use. If not existing, it will be created.
 * embedding_dimension (int): Length of the embedding vectors in use.
 * keyspace (optional[str]): The keyspace to use. If not provided, 'default_keyspace'
 */
type CloudAstraDbVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    /**
     * The Astra DB JSON API endpoint for your database
     */
    api_endpoint: string;
    /**
     * Collection name to use. If not existing, it will be created
     */
    collection_name: string;
    /**
     * Length of the embedding vectors in use
     */
    embedding_dimension: number;
    /**
     * The keyspace to use. If not provided, 'default_keyspace'
     */
    keyspace?: string | null;
    class_name?: string;
};
/**
 * Cloud AstraDB Vector Store.
 *
 * This class is used to store the configuration for an AstraDB vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * token (str): The Astra DB Application Token to use.
 * api_endpoint (str): The Astra DB JSON API endpoint for your database.
 * collection_name (str): Collection name to use. If not existing, it will be created.
 * embedding_dimension (int): Length of the embedding vectors in use.
 * keyspace (optional[str]): The keyspace to use. If not provided, 'default_keyspace'
 */
type CloudAstraDbVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    /**
     * The Astra DB Application Token to use
     */
    token: string;
    /**
     * The Astra DB JSON API endpoint for your database
     */
    api_endpoint: string;
    /**
     * Collection name to use. If not existing, it will be created
     */
    collection_name: string;
    /**
     * Length of the embedding vectors in use
     */
    embedding_dimension: number;
    /**
     * The keyspace to use. If not provided, 'default_keyspace'
     */
    keyspace?: string | null;
    class_name?: string;
};
type CloudAzStorageBlobDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The name of the Azure Storage Blob container to read from.
     */
    container_name: string;
    /**
     * The Azure Storage Blob account URL to use for authentication.
     */
    account_url: string;
    /**
     * The blob name to read from.
     */
    blob?: string | null;
    /**
     * The prefix of the Azure Storage Blob objects to read from.
     */
    prefix?: string | null;
    /**
     * The Azure Storage Blob account name to use for authentication.
     */
    account_name?: string | null;
    /**
     * The Azure Storage Blob account key to use for authentication.
     */
    account_key?: string | null;
    /**
     * The Azure AD tenant ID to use for authentication.
     */
    tenant_id?: string | null;
    /**
     * The Azure AD client ID to use for authentication.
     */
    client_id?: string | null;
    /**
     * The Azure AD client secret to use for authentication.
     */
    client_secret?: string | null;
    class_name?: string;
};
type CloudAzStorageBlobDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The name of the Azure Storage Blob container to read from.
     */
    container_name: string;
    /**
     * The Azure Storage Blob account URL to use for authentication.
     */
    account_url: string;
    /**
     * The blob name to read from.
     */
    blob?: string | null;
    /**
     * The prefix of the Azure Storage Blob objects to read from.
     */
    prefix?: string | null;
    /**
     * The Azure Storage Blob account name to use for authentication.
     */
    account_name?: string | null;
    /**
     * The Azure Storage Blob account key to use for authentication.
     */
    account_key?: string | null;
    /**
     * The Azure AD tenant ID to use for authentication.
     */
    tenant_id?: string | null;
    /**
     * The Azure AD client ID to use for authentication.
     */
    client_id?: string | null;
    /**
     * The Azure AD client secret to use for authentication.
     */
    client_secret?: string | null;
    class_name?: string;
};
/**
 * Cloud Azure AI Search Vector Store.
 */
type CloudAzureAiSearchVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    search_service_endpoint: string;
    search_service_api_version?: string | null;
    index_name?: string | null;
    filterable_metadata_field_keys?: {
        [key: string]: unknown;
    } | null;
    embedding_dimension?: number | null;
    client_id?: string | null;
    client_secret?: string | null;
    tenant_id?: string | null;
    class_name?: string;
};
/**
 * Cloud Azure AI Search Vector Store.
 */
type CloudAzureAiSearchVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    search_service_api_key: string;
    search_service_endpoint: string;
    search_service_api_version?: string | null;
    index_name?: string | null;
    filterable_metadata_field_keys?: {
        [key: string]: unknown;
    } | null;
    embedding_dimension?: number | null;
    client_id?: string | null;
    client_secret?: string | null;
    tenant_id?: string | null;
    class_name?: string;
};
type CloudBoxDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The ID of the Box folder to read from.
     */
    folder_id?: string | null;
    /**
     * The type of authentication to use (Developer Token or CCG)
     */
    authentication_mechanism: BoxAuthMechanism;
    /**
     * Developer token for authentication if authentication_mechanism is 'developer_token'.
     */
    developer_token?: string | null;
    /**
     * Box API key used for identifying the application the user is authenticating with
     */
    client_id?: string | null;
    /**
     * Box API secret used for making auth requests.
     */
    client_secret?: string | null;
    /**
     * Box User ID, if provided authenticates as user.
     */
    user_id?: string | null;
    /**
     * Box Enterprise ID, if provided authenticates as service.
     */
    enterprise_id?: string | null;
    class_name?: string;
};
type CloudBoxDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The ID of the Box folder to read from.
     */
    folder_id?: string | null;
    /**
     * The type of authentication to use (Developer Token or CCG)
     */
    authentication_mechanism: BoxAuthMechanism;
    /**
     * Developer token for authentication if authentication_mechanism is 'developer_token'.
     */
    developer_token?: string | null;
    /**
     * Box API key used for identifying the application the user is authenticating with
     */
    client_id?: string | null;
    /**
     * Box API secret used for making auth requests.
     */
    client_secret?: string | null;
    /**
     * Box User ID, if provided authenticates as user.
     */
    user_id?: string | null;
    /**
     * Box Enterprise ID, if provided authenticates as service.
     */
    enterprise_id?: string | null;
    class_name?: string;
};
type CloudConfluenceDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The server URL of the Confluence instance.
     */
    server_url: string;
    /**
     * Type of Authentication for connecting to Confluence APIs.
     */
    authentication_mechanism: string;
    /**
     * The username to use for authentication.
     */
    user_name?: string | null;
    /**
     * The API token to use for authentication.
     */
    api_token?: string | null;
    /**
     * The space key to read from.
     */
    space_key?: string | null;
    /**
     * The page IDs of the Confluence to read from.
     */
    page_ids?: string | null;
    /**
     * The CQL query to use for fetching pages.
     */
    cql?: string | null;
    /**
     * The label to use for fetching pages.
     */
    label?: string | null;
    /**
     * Whether to index restricted pages.
     */
    index_restricted_pages?: boolean;
    /**
     * Whether to keep the markdown format.
     */
    keep_markdown_format?: boolean;
    /**
     * Configuration for handling failures during processing. Key-value object controlling failure handling behaviors.
     *
     * Example:
     * {
     * "skip_list_failures": true
     * }
     *
     * Currently supports:
     * - skip_list_failures: Skip failed batches/lists and continue processing
     */
    failure_handling?: FailureHandlingConfig;
    class_name?: string;
};
type CloudConfluenceDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The server URL of the Confluence instance.
     */
    server_url: string;
    /**
     * Type of Authentication for connecting to Confluence APIs.
     */
    authentication_mechanism: string;
    /**
     * The username to use for authentication.
     */
    user_name?: string | null;
    /**
     * The API token to use for authentication.
     */
    api_token?: string | null;
    /**
     * The space key to read from.
     */
    space_key?: string | null;
    /**
     * The page IDs of the Confluence to read from.
     */
    page_ids?: string | null;
    /**
     * The CQL query to use for fetching pages.
     */
    cql?: string | null;
    /**
     * The label to use for fetching pages.
     */
    label?: string | null;
    /**
     * Whether to index restricted pages.
     */
    index_restricted_pages?: boolean;
    /**
     * Whether to keep the markdown format.
     */
    keep_markdown_format?: boolean;
    /**
     * Configuration for handling failures during processing. Key-value object controlling failure handling behaviors.
     *
     * Example:
     * {
     * "skip_list_failures": true
     * }
     *
     * Currently supports:
     * - skip_list_failures: Skip failed batches/lists and continue processing
     */
    failure_handling?: FailureHandlingConfig;
    class_name?: string;
};
/**
 * Cloud document stored in S3.
 */
type CloudDocument = {
    text: string;
    metadata: {
        [key: string]: unknown;
    };
    excluded_embed_metadata_keys?: Array<string>;
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1].
     */
    page_positions?: Array<number> | null;
    id: string;
};
/**
 * Create a new cloud document.
 */
type CloudDocumentCreate = {
    text: string;
    metadata: {
        [key: string]: unknown;
    };
    excluded_embed_metadata_keys?: Array<string>;
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1].
     */
    page_positions?: Array<number> | null;
    id?: string | null;
};
/**
 * Cloud Jira Data Source integrating JiraReader.
 */
type CloudJiraDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API/ Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url?: string | null;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    class_name?: string;
};
/**
 * Cloud Jira Data Source integrating JiraReader.
 */
type CloudJiraDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API/ Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url?: string | null;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    class_name?: string;
};
/**
 * Cloud Jira Data Source integrating JiraReaderV2.
 */
type CloudJiraDataSourceV2Readable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url: string;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * Jira REST API version to use (2 or 3). 3 supports Atlassian Document Format (ADF).
     */
    api_version?: "2" | "3";
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    /**
     * List of fields to retrieve from Jira. If None, retrieves all fields.
     */
    fields?: Array<string> | null;
    /**
     * Fields to expand in the response.
     */
    expand?: string | null;
    /**
     * Rate limit for Jira API requests per minute.
     */
    requests_per_minute?: number | null;
    /**
     * Whether to fetch project role permissions and issue-level security
     */
    get_permissions?: boolean;
    class_name?: string;
};
/**
 * Cloud Jira Data Source integrating JiraReaderV2.
 */
type CloudJiraDataSourceV2Writable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url: string;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * Jira REST API version to use (2 or 3). 3 supports Atlassian Document Format (ADF).
     */
    api_version?: "2" | "3";
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    /**
     * List of fields to retrieve from Jira. If None, retrieves all fields.
     */
    fields?: Array<string> | null;
    /**
     * Fields to expand in the response.
     */
    expand?: string | null;
    /**
     * Rate limit for Jira API requests per minute.
     */
    requests_per_minute?: number | null;
    /**
     * Whether to fetch project role permissions and issue-level security
     */
    get_permissions?: boolean;
    class_name?: string;
};
/**
 * Cloud Milvus Vector Store.
 */
type CloudMilvusVectorStoreReadable = {
    supports_nested_metadata_filters?: boolean;
    uri: string;
    collection_name?: string | null;
    token?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud Milvus Vector Store.
 */
type CloudMilvusVectorStoreWritable = {
    supports_nested_metadata_filters?: boolean;
    uri: string;
    collection_name?: string | null;
    token?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud MongoDB Atlas Vector Store.
 *
 * This class is used to store the configuration for a MongoDB Atlas vector store,
 * so that it can be created and used in LlamaCloud.
 *
 * Args:
 * mongodb_uri (str): URI for connecting to MongoDB Atlas
 * db_name (str): name of the MongoDB database
 * collection_name (str): name of the MongoDB collection
 * vector_index_name (str): name of the MongoDB Atlas vector index
 * fulltext_index_name (str): name of the MongoDB Atlas full-text index
 */
type CloudMongoDbAtlasVectorSearchReadable = {
    supports_nested_metadata_filters?: boolean;
    db_name: string;
    collection_name: string;
    vector_index_name?: string | null;
    fulltext_index_name?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud MongoDB Atlas Vector Store.
 *
 * This class is used to store the configuration for a MongoDB Atlas vector store,
 * so that it can be created and used in LlamaCloud.
 *
 * Args:
 * mongodb_uri (str): URI for connecting to MongoDB Atlas
 * db_name (str): name of the MongoDB database
 * collection_name (str): name of the MongoDB collection
 * vector_index_name (str): name of the MongoDB Atlas vector index
 * fulltext_index_name (str): name of the MongoDB Atlas full-text index
 */
type CloudMongoDbAtlasVectorSearchWritable = {
    supports_nested_metadata_filters?: boolean;
    mongodb_uri: string;
    db_name: string;
    collection_name: string;
    vector_index_name?: string | null;
    fulltext_index_name?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
type CloudNotionPageDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The Notion Database Id to read content from.
     */
    database_ids?: string | null;
    /**
     * The Page ID's of the Notion to read from.
     */
    page_ids?: string | null;
    class_name?: string;
};
type CloudNotionPageDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The integration token to use for authentication.
     */
    integration_token: string;
    /**
     * The Notion Database Id to read content from.
     */
    database_ids?: string | null;
    /**
     * The Page ID's of the Notion to read from.
     */
    page_ids?: string | null;
    class_name?: string;
};
type CloudOneDriveDataSourceReadable = {
    supports_access_control?: true;
    /**
     * The user principal name to use for authentication.
     */
    user_principal_name: string;
    /**
     * The path of the OneDrive folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the OneDrive folder to read from.
     */
    folder_id?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    class_name?: string;
};
type CloudOneDriveDataSourceWritable = {
    supports_access_control?: true;
    /**
     * The user principal name to use for authentication.
     */
    user_principal_name: string;
    /**
     * The path of the OneDrive folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the OneDrive folder to read from.
     */
    folder_id?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The client secret to use for authentication.
     */
    client_secret: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    class_name?: string;
};
/**
 * Cloud Pinecone Vector Store.
 *
 * This class is used to store the configuration for a Pinecone vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * api_key (str): API key for authenticating with Pinecone
 * index_name (str): name of the Pinecone index
 * namespace (optional[str]): namespace to use in the Pinecone index
 * insert_kwargs (optional[dict]): additional kwargs to pass during insertion
 */
type CloudPineconeVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    index_name: string;
    namespace?: string | null;
    insert_kwargs?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
/**
 * Cloud Pinecone Vector Store.
 *
 * This class is used to store the configuration for a Pinecone vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * api_key (str): API key for authenticating with Pinecone
 * index_name (str): name of the Pinecone index
 * namespace (optional[str]): namespace to use in the Pinecone index
 * insert_kwargs (optional[dict]): additional kwargs to pass during insertion
 */
type CloudPineconeVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    /**
     * The API key for authenticating with Pinecone
     */
    api_key: string;
    index_name: string;
    namespace?: string | null;
    insert_kwargs?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
type CloudPostgresVectorStoreReadable = {
    supports_nested_metadata_filters?: boolean;
    database: string;
    host: string;
    port: number;
    user: string;
    table_name: string;
    schema_name: string;
    embed_dim: number;
    hybrid_search?: boolean | null;
    perform_setup?: boolean;
    /**
     * HNSW settings for PGVector index. Set to null to disable HNSW indexing in favor of a brute force indexing/exact search strategy instead.
     */
    hnsw_settings?: PgVectorHnswSettings | null;
    class_name?: string;
};
type CloudPostgresVectorStoreWritable = {
    supports_nested_metadata_filters?: boolean;
    database: string;
    host: string;
    password: string;
    port: number;
    user: string;
    table_name: string;
    schema_name: string;
    embed_dim: number;
    hybrid_search?: boolean | null;
    perform_setup?: boolean;
    /**
     * HNSW settings for PGVector index. Set to null to disable HNSW indexing in favor of a brute force indexing/exact search strategy instead.
     */
    hnsw_settings?: PgVectorHnswSettings | null;
    class_name?: string;
};
/**
 * Cloud Qdrant Vector Store.
 *
 * This class is used to store the configuration for a Qdrant vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * collection_name (str): name of the Qdrant collection
 * url (str): url of the Qdrant instance
 * api_key (str): API key for authenticating with Qdrant
 * max_retries (int): maximum number of retries in case of a failure. Defaults to 3
 * client_kwargs (dict): additional kwargs to pass to the Qdrant client
 */
type CloudQdrantVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    collection_name: string;
    url: string;
    max_retries?: number;
    client_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
/**
 * Cloud Qdrant Vector Store.
 *
 * This class is used to store the configuration for a Qdrant vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * collection_name (str): name of the Qdrant collection
 * url (str): url of the Qdrant instance
 * api_key (str): API key for authenticating with Qdrant
 * max_retries (int): maximum number of retries in case of a failure. Defaults to 3
 * client_kwargs (dict): additional kwargs to pass to the Qdrant client
 */
type CloudQdrantVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    collection_name: string;
    url: string;
    api_key: string;
    max_retries?: number;
    client_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
type CloudS3DataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The name of the S3 bucket to read from.
     */
    bucket: string;
    /**
     * The prefix of the S3 objects to read from.
     */
    prefix?: string | null;
    /**
     * The regex pattern to filter S3 objects. Must be a valid regex pattern.
     */
    regex_pattern?: string | null;
    /**
     * The AWS access ID to use for authentication.
     */
    aws_access_id?: string | null;
    /**
     * The AWS access secret to use for authentication.
     */
    aws_access_secret?: string | null;
    /**
     * The S3 endpoint URL to use for authentication.
     */
    s3_endpoint_url?: string | null;
    class_name?: string;
};
type CloudS3DataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The name of the S3 bucket to read from.
     */
    bucket: string;
    /**
     * The prefix of the S3 objects to read from.
     */
    prefix?: string | null;
    /**
     * The regex pattern to filter S3 objects. Must be a valid regex pattern.
     */
    regex_pattern?: string | null;
    /**
     * The AWS access ID to use for authentication.
     */
    aws_access_id?: string | null;
    /**
     * The AWS access secret to use for authentication.
     */
    aws_access_secret?: string | null;
    /**
     * The S3 endpoint URL to use for authentication.
     */
    s3_endpoint_url?: string | null;
    class_name?: string;
};
type CloudSharepointDataSourceReadable = {
    supports_access_control?: true;
    /**
     * The name of the SharePoint site to download from.
     */
    site_name?: string | null;
    /**
     * The ID of the SharePoint site to download from.
     */
    site_id?: string | null;
    /**
     * The path of the Sharepoint folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the Sharepoint folder to read from.
     */
    folder_id?: string | null;
    /**
     * The name of the Sharepoint drive to read from.
     */
    drive_name?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    /**
     * Whether to get permissions for the sharepoint site.
     */
    get_permissions?: boolean | null;
    class_name?: string;
};
type CloudSharepointDataSourceWritable = {
    supports_access_control?: true;
    /**
     * The name of the SharePoint site to download from.
     */
    site_name?: string | null;
    /**
     * The ID of the SharePoint site to download from.
     */
    site_id?: string | null;
    /**
     * The path of the Sharepoint folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the Sharepoint folder to read from.
     */
    folder_id?: string | null;
    /**
     * The name of the Sharepoint drive to read from.
     */
    drive_name?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The client secret to use for authentication.
     */
    client_secret: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    /**
     * Whether to get permissions for the sharepoint site.
     */
    get_permissions?: boolean | null;
    class_name?: string;
};
type CloudSlackDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * Slack Channel.
     */
    channel_ids?: string | null;
    /**
     * Latest date.
     */
    latest_date?: string | null;
    /**
     * Earliest date.
     */
    earliest_date?: string | null;
    /**
     * Earliest date timestamp.
     */
    earliest_date_timestamp?: number | null;
    /**
     * Latest date timestamp.
     */
    latest_date_timestamp?: number | null;
    /**
     * Slack Channel name pattern.
     */
    channel_patterns?: string | null;
    class_name?: string;
};
type CloudSlackDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * Slack Bot Token.
     */
    slack_token: string;
    /**
     * Slack Channel.
     */
    channel_ids?: string | null;
    /**
     * Latest date.
     */
    latest_date?: string | null;
    /**
     * Earliest date.
     */
    earliest_date?: string | null;
    /**
     * Earliest date timestamp.
     */
    earliest_date_timestamp?: number | null;
    /**
     * Latest date timestamp.
     */
    latest_date_timestamp?: number | null;
    /**
     * Slack Channel name pattern.
     */
    channel_patterns?: string | null;
    class_name?: string;
};
type CohereEmbedding = {
    /**
     * The modelId of the Cohere model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The Cohere API key.
     */
    api_key: string | null;
    /**
     * Truncation type - START/ END/ NONE
     */
    truncate?: string;
    /**
     * Model Input type. If not provided, search_document and search_query are used when needed.
     */
    input_type?: string | null;
    /**
     * Embedding type. If not provided float embedding_type is used when needed.
     */
    embedding_type?: string;
    class_name?: string;
};
type CohereEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "COHERE_EMBEDDING";
    /**
     * Configuration for the Cohere embedding model.
     */
    component?: CohereEmbedding;
};
/**
 * Enum for the mode of composite retrieval.
 */
type CompositeRetrievalMode = "routing" | "full";
/**
 * Enum for the mode of composite retrieval.
 */
declare const CompositeRetrievalMode: {
    readonly ROUTING: "routing";
    readonly FULL: "full";
};
type CompositeRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
    /**
     * The query to retrieve against.
     */
    query: string;
};
type CompositeRetrievalResult = {
    /**
     * The retrieved nodes from the composite retrieval.
     */
    nodes?: Array<CompositeRetrievedTextNodeWithScore>;
    /**
     * The image nodes retrieved by the pipeline for the given query. Deprecated - will soon be replaced with 'page_screenshot_nodes'.
     * @deprecated
     */
    image_nodes?: Array<PageScreenshotNodeWithScore>;
    /**
     * The page figure nodes retrieved by the pipeline for the given query.
     */
    page_figure_nodes?: Array<PageFigureNodeWithScore>;
};
type CompositeRetrievedTextNode = {
    /**
     * The ID of the retrieved node.
     */
    id: string;
    /**
     * The ID of the retriever this node was retrieved from.
     */
    retriever_id: string;
    /**
     * The name of the retrieval pipeline this node was retrieved from.
     */
    retriever_pipeline_name: string;
    /**
     * The ID of the pipeline this node was retrieved from.
     */
    pipeline_id: string;
    /**
     * Metadata associated with the retrieved node.
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * The text of the retrieved node.
     */
    text: string;
    /**
     * The start character index of the retrieved node in the document
     */
    start_char_idx: number | null;
    /**
     * The end character index of the retrieved node in the document
     */
    end_char_idx: number | null;
};
type CompositeRetrievedTextNodeWithScore = {
    node: CompositeRetrievedTextNode;
    score?: number | null;
    class_name?: string;
};
type ConfigurableDataSinkNames = "PINECONE" | "POSTGRES" | "QDRANT" | "AZUREAI_SEARCH" | "MONGODB_ATLAS" | "MILVUS" | "ASTRA_DB";
declare const ConfigurableDataSinkNames: {
    readonly PINECONE: "PINECONE";
    readonly POSTGRES: "POSTGRES";
    readonly QDRANT: "QDRANT";
    readonly AZUREAI_SEARCH: "AZUREAI_SEARCH";
    readonly MONGODB_ATLAS: "MONGODB_ATLAS";
    readonly MILVUS: "MILVUS";
    readonly ASTRA_DB: "ASTRA_DB";
};
type ConfigurableDataSourceNames = "S3" | "AZURE_STORAGE_BLOB" | "GOOGLE_DRIVE" | "MICROSOFT_ONEDRIVE" | "MICROSOFT_SHAREPOINT" | "SLACK" | "NOTION_PAGE" | "CONFLUENCE" | "JIRA" | "JIRA_V2" | "BOX";
declare const ConfigurableDataSourceNames: {
    readonly S3: "S3";
    readonly AZURE_STORAGE_BLOB: "AZURE_STORAGE_BLOB";
    readonly GOOGLE_DRIVE: "GOOGLE_DRIVE";
    readonly MICROSOFT_ONEDRIVE: "MICROSOFT_ONEDRIVE";
    readonly MICROSOFT_SHAREPOINT: "MICROSOFT_SHAREPOINT";
    readonly SLACK: "SLACK";
    readonly NOTION_PAGE: "NOTION_PAGE";
    readonly CONFLUENCE: "CONFLUENCE";
    readonly JIRA: "JIRA";
    readonly JIRA_V2: "JIRA_V2";
    readonly BOX: "BOX";
};
type CreateIntentAndCustomerSessionResponse = {
    client_secret: string;
    customer_session_client_secret: string | null;
};
type CreditType = {
    id: string;
    name: string;
};
/**
 * Custom claims that dictate various limits or allowed behaviors.
 * Currently these claims reside at a per user level. Claims may expand to a per organization level or project in the future.
 */
type CustomClaims = {
    /**
     * Whether the user is allowed to create organizations.
     */
    allowed_org_creation?: boolean;
    /**
     * The maximum number of jobs the user can have in execution per job type.
     */
    max_jobs_in_execution_per_job_type?: number;
    /**
     * The maximum number of document ingestion jobs the user can have in execution.
     */
    max_document_ingestion_jobs_in_execution?: number;
    /**
     * The maximum number of metadata update jobs the user can have in execution.
     */
    max_metadata_update_jobs_in_execution?: number;
    /**
     * Whether the user is a test user for extraction. This will include additional debug metadata and access to test endpoints.
     */
    extraction_test_user?: boolean;
    /**
     * Whether the user is allowed to access llama-report generation.
     */
    allowed_report?: boolean;
    /**
     * Whether the user is allowed to access the app.
     */
    allowed_app?: boolean;
    /**
     * Whether the user is allowed to access the classifier feature.
     */
    allowed_classify?: boolean;
    /**
     * Whether the user is allowed to access API data sources.
     */
    api_datasource_access?: boolean;
    /**
     * Whether the user is allowed to delete organizations.
     */
    allow_org_deletion?: boolean;
    /**
     * Whether the user is allowed to access the spreadsheet feature.
     */
    allowed_spreadsheet?: boolean;
};
type CustomerPortalSessionCreatePayload = {
    return_url: string;
};
/**
 * Schema for a data sink.
 */
type DataSinkReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable | CloudAstraDbVectorStoreReadable;
    project_id: string;
};
/**
 * Schema for a data sink.
 */
type DataSinkWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable | CloudAstraDbVectorStoreWritable;
    project_id: string;
};
/**
 * Schema for creating a data sink.
 */
type DataSinkCreateReadable = {
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable | CloudAstraDbVectorStoreReadable;
};
/**
 * Schema for creating a data sink.
 */
type DataSinkCreateWritable = {
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable | CloudAstraDbVectorStoreWritable;
};
/**
 * Schema for updating a data sink.
 */
type DataSinkUpdateReadable = {
    /**
     * The name of the data sink.
     */
    name?: string | null;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component?: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable | CloudAstraDbVectorStoreReadable | null;
};
/**
 * Schema for updating a data sink.
 */
type DataSinkUpdateWritable = {
    /**
     * The name of the data sink.
     */
    name?: string | null;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component?: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable | CloudAstraDbVectorStoreWritable | null;
};
/**
 * Schema for a data source.
 */
type DataSourceReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudJiraDataSourceV2Readable | CloudBoxDataSourceReadable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: DataSourceReaderVersionMetadata | null;
    project_id: string;
};
/**
 * Schema for a data source.
 */
type DataSourceWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudJiraDataSourceV2Writable | CloudBoxDataSourceWritable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: DataSourceReaderVersionMetadata | null;
    project_id: string;
};
/**
 * Schema for creating a data source.
 */
type DataSourceCreateReadable = {
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudJiraDataSourceV2Readable | CloudBoxDataSourceReadable;
};
/**
 * Schema for creating a data source.
 */
type DataSourceCreateWritable = {
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudJiraDataSourceV2Writable | CloudBoxDataSourceWritable;
};
type DataSourceReaderVersionMetadata = {
    /**
     * The version of the reader to use for this data source.
     */
    reader_version?: ("1.0" | "2.0" | "2.1") | null;
};
/**
 * Schema for updating a data source.
 */
type DataSourceUpdateReadable = {
    /**
     * The name of the data source.
     */
    name?: string | null;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component?: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudJiraDataSourceV2Readable | CloudBoxDataSourceReadable | null;
};
/**
 * Schema for updating a data source.
 */
type DataSourceUpdateWritable = {
    /**
     * The name of the data source.
     */
    name?: string | null;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component?: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudJiraDataSourceV2Writable | CloudBoxDataSourceWritable | null;
};
/**
 * Schema for the parameters of a data source dispatcher job.
 */
type DataSourceUpdateDispatcherConfig = {
    type?: "data_source_update_dispatcher";
    /**
     * Whether to delete the data source from the pipeline
     */
    should_delete?: boolean | null;
    /**
     * The custom metadata to attach to the data source.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
/**
 * Schema for updating the default organization for a user.
 */
type DefaultOrganizationUpdate = {
    /**
     * The organization's ID.
     */
    organization_id: string;
};
/**
 * Schema for the parameters of a delete job.
 */
type DeleteParams = {
    /**
     * The IDs for the documents to delete.
     */
    document_ids_to_delete?: Array<string> | null;
    /**
     * The IDs for the files to delete.
     */
    files_ids_to_delete?: Array<string> | null;
    /**
     * The IDs for the data sources to delete.
     */
    data_sources_ids_to_delete?: Array<string> | null;
    /**
     * The collection name to delete.
     */
    embed_collection_name?: string | null;
    /**
     * The ID for the data sink from which to delete data.
     */
    data_sink_id?: string | null;
};
/**
 * API request body for bulk deleting agent data by query
 */
type DeleteRequest = {
    /**
     * The agent deployment's name to delete data for
     */
    deployment_name: string;
    /**
     * The logical agent data collection to delete from
     */
    collection?: string;
    /**
     * Optional filters to select which items to delete
     */
    filter?: {
        [key: string]: FilterOperation;
    } | null;
};
/**
 * API response for bulk delete operation
 */
type DeleteResponse = {
    deleted_count: number;
};
type DirectRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
    /**
     * The query to retrieve against.
     */
    query: string;
    /**
     * The pipelines to use for retrieval.
     */
    pipelines?: Array<RetrieverPipeline>;
};
type DocumentChunkMode = "PAGE" | "SECTION";
declare const DocumentChunkMode: {
    readonly PAGE: "PAGE";
    readonly SECTION: "SECTION";
};
/**
 * Schema for the parameters of a document ingestion job.
 */
type DocumentIngestionJobParams = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "document_ingestion";
    /**
     * Whether to delete the documents
     */
    should_delete?: boolean | null;
    /**
     * The IDs for the Documents this execution ran against.
     */
    document_ids?: Array<string> | null;
    /**
     * The ID for the File this execution ran against.
     */
    pipeline_file_id?: string | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
    /**
     * Whether the file is new
     */
    is_new_file?: boolean;
    /**
     * The number of pages in the file. Only used if used llama-parse
     */
    page_count?: number | null;
};
type ElementSegmentationConfig = {
    mode?: "element";
};
/**
 * Schema for an embedding model config.
 */
type EmbeddingModelConfig = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the embedding model config.
     */
    name: string;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    project_id: string;
};
type EmbeddingModelConfigCreate = {
    /**
     * The name of the embedding model config.
     */
    name: string;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
};
type EmbeddingModelConfigUpdate = {
    /**
     * The name of the embedding model config.
     */
    name?: string | null;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
};
/**
 * Schema for the params for an eval execution.
 */
type EvalExecutionParams = {
    /**
     * The LLM model to use within eval execution.
     */
    llm_model?: SupportedLlmModelNames;
    /**
     * The template to use for the question answering prompt.
     */
    qa_prompt_tmpl?: string;
};
/**
 * Schema and configuration for creating an extraction agent.
 */
type ExtractAgent = {
    /**
     * The id of the extraction agent.
     */
    id: string;
    /**
     * The name of the extraction agent.
     */
    name: string;
    /**
     * The ID of the project that the extraction agent belongs to.
     */
    project_id: string;
    /**
     * The schema of the data.
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
    /**
     * Custom configuration type for the extraction agent. Currently supports 'default'.
     */
    custom_configuration?: "default" | null;
    /**
     * The creation time of the extraction agent.
     */
    created_at?: string | null;
    /**
     * The last update time of the extraction agent.
     */
    updated_at?: string | null;
};
/**
 * Settings for creating an extraction agent.
 */
type ExtractAgentCreate = {
    /**
     * The name of the extraction schema
     */
    name: string;
    /**
     * The schema of the data.
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
};
/**
 * Settings for updating an extraction schema.
 */
type ExtractAgentUpdate = {
    /**
     * The schema of the data
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
};
/**
 * Additional parameters for the extraction agent.
 */
type ExtractConfig = {
    /**
     * The priority for the request. This field may be ignored or overwritten depending on the organization tier.
     */
    priority?: ("low" | "medium" | "high" | "critical") | null;
    /**
     * The extraction target specified.
     */
    extraction_target?: ExtractTarget;
    /**
     * The extraction mode specified (FAST, BALANCED, MULTIMODAL, PREMIUM).
     */
    extraction_mode?: ExtractMode;
    /**
     * The parse model to use for document parsing. If not provided, uses the default for the extraction mode.
     */
    parse_model?: PublicModelName | null;
    /**
     * The extract model to use for data extraction. If not provided, uses the default for the extraction mode.
     */
    extract_model?: ExtractModels | null;
    /**
     * DEPRECATED: Whether to use fast mode for multimodal extraction.
     */
    multimodal_fast_mode?: boolean;
    /**
     * The system prompt to use for the extraction.
     */
    system_prompt?: string | null;
    /**
     * Whether to use reasoning for the extraction.
     */
    use_reasoning?: boolean;
    /**
     * Whether to cite sources for the extraction.
     */
    cite_sources?: boolean;
    /**
     * Whether to fetch confidence scores for the extraction.
     */
    confidence_scores?: boolean;
    /**
     * The mode to use for chunking the document.
     */
    chunk_mode?: DocumentChunkMode;
    /**
     * Whether to use high resolution mode for the extraction.
     */
    high_resolution_mode?: boolean;
    /**
     * Whether to invalidate the cache for the extraction.
     */
    invalidate_cache?: boolean;
    /**
     * Number of pages to pass as context on long document extraction.
     */
    num_pages_context?: number | null;
    /**
     * Comma-separated list of page numbers or ranges to extract from (1-based, e.g., '1,3,5-7,9' or '1-3,8-10').
     */
    page_range?: string | null;
};
type ExtractJob = {
    /**
     * The id of the extraction job
     */
    id: string;
    /**
     * The agent that the job was run on.
     */
    extraction_agent: ExtractAgent;
    /**
     * The status of the extraction job
     */
    status: StatusEnum;
    /**
     * The error that occurred during extraction
     */
    error?: string | null;
    /**
     * The file that the extract was extracted from
     */
    file: File;
};
/**
 * Schema for creating an extraction job.
 */
type ExtractJobCreate = {
    /**
     * The priority for the request. This field may be ignored or overwritten depending on the organization tier.
     */
    priority?: ("low" | "medium" | "high" | "critical") | null;
    /**
     * The outbound webhook configurations
     */
    webhook_configurations?: Array<WebhookConfiguration> | null;
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The id of the file
     */
    file_id: string;
    /**
     * The data schema to override the extraction agent's data schema with
     */
    data_schema_override?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string | null;
    /**
     * The config to override the extraction agent's config with
     */
    config_override?: ExtractConfig | null;
};
/**
 * Schema for creating extraction jobs in batch.
 */
type ExtractJobCreateBatch = {
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The ids of the files
     */
    file_ids: Array<string>;
    /**
     * The data schema to override the extraction agent's data schema with
     */
    data_schema_override?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string | null;
    /**
     * The config to override the extraction agent's config with
     */
    config_override?: ExtractConfig | null;
};
type ExtractMode = "FAST" | "BALANCED" | "PREMIUM" | "MULTIMODAL";
declare const ExtractMode: {
    readonly FAST: "FAST";
    readonly BALANCED: "BALANCED";
    readonly PREMIUM: "PREMIUM";
    readonly MULTIMODAL: "MULTIMODAL";
};
type ExtractModels = "openai-gpt-4-1" | "openai-gpt-4-1-mini" | "openai-gpt-4-1-nano" | "openai-gpt-5" | "openai-gpt-5-mini" | "gemini-2.0-flash" | "gemini-2.5-flash" | "gemini-2.5-flash-lite" | "gemini-2.5-pro" | "openai-gpt-4o" | "openai-gpt-4o-mini";
declare const ExtractModels: {
    readonly OPENAI_GPT_4_1: "openai-gpt-4-1";
    readonly OPENAI_GPT_4_1_MINI: "openai-gpt-4-1-mini";
    readonly OPENAI_GPT_4_1_NANO: "openai-gpt-4-1-nano";
    readonly OPENAI_GPT_5: "openai-gpt-5";
    readonly OPENAI_GPT_5_MINI: "openai-gpt-5-mini";
    readonly GEMINI_2_0_FLASH: "gemini-2.0-flash";
    readonly GEMINI_2_5_FLASH: "gemini-2.5-flash";
    readonly GEMINI_2_5_FLASH_LITE: "gemini-2.5-flash-lite";
    readonly GEMINI_2_5_PRO: "gemini-2.5-pro";
    readonly OPENAI_GPT_4O: "openai-gpt-4o";
    readonly OPENAI_GPT_4O_MINI: "openai-gpt-4o-mini";
};
/**
 * Schema for an extraction resultset.
 */
type ExtractResultset = {
    /**
     * The id of the extraction run
     */
    run_id: string;
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The data extracted from the file
     */
    data: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | Array<{
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    }> | null;
    /**
     * The metadata extracted from the file
     */
    extraction_metadata: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
};
/**
 * Schema for an extraction run.
 */
type ExtractRun = {
    /**
     * The id of the extraction run
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The schema used for extraction
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
    /**
     * The config used for extraction
     */
    config: ExtractConfig;
    /**
     * The file that the extract was extracted from
     */
    file: File;
    /**
     * The status of the extraction run
     */
    status: ExtractState;
    /**
     * The error that occurred during extraction
     */
    error?: string | null;
    /**
     * The id of the job that the extraction run belongs to
     */
    job_id?: string | null;
    /**
     * The data extracted from the file
     */
    data?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | Array<{
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    }> | null;
    /**
     * The metadata extracted from the file
     */
    extraction_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Whether this extraction run was triggered from the UI
     */
    from_ui: boolean;
};
/**
 * Request schema for generating an extraction schema.
 */
type ExtractSchemaGenerateRequest = {
    /**
     * Natural language description of the data structure to extract
     */
    prompt?: string | null;
    /**
     * Optional file ID to analyze for schema generation
     */
    file_id?: string | null;
};
/**
 * Response schema for schema generation.
 */
type ExtractSchemaGenerateResponse = {
    /**
     * The generated JSON schema
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
};
type ExtractSchemaValidateRequest = {
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
};
type ExtractSchemaValidateResponse = {
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
};
type ExtractState = "CREATED" | "PENDING" | "SUCCESS" | "ERROR";
declare const ExtractState: {
    readonly CREATED: "CREATED";
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
};
/**
 * Schema for stateless extraction requests.
 */
type ExtractStatelessRequest = {
    /**
     * The outbound webhook configurations
     */
    webhook_configurations?: Array<WebhookConfiguration> | null;
    /**
     * The schema of the data to extract
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
    /**
     * The configuration parameters for the extraction
     */
    config: ExtractConfig;
    /**
     * The ID of the file to extract from
     */
    file_id?: string | null;
    /**
     * The text content to extract from
     */
    text?: string | null;
    /**
     * The file data with base64 content and MIME type
     */
    file?: FileData | null;
};
type ExtractTarget = "PER_DOC" | "PER_PAGE";
declare const ExtractTarget: {
    readonly PER_DOC: "PER_DOC";
    readonly PER_PAGE: "PER_PAGE";
};
/**
 * A single extracted table from a spreadsheet
 */
type ExtractedTable = {
    /**
     * Unique identifier for this table within the file
     */
    table_id: number;
    /**
     * Worksheet name where table was found
     */
    sheet_name: string;
    /**
     * Number of rows in the table
     */
    row_span: number;
    /**
     * Number of columns in the table
     */
    col_span: number;
    /**
     * Whether the table has header rows
     */
    has_headers: boolean;
    /**
     * JSON metadata with detailed table information
     */
    metadata_json?: string | null;
};
/**
 * Enum for representing the different available page error handling modes
 */
type FailPageMode = "raw_text" | "blank_page" | "error_message";
/**
 * Enum for representing the different available page error handling modes
 */
declare const FailPageMode: {
    readonly RAW_TEXT: "raw_text";
    readonly BLANK_PAGE: "blank_page";
    readonly ERROR_MESSAGE: "error_message";
};
/**
 * Configuration for handling different types of failures during data source processing.
 */
type FailureHandlingConfig = {
    /**
     * Whether to skip failed batches/lists and continue processing
     */
    skip_list_failures?: boolean;
};
/**
 * Schema for a file.
 */
type File = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    /**
     * The ID of the file in the external system
     */
    external_file_id?: string | null;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * File type (e.g. pdf, docx, etc.)
     */
    file_type?: string | null;
    /**
     * The ID of the project that the file belongs to
     */
    project_id: string;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
};
/**
 * A file classification.
 */
type FileClassification = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The ID of the classify job
     */
    classify_job_id: string;
    /**
     * The ID of the classified file
     */
    file_id: string;
    /**
     * The classification result
     */
    result?: ClassificationResult | null;
};
type FileCountByStatusResponse = {
    /**
     * The counts of files by status
     */
    counts: {
        [key: string]: number;
    };
    /**
     * The total number of files
     */
    total_count: number;
    /**
     * The ID of the pipeline that the files belong to
     */
    pipeline_id?: string | null;
    /**
     * The ID of the data source that the files belong to
     */
    data_source_id?: string | null;
    /**
     * Whether to only count manually uploaded files
     */
    only_manually_uploaded?: boolean;
};
type FileCreate = {
    /**
     * Name that will be used for created file. If possible, always include the file extension in the name.
     */
    name: string;
    /**
     * The ID of the file in the external system
     */
    external_file_id?: string | null;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
};
type FileCreateFromUrl = {
    /**
     * Name that will be used for created file. If possible, always include the file extension in the name.
     */
    name?: string | null;
    /**
     * URL of the file to download
     */
    url: string;
    /**
     * URL of the proxy server to use for downloading the file
     */
    proxy_url?: string | null;
    /**
     * Headers to include in the request when downloading the file
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Whether to verify the SSL certificate when downloading the file
     */
    verify_ssl?: boolean;
    /**
     * Whether to follow redirects when downloading the file
     */
    follow_redirects?: boolean;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
/**
 * Schema for file data with base64 content and MIME type.
 */
type FileData = {
    /**
     * The file content as base64-encoded string
     */
    data: string;
    /**
     * The MIME type of the file (e.g., 'application/pdf', 'text/plain')
     */
    mime_type: string;
};
/**
 * Filter parameters for file queries.
 */
type FileFilter = {
    /**
     * Filter by project ID
     */
    project_id?: string | null;
    /**
     * Filter by specific file IDs
     */
    file_ids?: Array<string> | null;
    /**
     * Filter by file name
     */
    file_name?: string | null;
    /**
     * Filter by data source ID
     */
    data_source_id?: string | null;
    /**
     * Filter by external file ID
     */
    external_file_id?: string | null;
    /**
     * Filter only manually uploaded files (data_source_id is null)
     */
    only_manually_uploaded?: boolean | null;
};
/**
 * Schema for a presigned URL with a file ID.
 */
type FileIdPresignedUrl = {
    /**
     * A presigned URL for IO operations against a private file
     */
    url: string;
    /**
     * The time at which the presigned URL expires
     */
    expires_at: string;
    /**
     * Form fields for a presigned POST request
     */
    form_fields?: {
        [key: string]: string;
    } | null;
    /**
     * The ID of the file associated with the presigned URL
     */
    file_id: string;
};
type FileParsePublic = {
    /**
     * The date and time when the file was parsed.
     */
    created_at: string;
    /**
     * The status of the parse task.
     */
    status: string;
    /**
     * The date and time when the file parse started.
     */
    started_at?: string | null;
    /**
     * The date and time when the file parse ended.
     */
    ended_at?: string | null;
    /**
     * The path to the input file.
     */
    input_path: string;
    /**
     * The path to the data file.
     */
    data_path: string;
};
/**
 * Request schema for querying files with pagination and filtering.
 */
type FileQueryRequest = {
    /**
     * The maximum number of items to return. The service may return fewer than this value. If unspecified, a default page size will be used. The maximum value is typically 1000; values above this will be coerced to the maximum.
     */
    page_size?: number | null;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    page_token?: string | null;
    /**
     * A filter object or expression that filters resources listed in the response.
     */
    filter?: FileFilter | null;
    /**
     * A comma-separated list of fields to order by, sorted in ascending order. Use 'field_name desc' to specify descending order.
     */
    order_by?: string | null;
};
/**
 * Response schema for paginated file queries.
 */
type FileQueryResponse = {
    /**
     * The list of items.
     */
    items: Array<File>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
/**
 * Vector store filter conditions to combine different filters.
 */
type FilterCondition = "and" | "or" | "not";
/**
 * Vector store filter conditions to combine different filters.
 */
declare const FilterCondition: {
    readonly AND: "and";
    readonly OR: "or";
    readonly NOT: "not";
};
/**
 * API request model for a filter comparison operation.
 */
type FilterOperation = {
    eq?: number | number | string | null;
    gt?: number | number | string | null;
    gte?: number | number | string | null;
    lt?: number | number | string | null;
    lte?: number | number | string | null;
    includes?: Array<number | number | string | null>;
};
/**
 * Vector store filter operator.
 */
type FilterOperator = "==" | ">" | "<" | "!=" | ">=" | "<=" | "in" | "nin" | "any" | "all" | "text_match" | "text_match_insensitive" | "contains" | "is_empty";
/**
 * Vector store filter operator.
 */
declare const FilterOperator: {
    readonly "==": "==";
    readonly ">": ">";
    readonly "<": "<";
    readonly "!=": "!=";
    readonly ">=": ">=";
    readonly "<=": "<=";
    readonly IN: "in";
    readonly NIN: "nin";
    readonly ANY: "any";
    readonly ALL: "all";
    readonly TEXT_MATCH: "text_match";
    readonly TEXT_MATCH_INSENSITIVE: "text_match_insensitive";
    readonly CONTAINS: "contains";
    readonly IS_EMPTY: "is_empty";
};
type FreeCreditsUsage = {
    starting_balance: number;
    remaining_balance: number;
    grant_name: string;
    expires_at: string;
};
type GeminiEmbedding = {
    /**
     * The modelId of the Gemini model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid.
     */
    title?: string | null;
    /**
     * The task for embedding model.
     */
    task_type?: string | null;
    /**
     * API key to access the model. Defaults to None.
     */
    api_key?: string | null;
    /**
     * API base to access the model. Defaults to None.
     */
    api_base?: string | null;
    /**
     * Transport to access the model. Defaults to None.
     */
    transport?: string | null;
    class_name?: string;
};
type GeminiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "GEMINI_EMBEDDING";
    /**
     * Configuration for the Gemini embedding model.
     */
    component?: GeminiEmbedding;
};
type HttpValidationError = {
    detail?: Array<ValidationError>;
};
type HuggingFaceInferenceApiEmbedding = {
    /**
     * Hugging Face model name. If None, the task will be used.
     */
    model_name?: string | null;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Pooling strategy. If None, the model's default pooling is used.
     */
    pooling?: Pooling | null;
    /**
     * Instruction to prepend during query embedding.
     */
    query_instruction?: string | null;
    /**
     * Instruction to prepend during text embedding.
     */
    text_instruction?: string | null;
    /**
     * Hugging Face token. Will default to the locally saved token. Pass token=False if you don’t want to send your token to the server.
     */
    token?: string | boolean | null;
    /**
     * The maximum number of seconds to wait for a response from the server. Loading a new model in Inference API can take up to several minutes. Defaults to None, meaning it will loop until the server is available.
     */
    timeout?: number | null;
    /**
     * Additional headers to send to the server. By default only the authorization and user-agent headers are sent. Values in this dictionary will override the default values.
     */
    headers?: {
        [key: string]: string;
    } | null;
    /**
     * Additional cookies to send to the server.
     */
    cookies?: {
        [key: string]: string;
    } | null;
    /**
     * Optional task to pick Hugging Face's recommended model, used when model_name is left as default of None.
     */
    task?: string | null;
    class_name?: string;
};
type HuggingFaceInferenceApiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "HUGGINGFACE_API_EMBEDDING";
    /**
     * Configuration for the HuggingFace Inference API embedding model.
     */
    component?: HuggingFaceInferenceApiEmbedding;
};
type IngestionErrorResponse = {
    /**
     * ID of the job that failed.
     */
    job_id: string;
    /**
     * List of errors that occurred during ingestion.
     */
    message: string;
    /**
     * Name of the job that failed.
     */
    step: JobNameMapping;
};
/**
 * This is distinct from a ChatMessage because this schema is enforced by the AI Chat library used in the frontend
 */
type InputMessage = {
    /**
     * ID of the message, if any. a UUID.
     */
    id?: string;
    role: MessageRole;
    content: string;
    /**
     * Additional data to be stored with the message.
     */
    data?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
/**
 * Enum for mapping original job names to readable names.
 */
type JobNameMapping = "MANAGED_INGESTION" | "DATA_SOURCE" | "FILES_UPDATE" | "FILE_UPDATER" | "PARSE" | "TRANSFORM" | "INGESTION" | "METADATA_UPDATE";
/**
 * Enum for mapping original job names to readable names.
 */
declare const JobNameMapping: {
    readonly MANAGED_INGESTION: "MANAGED_INGESTION";
    readonly DATA_SOURCE: "DATA_SOURCE";
    readonly FILES_UPDATE: "FILES_UPDATE";
    readonly FILE_UPDATER: "FILE_UPDATER";
    readonly PARSE: "PARSE";
    readonly TRANSFORM: "TRANSFORM";
    readonly INGESTION: "INGESTION";
    readonly METADATA_UPDATE: "METADATA_UPDATE";
};
/**
 * Enum for executable pipeline job names.
 */
type JobNames = "load_documents_job" | "load_files_job" | "playground_job" | "pipeline_managed_ingestion_job" | "data_source_update_dispatcher_job" | "pipeline_file_update_dispatcher_job" | "pipeline_file_updater_job" | "file_managed_ingestion_job" | "document_ingestion_job" | "metadata_update_job" | "parse_raw_file_job_cached" | "extraction_job" | "extract_job" | "asyncio_test_job" | "parse_raw_file_job" | "llama_parse_transform_job";
/**
 * Enum for executable pipeline job names.
 */
declare const JobNames: {
    readonly LOAD_DOCUMENTS_JOB: "load_documents_job";
    readonly LOAD_FILES_JOB: "load_files_job";
    readonly PLAYGROUND_JOB: "playground_job";
    readonly PIPELINE_MANAGED_INGESTION_JOB: "pipeline_managed_ingestion_job";
    readonly DATA_SOURCE_UPDATE_DISPATCHER_JOB: "data_source_update_dispatcher_job";
    readonly PIPELINE_FILE_UPDATE_DISPATCHER_JOB: "pipeline_file_update_dispatcher_job";
    readonly PIPELINE_FILE_UPDATER_JOB: "pipeline_file_updater_job";
    readonly FILE_MANAGED_INGESTION_JOB: "file_managed_ingestion_job";
    readonly DOCUMENT_INGESTION_JOB: "document_ingestion_job";
    readonly METADATA_UPDATE_JOB: "metadata_update_job";
    readonly PARSE_RAW_FILE_JOB_CACHED: "parse_raw_file_job_cached";
    readonly EXTRACTION_JOB: "extraction_job";
    readonly EXTRACT_JOB: "extract_job";
    readonly ASYNCIO_TEST_JOB: "asyncio_test_job";
    readonly PARSE_RAW_FILE_JOB: "parse_raw_file_job";
    readonly LLAMA_PARSE_TRANSFORM_JOB: "llama_parse_transform_job";
};
/**
 * Schema for a job's metadata.
 */
type JobRecord = {
    /**
     * The outbound webhook configurations
     */
    webhook_configurations?: Array<WebhookConfiguration> | null;
    /**
     * The name of the job.
     */
    job_name: JobNames;
    /**
     * The partitions for this execution. Used for determining where to save job output.
     */
    partitions: {
        [key: string]: string;
    };
    /**
     * Additional metadata for the job execution.
     */
    parameters?: (({
        type: "parse";
    } & ParseJobConfig) | ({
        type: "legacy_parse";
    } & LegacyParseJobConfig) | ({
        type: "load_files";
    } & LoadFilesJobConfig) | ({
        type: "llama_parse_transform";
    } & LLamaParseTransformConfig) | ({
        type: "pipeline_managed_ingestion";
    } & PipelineManagedIngestionJobParams) | ({
        type: "data_source_update_dispatcher";
    } & DataSourceUpdateDispatcherConfig) | ({
        type: "pipeline_file_update_dispatcher";
    } & PipelineFileUpdateDispatcherConfig) | ({
        type: "pipeline_file_updater";
    } & PipelineFileUpdaterConfig) | ({
        type: "document_ingestion";
    } & DocumentIngestionJobParams)) | null;
    /**
     * The upstream request ID that created this job. Used for tracking the job across services.
     */
    session_id?: string | null;
    /**
     * The correlation ID for this job. Used for tracking the job across services.
     */
    correlation_id?: string | null;
    /**
     * The ID of the parent job execution.
     */
    parent_job_execution_id?: string | null;
    /**
     * The ID of the user that created this job
     */
    user_id?: string | null;
    /**
     * Creation datetime
     */
    created_at: string;
    /**
     * The ID of the project this job belongs to.
     */
    project_id?: string | null;
    /**
     * Unique identifier
     */
    id?: string;
    status: StatusEnum;
    error_code?: string | null;
    error_message?: string | null;
    /**
     * The number of times this job has been attempted
     */
    attempts?: number | null;
    started_at?: string | null;
    ended_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string;
};
type JobRecordWithUsageMetrics = {
    job_record: JobRecord;
    usage_metrics?: UsageMetricResponse | null;
    user: UserJobRecord;
};
/**
 * Schema for an eval LLM model.
 */
type LlmModelData = {
    /**
     * The name of the LLM model.
     */
    name: string;
    /**
     * The description of the LLM model.
     */
    description: string;
    /**
     * Whether the model supports multi-modal image input
     */
    multi_modal: boolean;
    model_name?: string;
};
type LlmParameters = {
    /**
     * The name of the model to use for LLM completions.
     */
    model_name?: SupportedLlmModelNames;
    /**
     * The system prompt to use for the completion.
     */
    system_prompt?: string | null;
    /**
     * The temperature value for the model.
     */
    temperature?: number | null;
    /**
     * Whether to use chain of thought reasoning.
     */
    use_chain_of_thought_reasoning?: boolean | null;
    /**
     * Whether to show citations in the response.
     */
    use_citation?: boolean | null;
    class_name?: string;
};
/**
 * Schema for the parameters of llamaparse transform job.
 */
type LLamaParseTransformConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "llama_parse_transform";
    /**
     * Whether to delete the files
     */
    file_output: string;
};
/**
 * Configuration for llamaparse job
 */
type LegacyParseJobConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "legacy_parse";
    /**
     * The user ID.
     */
    userId: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The original file name.
     */
    originalFileName: string;
    /**
     * The file key.
     */
    fileKey: string;
    /**
     * The input URL.
     */
    inputUrl?: string | null;
    /**
     * The HTTP proxy.
     */
    httpProxy?: string | null;
    /**
     * Whether to use fast mode.
     */
    fastMode?: boolean | null;
    /**
     * The language.
     */
    lang: string;
    /**
     * The parsing instruction.
     */
    template?: string;
    /**
     * The pipeline ID.
     */
    pipelineId?: string | null;
    /**
     * The output bucket.
     */
    outputBucket?: string | null;
    /**
     * The file ID.
     */
    fileId?: string | null;
    /**
     * The full file path.
     */
    fullFilePath?: string | null;
    /**
     * Whether the file is from LLama cloud.
     */
    fromLLamaCloud?: boolean;
    /**
     * Whether to skip diagonal text.
     */
    skipDiagonalText?: boolean;
    /**
     * Whether to preserve layout alignment across pages.
     */
    preserveLayoutAlignmentAcrossPages?: boolean;
    /**
     * Whether to preserve very small text lines.
     */
    preserveVerySmallText?: boolean;
    /**
     * Whether to invalidate the cache.
     */
    invalidateCache: boolean;
    /**
     * Whether to output PDF of document
     */
    outputPDFOfDocument?: boolean | null;
    /**
     * Whether to try to extract outlined tables
     */
    outlinedTableExtraction?: boolean | null;
    /**
     * Whether to merge tables across pages in markdown
     */
    mergeTablesAcrossPagesInMarkdown?: boolean | null;
    /**
     * Whether to output images contained in the document
     */
    saveImages?: boolean | null;
    /**
     * Whether to use GPT4o.
     */
    gpt4o?: boolean;
    /**
     * The OpenAI API key.
     */
    openAIAPIKey: string;
    /**
     * Whether to unroll columns.
     */
    doNotUnrollColumns?: boolean;
    /**
     * Whether to extract subTables from spreadsheet.
     */
    spreadSheetExtractSubTables?: boolean | null;
    /**
     * Whether to force re-computation of spreadsheet cells containing formulas.
     */
    spreadSheetForceFormulaComputation?: boolean | null;
    /**
     * Whether to perform layout extraction.
     */
    extractLayout?: boolean | null;
    /**
     * Whether to use high resolution OCR (Slow).
     */
    highResOcr?: boolean | null;
    /**
     * Whether to make all elements visible.
     */
    htmlMakeAllElementsVisible?: boolean | null;
    /**
     * Whether to remove fixed elements.
     */
    htmlRemoveFixedElements?: boolean | null;
    /**
     * Whether to remove navigation elements.
     */
    htmlRemoveNavigationElements?: boolean | null;
    /**
     * Whether to guess the XLSX sheet name when generation output xlsx.
     */
    guessXLSXSheetName?: boolean;
    /**
     * Whether to cache.
     */
    doNotCache?: boolean;
    /**
     * The page separator.
     */
    pageSeparator?: string | null;
    /**
     * A string describing a bounding box to use to parse the document. Contain 4 value between 0 to 1 representing in clock wise order the margin top, right, bottom, left of the selection bounding box in ratio of the document.
     */
    boundingBox?: string | null;
    /**
     * The top side of the bounding box.
     */
    bboxTop?: number | null;
    /**
     * The right side of the bounding box.
     */
    bboxRight?: number | null;
    /**
     * The bottom side of the bounding box.
     */
    bboxBottom?: number | null;
    /**
     * The left side of the bounding box.
     */
    bboxLeft?: number | null;
    /**
     * Whether to disable markdown reconstruction.
     */
    disableReconstruction?: boolean | null;
    /**
     * A string containing a list of comma separated containing the page number to extract. If not specified all pages are extracted from the document. The first page is the page 0.
     */
    targetPages?: string | null;
    /**
     * True if parsing happen in multimodal mode.
     */
    multimodalPipeline?: boolean | null;
    /**
     * The multimodal model to use.
     */
    multimodalModel?: string | null;
    /**
     * The model to use.
     */
    model?: string | null;
    /**
     * The multimodal vendor API key.
     */
    vendorAPIKey?: string | null;
    /**
     * A page prefix to add before each page.
     */
    pagePrefix?: string | null;
    /**
     * A page suffix to add after each page.
     */
    pageSuffix?: string | null;
    /**
     * The URL that needs to be called at the end of the parsing job.
     */
    webhookUrl?: string | null;
    /**
     * The preset of options to be used.
     */
    preset?: string | null;
    /**
     * Force to capture an image of each pages
     */
    takeScreenshot?: boolean;
    /**
     * Allow the parsing instruction to also format the output.
     */
    isFormattingInstruction?: boolean;
    /**
     * Whether to use premiumMode pipeline.
     */
    premiumMode?: boolean;
    /**
     * Whether to use continuousMode pipeline.
     */
    continuousMode?: boolean;
    /**
     * Disable the OCR on the document. LlamaParse will only extract the copyable text from the document
     */
    disableOcr?: boolean;
    /**
     * Disable the image extraction from the document. LlamaParse will not extract any image from the document.
     */
    disableImageExtraction?: boolean;
    /**
     * Annotate links in markdown. LlamaParse will try to add links from document into the markdown.
     */
    annotateLinks?: boolean;
    /**
     * Adaptive long table. LlamaParse will try to detect long table and adapt the output.
     */
    adaptiveLongTable?: boolean;
    /**
     * Compact markdown table. LlamaParse will compact the markdown table to not include too many spaces.
     */
    compactMarkdownTable?: boolean;
    /**
     * If specified, llamaParse will take the specified file. should be a valid s3:// url
     */
    inputS3Path?: string | null;
    /**
     * The region for the input S3 bucket.
     */
    inputS3Region?: string | null;
    /**
     * If specified, llamaParse will save the output to the specified path. All output file will use this 'prefix' should be a valid s3:// url
     */
    outputS3PathPrefix?: string | null;
    /**
     * The region for the output S3 bucket.
     */
    outputS3Region?: string | null;
    /**
     * The project ID.
     */
    projectId?: string | null;
    /**
     * Custom azure deployment name.
     */
    azureOpenAiDeploymentName?: string | null;
    /**
     * Custom azure endpoint.
     */
    azureOpenAiEndpoint?: string | null;
    /**
     * Custom azure API version.
     */
    azureOpenAiApiVersion?: string | null;
    /**
     * Custom azure API key.
     */
    azureOpenAiKey?: string | null;
    /**
     * Whether to use auto mode.
     */
    autoMode?: boolean;
    /**
     * Whether to trigger on table in page.
     */
    autoModeTriggerOnTableInPage?: boolean;
    /**
     * Whether to trigger on image in page.
     */
    autoModeTriggerOnImageInPage?: boolean;
    /**
     * The regexp to trigger on.
     */
    autoModeTriggerOnRegexpInPage?: string | null;
    /**
     * The text to trigger on.
     */
    autoModeTriggerOnTextInPage?: string | null;
    /**
     * The auto mode configuration JSON. This is a JSON string that contains the configuration for the auto mode.
     */
    autoModeConfigurationJSON?: string | null;
    /**
     * Whether to use structured output.
     */
    structuredOutput?: boolean;
    /**
     * The structured output JSON schema.
     */
    structuredOutputJSONSchema?: string | null;
    /**
     * The structured output JSON schema name.
     */
    structuredOutputJSONSchemaName?: string | null;
    /**
     * The maximum number of pages to parse.
     */
    maxPages?: number | null;
    /**
     * Extract charts from the document.
     */
    extractCharts?: boolean;
    /**
     * A natural language instruction on how to format the result. Override LlamaParse default instruction.
     */
    formattingInstruction?: string | null;
    /**
     * A natural language instruction on how to format the result that complement LlamaParse default instruction.
     */
    complementalFormattingInstruction?: string | null;
    /**
     * A natural language instruction on how to transform the content of the result (not the format).
     */
    contentGuidelineInstruction?: string | null;
    /**
     * Manually set a timeout in second for a job. Minimum is 120
     */
    jobTimeoutInSeconds?: number | null;
    /**
     * Manually set additional time per page for timeout in second for a job.
     */
    jobTimeoutExtraTimePerPageInSeconds?: number | null;
    /**
     * If true, the job will fail when we are not able to extract an image from a document.
     */
    strictModeImageExtraction?: boolean;
    /**
     * If true, the job will fail when we are not able to OCR an image from a document.
     */
    strictModeImageOCR?: boolean;
    /**
     * If true, the job will fail when we are not able to transform a page to Markdown in a document.
     */
    strictModeReconstruction?: boolean;
    /**
     * If true, the job will fail when we are not able to extract a glyph from the document due to buggy font.
     */
    strictModeBuggyFont?: boolean;
    /**
     * If true, the job will ignore document element for layout detection, and instead just rely on a visual model, only apply to layout detection.
     */
    ignoreDocumentElementsForLayoutDetection?: boolean;
    /**
     * If true, the job will output tables as HTML in the markdown output, useful for merged cells.
     */
    outputTablesAsHTML?: boolean;
    /**
     * The parsing mode.
     */
    parseMode?: string | null;
    /**
     * The system prompt.
     */
    systemPrompt?: string | null;
    /**
     * The append to system prompt.
     */
    systemPromptAppend?: string | null;
    /**
     * The user prompt.
     */
    userPrompt?: string | null;
    /**
     * The page header prefix.
     */
    pageHeaderPrefix?: string | null;
    /**
     * The page header suffix.
     */
    pageHeaderSuffix?: string | null;
    /**
     * The page footer prefix.
     */
    pageFooterPrefix?: string | null;
    /**
     * The page footer suffix.
     */
    pageFooterSuffix?: string | null;
    /**
     * Whether to hide headers in the output.
     */
    hideHeaders?: boolean;
    /**
     * Whether to hide footers in the output.
     */
    hideFooters?: boolean;
};
/**
 * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
 */
type LlamaParseParameters = {
    /**
     * The outbound webhook configurations
     */
    webhook_configurations?: Array<WebhookConfiguration> | null;
    /**
     * The priority for the request. This field may be ignored or overwritten depending on the organization tier.
     */
    priority?: ("low" | "medium" | "high" | "critical") | null;
    languages?: Array<ParserLanguages>;
    parsing_instruction?: string | null;
    disable_ocr?: boolean | null;
    annotate_links?: boolean | null;
    adaptive_long_table?: boolean | null;
    compact_markdown_table?: boolean | null;
    disable_reconstruction?: boolean | null;
    disable_image_extraction?: boolean | null;
    invalidate_cache?: boolean | null;
    outlined_table_extraction?: boolean | null;
    merge_tables_across_pages_in_markdown?: boolean | null;
    output_pdf_of_document?: boolean | null;
    do_not_cache?: boolean | null;
    fast_mode?: boolean | null;
    skip_diagonal_text?: boolean | null;
    preserve_layout_alignment_across_pages?: boolean | null;
    preserve_very_small_text?: boolean | null;
    gpt4o_mode?: boolean | null;
    gpt4o_api_key?: string | null;
    do_not_unroll_columns?: boolean | null;
    extract_layout?: boolean | null;
    high_res_ocr?: boolean | null;
    html_make_all_elements_visible?: boolean | null;
    layout_aware?: boolean | null;
    specialized_chart_parsing_agentic?: boolean | null;
    specialized_chart_parsing_plus?: boolean | null;
    specialized_chart_parsing_efficient?: boolean | null;
    specialized_image_parsing?: boolean | null;
    precise_bounding_box?: boolean | null;
    html_remove_navigation_elements?: boolean | null;
    html_remove_fixed_elements?: boolean | null;
    guess_xlsx_sheet_name?: boolean | null;
    page_separator?: string | null;
    bounding_box?: string | null;
    bbox_top?: number | null;
    bbox_right?: number | null;
    bbox_bottom?: number | null;
    bbox_left?: number | null;
    target_pages?: string | null;
    use_vendor_multimodal_model?: boolean | null;
    vendor_multimodal_model_name?: string | null;
    model?: string | null;
    vendor_multimodal_api_key?: string | null;
    page_prefix?: string | null;
    page_suffix?: string | null;
    webhook_url?: string | null;
    preset?: string | null;
    take_screenshot?: boolean | null;
    is_formatting_instruction?: boolean | null;
    premium_mode?: boolean | null;
    continuous_mode?: boolean | null;
    input_s3_path?: string | null;
    input_s3_region?: string | null;
    output_s3_path_prefix?: string | null;
    output_s3_region?: string | null;
    project_id?: string | null;
    azure_openai_deployment_name?: string | null;
    azure_openai_endpoint?: string | null;
    azure_openai_api_version?: string | null;
    azure_openai_key?: string | null;
    input_url?: string | null;
    http_proxy?: string | null;
    auto_mode?: boolean | null;
    auto_mode_trigger_on_regexp_in_page?: string | null;
    auto_mode_trigger_on_text_in_page?: string | null;
    auto_mode_trigger_on_table_in_page?: boolean | null;
    auto_mode_trigger_on_image_in_page?: boolean | null;
    auto_mode_configuration_json?: string | null;
    structured_output?: boolean | null;
    structured_output_json_schema?: string | null;
    structured_output_json_schema_name?: string | null;
    max_pages?: number | null;
    max_pages_enforced?: number | null;
    extract_charts?: boolean | null;
    formatting_instruction?: string | null;
    complemental_formatting_instruction?: string | null;
    content_guideline_instruction?: string | null;
    spreadsheet_extract_sub_tables?: boolean | null;
    spreadsheet_force_formula_computation?: boolean | null;
    inline_images_in_markdown?: boolean | null;
    job_timeout_in_seconds?: number | null;
    job_timeout_extra_time_per_page_in_seconds?: number | null;
    strict_mode_image_extraction?: boolean | null;
    strict_mode_image_ocr?: boolean | null;
    strict_mode_reconstruction?: boolean | null;
    strict_mode_buggy_font?: boolean | null;
    save_images?: boolean | null;
    hide_headers?: boolean | null;
    hide_footers?: boolean | null;
    page_header_prefix?: string | null;
    page_header_suffix?: string | null;
    page_footer_prefix?: string | null;
    page_footer_suffix?: string | null;
    ignore_document_elements_for_layout_detection?: boolean | null;
    output_tables_as_HTML?: boolean | null;
    internal_is_screenshot_job?: boolean | null;
    parse_mode?: ParsingMode | null;
    system_prompt?: string | null;
    system_prompt_append?: string | null;
    user_prompt?: string | null;
    page_error_tolerance?: number | null;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string | null;
    replace_failed_page_with_error_message_suffix?: string | null;
    markdown_table_multiline_header_separator?: string | null;
};
type LlamaParseSupportedFileExtensions = ".pdf" | ".doc" | ".docx" | ".docm" | ".dot" | ".dotx" | ".dotm" | ".rtf" | ".wps" | ".wpd" | ".sxw" | ".stw" | ".sxg" | ".pages" | ".mw" | ".mcw" | ".uot" | ".uof" | ".uos" | ".uop" | ".ppt" | ".pptx" | ".pot" | ".pptm" | ".potx" | ".potm" | ".key" | ".odp" | ".odg" | ".otp" | ".fopd" | ".sxi" | ".sti" | ".epub" | ".jpg" | ".jpeg" | ".png" | ".gif" | ".bmp" | ".svg" | ".tiff" | ".webp" | ".html" | ".htm" | ".xls" | ".xlsx" | ".xlsm" | ".xlsb" | ".xlw" | ".csv" | ".dif" | ".sylk" | ".slk" | ".prn" | ".numbers" | ".et" | ".ods" | ".fods" | ".uos1" | ".uos2" | ".dbf" | ".wk1" | ".wk2" | ".wk3" | ".wk4" | ".wks" | ".wq1" | ".wq2" | ".wb1" | ".wb2" | ".wb3" | ".qpw" | ".xlr" | ".eth" | ".tsv";
declare const LlamaParseSupportedFileExtensions: {
    readonly ".PDF": ".pdf";
    readonly ".DOC": ".doc";
    readonly ".DOCX": ".docx";
    readonly ".DOCM": ".docm";
    readonly ".DOT": ".dot";
    readonly ".DOTX": ".dotx";
    readonly ".DOTM": ".dotm";
    readonly ".RTF": ".rtf";
    readonly ".WPS": ".wps";
    readonly ".WPD": ".wpd";
    readonly ".SXW": ".sxw";
    readonly ".STW": ".stw";
    readonly ".SXG": ".sxg";
    readonly ".PAGES": ".pages";
    readonly ".MW": ".mw";
    readonly ".MCW": ".mcw";
    readonly ".UOT": ".uot";
    readonly ".UOF": ".uof";
    readonly ".UOS": ".uos";
    readonly ".UOP": ".uop";
    readonly ".PPT": ".ppt";
    readonly ".PPTX": ".pptx";
    readonly ".POT": ".pot";
    readonly ".PPTM": ".pptm";
    readonly ".POTX": ".potx";
    readonly ".POTM": ".potm";
    readonly ".KEY": ".key";
    readonly ".ODP": ".odp";
    readonly ".ODG": ".odg";
    readonly ".OTP": ".otp";
    readonly ".FOPD": ".fopd";
    readonly ".SXI": ".sxi";
    readonly ".STI": ".sti";
    readonly ".EPUB": ".epub";
    readonly ".JPG": ".jpg";
    readonly ".JPEG": ".jpeg";
    readonly ".PNG": ".png";
    readonly ".GIF": ".gif";
    readonly ".BMP": ".bmp";
    readonly ".SVG": ".svg";
    readonly ".TIFF": ".tiff";
    readonly ".WEBP": ".webp";
    readonly ".HTML": ".html";
    readonly ".HTM": ".htm";
    readonly ".XLS": ".xls";
    readonly ".XLSX": ".xlsx";
    readonly ".XLSM": ".xlsm";
    readonly ".XLSB": ".xlsb";
    readonly ".XLW": ".xlw";
    readonly ".CSV": ".csv";
    readonly ".DIF": ".dif";
    readonly ".SYLK": ".sylk";
    readonly ".SLK": ".slk";
    readonly ".PRN": ".prn";
    readonly ".NUMBERS": ".numbers";
    readonly ".ET": ".et";
    readonly ".ODS": ".ods";
    readonly ".FODS": ".fods";
    readonly ".UOS1": ".uos1";
    readonly ".UOS2": ".uos2";
    readonly ".DBF": ".dbf";
    readonly ".WK1": ".wk1";
    readonly ".WK2": ".wk2";
    readonly ".WK3": ".wk3";
    readonly ".WK4": ".wk4";
    readonly ".WKS": ".wks";
    readonly ".WQ1": ".wq1";
    readonly ".WQ2": ".wq2";
    readonly ".WB1": ".wb1";
    readonly ".WB2": ".wb2";
    readonly ".WB3": ".wb3";
    readonly ".QPW": ".qpw";
    readonly ".XLR": ".xlr";
    readonly ".ETH": ".eth";
    readonly ".TSV": ".tsv";
};
/**
 * Schema for the parameters of a load files job.
 */
type LoadFilesJobConfig = {
    type?: "load_files";
    /**
     * The names of the files this execution should run against.
     */
    file_ids?: Array<string> | null;
};
/**
 * Status of managed ingestion with partial Updates.
 */
type ManagedIngestionStatus = "NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Status of managed ingestion with partial Updates.
 */
declare const ManagedIngestionStatus: {
    readonly NOT_STARTED: "NOT_STARTED";
    readonly IN_PROGRESS: "IN_PROGRESS";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};
type ManagedIngestionStatusResponse = {
    /**
     * ID of the latest job.
     */
    job_id?: string | null;
    /**
     * Date of the deployment.
     */
    deployment_date?: string | null;
    /**
     * Status of the ingestion.
     */
    status: ManagedIngestionStatus;
    /**
     * List of errors that occurred during ingestion.
     */
    error?: Array<IngestionErrorResponse> | null;
    /**
     * When the status is effective
     */
    effective_at?: string | null;
};
type ManagedOpenAiEmbedding = {
    /**
     * The name of the OpenAI embedding model.
     */
    model_name?: "openai-text-embedding-3-small";
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    class_name?: string;
};
type ManagedOpenAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "MANAGED_OPENAI_EMBEDDING";
    /**
     * Configuration for the Managed OpenAI embedding model.
     */
    component?: ManagedOpenAiEmbedding;
};
type MessageAnnotation = {
    type: string;
    data: string;
    class_name?: string;
};
/**
 * Message role.
 */
type MessageRole = "system" | "developer" | "user" | "assistant" | "function" | "tool" | "chatbot" | "model";
/**
 * Message role.
 */
declare const MessageRole: {
    readonly SYSTEM: "system";
    readonly DEVELOPER: "developer";
    readonly USER: "user";
    readonly ASSISTANT: "assistant";
    readonly FUNCTION: "function";
    readonly TOOL: "tool";
    readonly CHATBOT: "chatbot";
    readonly MODEL: "model";
};
/**
 * Comprehensive metadata filter for vector stores to support more operators.
 *
 * Value uses Strict types, as int, float and str are compatible types and were all
 * converted to string before.
 *
 * See: https://docs.pydantic.dev/latest/usage/types/#strict-types
 */
type MetadataFilter = {
    key: string;
    value: number | number | string | Array<string> | Array<number> | Array<number> | null;
    operator?: FilterOperator;
};
/**
 * Metadata filters for vector stores.
 */
type MetadataFilters = {
    filters: Array<MetadataFilter | MetadataFilters>;
    condition?: FilterCondition | null;
};
type MetronomeDashboardResponse = {
    url: string;
};
type MetronomeDashboardType = "invoices" | "usage";
declare const MetronomeDashboardType: {
    readonly INVOICES: "invoices";
    readonly USAGE: "usage";
};
/**
 * Node relationships used in `BaseNode` class.
 *
 * Attributes:
 * SOURCE: The node is the source document.
 * PREVIOUS: The node is the previous node in the document.
 * NEXT: The node is the next node in the document.
 * PARENT: The node is the parent node in the document.
 * CHILD: The node is a child node in the document.
 */
type NodeRelationship = "1" | "2" | "3" | "4" | "5";
/**
 * Node relationships used in `BaseNode` class.
 *
 * Attributes:
 * SOURCE: The node is the source document.
 * PREVIOUS: The node is the previous node in the document.
 * NEXT: The node is the next node in the document.
 * PARENT: The node is the parent node in the document.
 * CHILD: The node is a child node in the document.
 */
declare const NodeRelationship: {
    readonly 1: "1";
    readonly 2: "2";
    readonly 3: "3";
    readonly 4: "4";
    readonly 5: "5";
};
type NoneChunkingConfig = {
    mode?: "none";
};
type NoneSegmentationConfig = {
    mode?: "none";
};
type ObjectType = "1" | "2" | "3" | "4" | "5";
declare const ObjectType: {
    readonly 1: "1";
    readonly 2: "2";
    readonly 3: "3";
    readonly 4: "4";
    readonly 5: "5";
};
type OpenAiEmbedding = {
    /**
     * The name of the OpenAI embedding model.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Additional kwargs for the OpenAI API.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The OpenAI API key.
     */
    api_key?: string | null;
    /**
     * The base URL for OpenAI API.
     */
    api_base?: string | null;
    /**
     * The version for OpenAI API.
     */
    api_version?: string | null;
    /**
     * Maximum number of retries.
     */
    max_retries?: number;
    /**
     * Timeout for each request.
     */
    timeout?: number;
    /**
     * The default headers for API requests.
     */
    default_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.
     */
    reuse_client?: boolean;
    /**
     * The number of dimensions on the output embedding vectors. Works only with v3 embedding models.
     */
    dimensions?: number | null;
    class_name?: string;
};
type OpenAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "OPENAI_EMBEDDING";
    /**
     * Configuration for the OpenAI embedding model.
     */
    component?: OpenAiEmbedding;
};
/**
 * Schema for an organization.
 */
type Organization = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the organization.
     */
    name: string;
    /**
     * The Stripe customer ID for the organization.
     */
    stripe_customer_id?: string | null;
    /**
     * Whether the organization is a Parse Premium customer.
     */
    parse_plan_level?: ParsePlanLevel;
    /**
     * Feature flags for the organization.
     */
    feature_flags?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Schema for creating an organization.
 */
type OrganizationCreate = {
    /**
     * A name for the organization.
     */
    name: string;
};
/**
 * Schema for updating an organization.
 */
type OrganizationUpdate = {
    /**
     * A name for the organization.
     */
    name: string;
    /**
     * Feature flags for the organization.
     */
    feature_flags?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Distance methods for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
type PgVectorDistanceMethod = "l2" | "ip" | "cosine" | "l1" | "hamming" | "jaccard";
/**
 * Distance methods for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
declare const PgVectorDistanceMethod: {
    readonly L2: "l2";
    readonly IP: "ip";
    readonly COSINE: "cosine";
    readonly L1: "l1";
    readonly HAMMING: "hamming";
    readonly JACCARD: "jaccard";
};
/**
 * HNSW settings for PGVector.
 */
type PgVectorHnswSettings = {
    /**
     * The number of edges to use during the construction phase.
     */
    ef_construction?: number;
    /**
     * The number of edges to use during the search phase.
     */
    ef_search?: number;
    /**
     * The number of bi-directional links created for each new element.
     */
    m?: number;
    /**
     * The type of vector to use.
     */
    vector_type?: PgVectorVectorType;
    /**
     * The distance method to use.
     */
    distance_method?: PgVectorDistanceMethod;
};
/**
 * Vector storage formats for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
type PgVectorVectorType = "vector" | "half_vec" | "bit" | "sparse_vec";
/**
 * Vector storage formats for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
declare const PgVectorVectorType: {
    readonly VECTOR: "vector";
    readonly HALF_VEC: "half_vec";
    readonly BIT: "bit";
    readonly SPARSE_VEC: "sparse_vec";
};
type PageFigureMetadata = {
    /**
     * The name of the figure
     */
    figure_name: string;
    /**
     * The ID of the file that the figure was taken from
     */
    file_id: string;
    /**
     * The index of the page for which the figure is taken (0-indexed)
     */
    page_index: number;
    /**
     * The size of the figure in bytes
     */
    figure_size: number;
    /**
     * Whether the figure is likely to be noise
     */
    is_likely_noise?: boolean;
    /**
     * The confidence of the figure
     */
    confidence: number;
    /**
     * Metadata for the figure
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Page figure metadata with score
 */
type PageFigureNodeWithScore = {
    node: PageFigureMetadata;
    /**
     * The score of the figure node
     */
    score: number;
    class_name?: string;
};
type PageScreenshotMetadata = {
    /**
     * The index of the page for which the screenshot is taken (0-indexed)
     */
    page_index: number;
    /**
     * The ID of the file that the page screenshot was taken from
     */
    file_id: string;
    /**
     * The size of the image in bytes
     */
    image_size: number;
    /**
     * Metadata for the screenshot
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Page screenshot metadata with score
 */
type PageScreenshotNodeWithScore = {
    node: PageScreenshotMetadata;
    /**
     * The score of the screenshot node
     */
    score: number;
    class_name?: string;
};
type PageSegmentationConfig = {
    mode?: "page";
    page_separator?: string;
};
/**
 * Schema for paginated extraction runs response.
 */
type PaginatedExtractRunsResponse = {
    /**
     * The list of extraction runs
     */
    items: Array<ExtractRun>;
    /**
     * The total number of extraction runs
     */
    total: number;
    /**
     * The number of extraction runs skipped
     */
    skip: number;
    /**
     * The maximum number of extraction runs returned
     */
    limit: number;
};
type PaginatedJobsHistoryWithMetrics = {
    jobs: Array<JobRecordWithUsageMetrics>;
    total_count: number;
    limit: number;
    offset: number;
};
type PaginatedListCloudDocumentsResponse = {
    /**
     * The documents to list
     */
    documents: Array<CloudDocument>;
    /**
     * The limit of the documents
     */
    limit: number;
    /**
     * The offset of the documents
     */
    offset: number;
    /**
     * The total number of documents
     */
    total_count: number;
};
type PaginatedListPipelineFilesResponse = {
    /**
     * The files to list
     */
    files: Array<PipelineFile>;
    /**
     * The limit of the files
     */
    limit: number;
    /**
     * The offset of the files
     */
    offset: number;
    /**
     * The total number of files
     */
    total_count: number;
};
type PaginatedResponseAgentData = {
    /**
     * The list of items.
     */
    items: Array<AgentData>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
type PaginatedResponseAggregateGroup = {
    /**
     * The list of items.
     */
    items: Array<AggregateGroup>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
type PaginatedResponseClassifyJob = {
    /**
     * The list of items.
     */
    items: Array<ClassifyJob>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
type PaginatedResponseQuotaConfiguration = {
    total: number;
    page: number;
    size: number;
    pages: number;
    items: Array<QuotaConfiguration>;
};
type PaginatedResponseSpreadsheetJob = {
    /**
     * The list of items.
     */
    items: Array<SpreadsheetJob>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
/**
 * Parse configuration schema.
 */
type ParseConfiguration = {
    /**
     * Unique identifier for the parse configuration
     */
    id: string;
    /**
     * Name of the parse configuration
     */
    name: string;
    /**
     * Type of the source (e.g., 'project')
     */
    source_type: string;
    /**
     * ID of the source
     */
    source_id: string;
    /**
     * Creator of the configuration
     */
    creator?: string | null;
    /**
     * Version of the configuration
     */
    version: string;
    /**
     * LlamaParseParameters configuration
     */
    parameters: LlamaParseParameters;
    /**
     * Creation timestamp
     */
    created_at: string;
    /**
     * Last update timestamp
     */
    updated_at: string;
};
/**
 * Schema for creating a new parse configuration (API boundary).
 */
type ParseConfigurationCreate = {
    /**
     * Name of the parse configuration
     */
    name: string;
    /**
     * Type of the source (e.g., 'project')
     */
    source_type?: string | null;
    /**
     * ID of the source
     */
    source_id?: string | null;
    /**
     * Creator of the configuration
     */
    creator?: string | null;
    /**
     * Version of the configuration
     */
    version: string;
    /**
     * LlamaParseParameters configuration
     */
    parameters: LlamaParseParameters;
};
/**
 * Filter parameters for parse configuration queries.
 */
type ParseConfigurationFilter = {
    /**
     * Filter by name
     */
    name?: string | null;
    /**
     * Filter by source type
     */
    source_type?: string | null;
    /**
     * Filter by source ID
     */
    source_id?: string | null;
    /**
     * Filter by creator
     */
    creator?: string | null;
    /**
     * Filter by version
     */
    version?: string | null;
    /**
     * Filter by specific parse configuration IDs
     */
    parse_config_ids?: Array<string> | null;
};
/**
 * Request schema for querying parse configurations with pagination and filtering.
 */
type ParseConfigurationQueryRequest = {
    /**
     * The maximum number of items to return. The service may return fewer than this value. If unspecified, a default page size will be used. The maximum value is typically 1000; values above this will be coerced to the maximum.
     */
    page_size?: number | null;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    page_token?: string | null;
    /**
     * A filter object or expression that filters resources listed in the response.
     */
    filter?: ParseConfigurationFilter | null;
    /**
     * A comma-separated list of fields to order by, sorted in ascending order. Use 'field_name desc' to specify descending order.
     */
    order_by?: string | null;
};
/**
 * Response schema for paginated parse configuration queries.
 */
type ParseConfigurationQueryResponse = {
    /**
     * The list of items.
     */
    items: Array<ParseConfiguration>;
    /**
     * A token, which can be sent as page_token to retrieve the next page. If this field is omitted, there are no subsequent pages.
     */
    next_page_token?: string | null;
    /**
     * The total number of items available. This is only populated when specifically requested. The value may be an estimate and can be used for display purposes only.
     */
    total_size?: number | null;
};
/**
 * Schema for updating an existing parse configuration.
 */
type ParseConfigurationUpdate = {
    /**
     * Updated LlamaParseParameters configuration
     */
    parameters?: LlamaParseParameters | null;
};
/**
 * Configuration for llamaparse job
 */
type ParseJobConfig = {
    /**
     * The outbound webhook configurations
     */
    webhook_configurations?: Array<WebhookConfiguration> | null;
    /**
     * The priority for the request. This field may be ignored or overwritten depending on the organization tier.
     */
    priority?: ("low" | "medium" | "high" | "critical") | null;
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    languages?: Array<ParserLanguages>;
    parsing_instruction?: string | null;
    disable_ocr?: boolean | null;
    annotate_links?: boolean | null;
    adaptive_long_table?: boolean | null;
    compact_markdown_table?: boolean | null;
    disable_reconstruction?: boolean | null;
    disable_image_extraction?: boolean | null;
    invalidate_cache?: boolean | null;
    outlined_table_extraction?: boolean | null;
    merge_tables_across_pages_in_markdown?: boolean | null;
    output_pdf_of_document?: boolean | null;
    do_not_cache?: boolean | null;
    fast_mode?: boolean | null;
    skip_diagonal_text?: boolean | null;
    preserve_layout_alignment_across_pages?: boolean | null;
    preserve_very_small_text?: boolean | null;
    gpt4o_mode?: boolean | null;
    gpt4o_api_key?: string | null;
    do_not_unroll_columns?: boolean | null;
    extract_layout?: boolean | null;
    high_res_ocr?: boolean | null;
    html_make_all_elements_visible?: boolean | null;
    layout_aware?: boolean | null;
    specialized_chart_parsing_agentic?: boolean | null;
    specialized_chart_parsing_plus?: boolean | null;
    specialized_chart_parsing_efficient?: boolean | null;
    specialized_image_parsing?: boolean | null;
    precise_bounding_box?: boolean | null;
    html_remove_navigation_elements?: boolean | null;
    html_remove_fixed_elements?: boolean | null;
    guess_xlsx_sheet_name?: boolean | null;
    page_separator?: string | null;
    bounding_box?: string | null;
    bbox_top?: number | null;
    bbox_right?: number | null;
    bbox_bottom?: number | null;
    bbox_left?: number | null;
    target_pages?: string | null;
    use_vendor_multimodal_model?: boolean | null;
    vendor_multimodal_model_name?: string | null;
    model?: string | null;
    vendor_multimodal_api_key?: string | null;
    page_prefix?: string | null;
    page_suffix?: string | null;
    webhook_url?: string | null;
    preset?: string | null;
    take_screenshot?: boolean | null;
    is_formatting_instruction?: boolean | null;
    premium_mode?: boolean | null;
    continuous_mode?: boolean | null;
    /**
     * If specified, llamaParse will take the specified file. should be a valid s3:// url
     */
    input_s3_path?: string | null;
    /**
     * The region for the input S3 bucket.
     */
    input_s3_region?: string | null;
    /**
     * If specified, llamaParse will save the output to the specified path. All output file will use this 'prefix' should be a valid s3:// url
     */
    output_s3_path_prefix?: string | null;
    /**
     * The region for the output S3 bucket.
     */
    output_s3_region?: string | null;
    project_id?: string | null;
    azure_openai_deployment_name?: string | null;
    azure_openai_endpoint?: string | null;
    azure_openai_api_version?: string | null;
    azure_openai_key?: string | null;
    input_url?: string | null;
    http_proxy?: string | null;
    auto_mode?: boolean | null;
    auto_mode_trigger_on_regexp_in_page?: string | null;
    auto_mode_trigger_on_text_in_page?: string | null;
    auto_mode_trigger_on_table_in_page?: boolean | null;
    auto_mode_trigger_on_image_in_page?: boolean | null;
    auto_mode_configuration_json?: string | null;
    structured_output?: boolean | null;
    structured_output_json_schema?: string | null;
    structured_output_json_schema_name?: string | null;
    max_pages?: number | null;
    max_pages_enforced?: number | null;
    extract_charts?: boolean | null;
    formatting_instruction?: string | null;
    complemental_formatting_instruction?: string | null;
    content_guideline_instruction?: string | null;
    spreadsheet_extract_sub_tables?: boolean | null;
    spreadsheet_force_formula_computation?: boolean | null;
    inline_images_in_markdown?: boolean | null;
    job_timeout_in_seconds?: number | null;
    job_timeout_extra_time_per_page_in_seconds?: number | null;
    strict_mode_image_extraction?: boolean | null;
    strict_mode_image_ocr?: boolean | null;
    strict_mode_reconstruction?: boolean | null;
    strict_mode_buggy_font?: boolean | null;
    save_images?: boolean | null;
    hide_headers?: boolean | null;
    hide_footers?: boolean | null;
    page_header_prefix?: string | null;
    page_header_suffix?: string | null;
    page_footer_prefix?: string | null;
    page_footer_suffix?: string | null;
    ignore_document_elements_for_layout_detection?: boolean | null;
    output_tables_as_HTML?: boolean | null;
    internal_is_screenshot_job?: boolean | null;
    parse_mode?: ParsingMode | null;
    system_prompt?: string | null;
    system_prompt_append?: string | null;
    user_prompt?: string | null;
    page_error_tolerance?: number | null;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string | null;
    replace_failed_page_with_error_message_suffix?: string | null;
    markdown_table_multiline_header_separator?: string | null;
    type?: "parse";
    /**
     * The file name.
     */
    file_name: string;
    /**
     * The original file name.
     */
    original_file_name: string;
    /**
     * The file key.
     */
    file_key: string;
    /**
     * The language.
     */
    lang: string;
    /**
     * The output bucket.
     */
    outputBucket?: string | null;
    /**
     * The file ID.
     */
    file_id?: string | null;
    /**
     * The pipeline ID.
     */
    pipeline_id?: string | null;
};
/**
 * Enum for the Parse plan level.
 */
type ParsePlanLevel = "DEFAULT" | "PREMIUM";
/**
 * Enum for the Parse plan level.
 */
declare const ParsePlanLevel: {
    readonly DEFAULT: "DEFAULT";
    readonly PREMIUM: "PREMIUM";
};
/**
 * Enum for representing the languages supported by the parser
 */
type ParserLanguages = "af" | "az" | "bs" | "cs" | "cy" | "da" | "de" | "en" | "es" | "et" | "fr" | "ga" | "hr" | "hu" | "id" | "is" | "it" | "ku" | "la" | "lt" | "lv" | "mi" | "ms" | "mt" | "nl" | "no" | "oc" | "pi" | "pl" | "pt" | "ro" | "rs_latin" | "sk" | "sl" | "sq" | "sv" | "sw" | "tl" | "tr" | "uz" | "vi" | "ar" | "fa" | "ug" | "ur" | "bn" | "as" | "mni" | "ru" | "rs_cyrillic" | "be" | "bg" | "uk" | "mn" | "abq" | "ady" | "kbd" | "ava" | "dar" | "inh" | "che" | "lbe" | "lez" | "tab" | "tjk" | "hi" | "mr" | "ne" | "bh" | "mai" | "ang" | "bho" | "mah" | "sck" | "new" | "gom" | "sa" | "bgc" | "th" | "ch_sim" | "ch_tra" | "ja" | "ko" | "ta" | "te" | "kn";
/**
 * Enum for representing the languages supported by the parser
 */
declare const ParserLanguages: {
    readonly AF: "af";
    readonly AZ: "az";
    readonly BS: "bs";
    readonly CS: "cs";
    readonly CY: "cy";
    readonly DA: "da";
    readonly DE: "de";
    readonly EN: "en";
    readonly ES: "es";
    readonly ET: "et";
    readonly FR: "fr";
    readonly GA: "ga";
    readonly HR: "hr";
    readonly HU: "hu";
    readonly ID: "id";
    readonly IS: "is";
    readonly IT: "it";
    readonly KU: "ku";
    readonly LA: "la";
    readonly LT: "lt";
    readonly LV: "lv";
    readonly MI: "mi";
    readonly MS: "ms";
    readonly MT: "mt";
    readonly NL: "nl";
    readonly NO: "no";
    readonly OC: "oc";
    readonly PI: "pi";
    readonly PL: "pl";
    readonly PT: "pt";
    readonly RO: "ro";
    readonly RS_LATIN: "rs_latin";
    readonly SK: "sk";
    readonly SL: "sl";
    readonly SQ: "sq";
    readonly SV: "sv";
    readonly SW: "sw";
    readonly TL: "tl";
    readonly TR: "tr";
    readonly UZ: "uz";
    readonly VI: "vi";
    readonly AR: "ar";
    readonly FA: "fa";
    readonly UG: "ug";
    readonly UR: "ur";
    readonly BN: "bn";
    readonly AS: "as";
    readonly MNI: "mni";
    readonly RU: "ru";
    readonly RS_CYRILLIC: "rs_cyrillic";
    readonly BE: "be";
    readonly BG: "bg";
    readonly UK: "uk";
    readonly MN: "mn";
    readonly ABQ: "abq";
    readonly ADY: "ady";
    readonly KBD: "kbd";
    readonly AVA: "ava";
    readonly DAR: "dar";
    readonly INH: "inh";
    readonly CHE: "che";
    readonly LBE: "lbe";
    readonly LEZ: "lez";
    readonly TAB: "tab";
    readonly TJK: "tjk";
    readonly HI: "hi";
    readonly MR: "mr";
    readonly NE: "ne";
    readonly BH: "bh";
    readonly MAI: "mai";
    readonly ANG: "ang";
    readonly BHO: "bho";
    readonly MAH: "mah";
    readonly SCK: "sck";
    readonly NEW: "new";
    readonly GOM: "gom";
    readonly SA: "sa";
    readonly BGC: "bgc";
    readonly TH: "th";
    readonly CH_SIM: "ch_sim";
    readonly CH_TRA: "ch_tra";
    readonly JA: "ja";
    readonly KO: "ko";
    readonly TA: "ta";
    readonly TE: "te";
    readonly KN: "kn";
};
type ParsingHistoryItem = {
    user_id: string;
    day: string;
    job_id: string;
    file_name: string;
    original_file_name: string;
    expired?: boolean;
    pages?: number | null;
    images?: number | null;
    time?: number | null;
};
type ParsingJob = {
    id: string;
    status: StatusEnum;
    error_code?: string | null;
    error_message?: string | null;
};
type ParsingJobJsonResult = {
    /**
     * The json result of the parsing job
     */
    pages: unknown;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobMarkdownResult = {
    /**
     * The markdown result of the parsing job
     */
    markdown: string;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobStructuredResult = {
    /**
     * The json result of the structured parsing job
     */
    structured: unknown;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobTextResult = {
    /**
     * The text result of the parsing job
     */
    text: string;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
/**
 * Enum for representing the mode of parsing to be used
 */
type ParsingMode = "parse_page_without_llm" | "parse_page_with_llm" | "parse_page_with_lvm" | "parse_page_with_agent" | "parse_page_with_layout_agent" | "parse_document_with_llm" | "parse_document_with_lvm" | "parse_document_with_agent";
/**
 * Enum for representing the mode of parsing to be used
 */
declare const ParsingMode: {
    readonly PARSE_PAGE_WITHOUT_LLM: "parse_page_without_llm";
    readonly PARSE_PAGE_WITH_LLM: "parse_page_with_llm";
    readonly PARSE_PAGE_WITH_LVM: "parse_page_with_lvm";
    readonly PARSE_PAGE_WITH_AGENT: "parse_page_with_agent";
    readonly PARSE_PAGE_WITH_LAYOUT_AGENT: "parse_page_with_layout_agent";
    readonly PARSE_DOCUMENT_WITH_LLM: "parse_document_with_llm";
    readonly PARSE_DOCUMENT_WITH_LVM: "parse_document_with_lvm";
    readonly PARSE_DOCUMENT_WITH_AGENT: "parse_document_with_agent";
};
/**
 * Enum for dataset partition names.
 */
type PartitionNames = "data_source_id_partition" | "pipeline_id_partition" | "eval_dataset_id_partition" | "file_id_partition" | "pipeline_file_id_partition" | "file_parsing_id_partition" | "extraction_schema_id_partition";
/**
 * Enum for dataset partition names.
 */
declare const PartitionNames: {
    readonly DATA_SOURCE_ID_PARTITION: "data_source_id_partition";
    readonly PIPELINE_ID_PARTITION: "pipeline_id_partition";
    readonly EVAL_DATASET_ID_PARTITION: "eval_dataset_id_partition";
    readonly FILE_ID_PARTITION: "file_id_partition";
    readonly PIPELINE_FILE_ID_PARTITION: "pipeline_file_id_partition";
    readonly FILE_PARSING_ID_PARTITION: "file_parsing_id_partition";
    readonly EXTRACTION_SCHEMA_ID_PARTITION: "extraction_schema_id_partition";
};
/**
 * Schema for a permission.
 */
type Permission = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the permission.
     */
    name: string;
    /**
     * A description for the permission.
     */
    description: string | null;
    /**
     * Whether the permission is granted or not.
     */
    access: boolean;
};
/**
 * Schema for a pipeline.
 */
type PipelineReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    project_id: string;
    /**
     * The ID of the EmbeddingModelConfig this pipeline is using.
     */
    embedding_model_config_id?: string | null;
    /**
     * The embedding model configuration for this pipeline.
     */
    embedding_model_config?: EmbeddingModelConfig | null;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
    embedding_config: ({
        type: "MANAGED_OPENAI_EMBEDDING";
    } & ManagedOpenAiEmbeddingConfig) | ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: PipelineConfigurationHashes | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * The data sink for the pipeline. If None, the pipeline will use the fully managed data sink.
     */
    data_sink?: DataSinkReadable | null;
    /**
     * Status of the pipeline.
     */
    status?: ("CREATED" | "DELETING") | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
};
/**
 * Schema for a pipeline.
 */
type PipelineWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    project_id: string;
    /**
     * The ID of the EmbeddingModelConfig this pipeline is using.
     */
    embedding_model_config_id?: string | null;
    /**
     * The embedding model configuration for this pipeline.
     */
    embedding_model_config?: EmbeddingModelConfig | null;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
    embedding_config: ({
        type: "MANAGED_OPENAI_EMBEDDING";
    } & ManagedOpenAiEmbeddingConfig) | ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: PipelineConfigurationHashes | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * The data sink for the pipeline. If None, the pipeline will use the fully managed data sink.
     */
    data_sink?: DataSinkWritable | null;
    /**
     * Status of the pipeline.
     */
    status?: ("CREATED" | "DELETING") | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
};
/**
 * Hashes for the configuration of a pipeline.
 */
type PipelineConfigurationHashes = {
    /**
     * Hash of the embedding config.
     */
    embedding_config_hash?: string | null;
    /**
     * Hash of the llama parse parameters.
     */
    parsing_config_hash?: string | null;
    /**
     * Hash of the transform config.
     */
    transform_config_hash?: string | null;
};
/**
 * Schema for creating a pipeline.
 */
type PipelineCreateReadable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateReadable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    llama_parse_parameters?: LlamaParseParameters;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name: string;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for creating a pipeline.
 */
type PipelineCreateWritable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateWritable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    llama_parse_parameters?: LlamaParseParameters;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name: string;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for a data source in a pipeline.
 */
type PipelineDataSourceReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudJiraDataSourceV2Readable | CloudBoxDataSourceReadable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: DataSourceReaderVersionMetadata | null;
    project_id: string;
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The ID of the pipeline.
     */
    pipeline_id: string;
    /**
     * The last time the data source was automatically synced.
     */
    last_synced_at: string;
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
    /**
     * The id of the user who set the sync schedule.
     */
    sync_schedule_set_by?: string | null;
    /**
     * The status of the data source in the pipeline.
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated.
     */
    status_updated_at?: string | null;
};
/**
 * Schema for a data source in a pipeline.
 */
type PipelineDataSourceWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudJiraDataSourceV2Writable | CloudBoxDataSourceWritable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: DataSourceReaderVersionMetadata | null;
    project_id: string;
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The ID of the pipeline.
     */
    pipeline_id: string;
    /**
     * The last time the data source was automatically synced.
     */
    last_synced_at: string;
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
    /**
     * The id of the user who set the sync schedule.
     */
    sync_schedule_set_by?: string | null;
    /**
     * The status of the data source in the pipeline.
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated.
     */
    status_updated_at?: string | null;
};
/**
 * Schema for creating an association between a data source and a pipeline.
 */
type PipelineDataSourceCreate = {
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The interval at which the data source should be synced. Valid values are: 21600, 43200, 86400
     */
    sync_interval?: number | null;
};
/**
 * Schema for updating an association between a data source and a pipeline.
 */
type PipelineDataSourceUpdate = {
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
};
type PipelineDeployment = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Status of the pipeline deployment.
     */
    status: ManagedIngestionStatus;
    /**
     * Time the pipeline deployment started.
     */
    started_at?: string | null;
    /**
     * Time the pipeline deployment finished.
     */
    ended_at?: string | null;
};
/**
 * Schema for a file that is associated with a pipeline.
 */
type PipelineFile = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Name of the file
     */
    name?: string | null;
    /**
     * The ID of the file in the external system
     */
    external_file_id?: string | null;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * File type (e.g. pdf, docx, etc.)
     */
    file_type?: string | null;
    /**
     * The ID of the project that the file belongs to
     */
    project_id?: string | null;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * The ID of the file
     */
    file_id?: string | null;
    /**
     * The ID of the pipeline that the file is associated with
     */
    pipeline_id: string;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The number of pages that have been indexed for this file
     */
    indexed_page_count?: number | null;
    /**
     * Status of the pipeline file
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated
     */
    status_updated_at?: string | null;
};
/**
 * Schema for creating a file that is associated with a pipeline.
 */
type PipelineFileCreate = {
    /**
     * The ID of the file
     */
    file_id: string;
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
/**
 * Schema for updating a file that is associated with a pipeline.
 */
type PipelineFileUpdate = {
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
/**
 * Schema for the parameters of a load files job.
 */
type PipelineFileUpdateDispatcherConfig = {
    type?: "pipeline_file_update_dispatcher";
    /**
     * The IDs for the files this execution ran against.
     */
    pipeline_file_ids?: Array<string> | null;
    /**
     * Whether to delete the files
     */
    should_delete?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
/**
 * Schema for the parameters of a load files job.
 */
type PipelineFileUpdaterConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "pipeline_file_updater";
    /**
     * Whether to delete the files
     */
    should_delete?: boolean | null;
    /**
     * Whether to parse the files
     */
    should_parse?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
    /**
     * Whether the file is new
     */
    is_new_file?: boolean;
    /**
     * Whether the data source project file has changed
     */
    data_source_project_file_changed?: boolean;
};
/**
 * Schema for the parameters of a managed pipeline ingestion job.
 */
type PipelineManagedIngestionJobParams = {
    type?: "pipeline_managed_ingestion";
    /**
     * Whether to delete the data sources from the pipeline
     */
    should_delete?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
type PipelineMetadataConfig = {
    /**
     * List of metadata keys to exclude from embeddings
     */
    excluded_embed_metadata_keys?: Array<string>;
    /**
     * List of metadata keys to exclude from LLM during retrieval
     */
    excluded_llm_metadata_keys?: Array<string>;
};
/**
 * Enum for representing the type of a pipeline
 */
type PipelineType = "PLAYGROUND" | "MANAGED";
/**
 * Enum for representing the type of a pipeline
 */
declare const PipelineType: {
    readonly PLAYGROUND: "PLAYGROUND";
    readonly MANAGED: "MANAGED";
};
/**
 * Schema for updating a pipeline.
 */
type PipelineUpdateReadable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateReadable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams | null;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams | null;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     * @deprecated
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name?: string | null;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for updating a pipeline.
 */
type PipelineUpdateWritable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Configuration for the sparse model used in hybrid search.
     */
    sparse_model_config?: SparseModelConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateWritable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams | null;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams | null;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     * @deprecated
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name?: string | null;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
type PlanLimits = {
    /**
     * Whether usage is allowed after credit grants are exhausted
     */
    allow_pay_as_you_go: boolean;
    subscription_cost_usd: number;
    max_monthly_invoice_total_usd: number | null;
    /**
     * The amount of USD cents at which a soft alert should be triggered
     */
    spending_soft_alerts_usd_cents?: Array<number> | null;
    max_concurrent_parse_jobs_premium: number | null;
    max_concurrent_parse_jobs_other: number | null;
    max_extraction_agents: number | null;
    max_extraction_runs: number | null;
    max_extraction_jobs: number | null;
    max_pages_per_index: number | null;
    max_files_per_index: number | null;
    max_indexes: number | null;
    max_concurrent_index_jobs: number | null;
    max_data_sources: number | null;
    max_embedding_models: number | null;
    max_data_sinks: number | null;
    max_published_agents: number | null;
    max_report_agent_sessions: number | null;
    max_users: number | null;
    max_organizations: number | null;
    max_projects: number | null;
    mfa_enabled: boolean;
    sso_enabled: boolean;
};
/**
 * A playground session for a user.
 */
type PlaygroundSession = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    pipeline_id: string;
    user_id: string;
    llm_params_id: string;
    /**
     * LLM parameters last used in this session.
     */
    llm_params?: LlmParameters;
    retrieval_params_id: string;
    /**
     * Preset retrieval parameters last used in this session.
     */
    retrieval_params?: PresetRetrievalParams;
    /**
     * Chat message history for this session.
     */
    chat_messages?: Array<ChatMessage>;
};
/**
 * Enum of possible pooling choices with pooling behaviors.
 */
type Pooling = "cls" | "mean" | "last";
/**
 * Enum of possible pooling choices with pooling behaviors.
 */
declare const Pooling: {
    readonly CLS: "cls";
    readonly MEAN: "mean";
    readonly LAST: "last";
};
type PresetCompositeRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
};
/**
 * Schema for the search params for an retrieval execution that can be preset for a pipeline.
 */
type PresetRetrievalParams = {
    /**
     * Number of nodes for dense retrieval.
     */
    dense_similarity_top_k?: number | null;
    /**
     * Minimum similarity score wrt query for retrieval
     */
    dense_similarity_cutoff?: number | null;
    /**
     * Number of nodes for sparse retrieval.
     */
    sparse_similarity_top_k?: number | null;
    /**
     * Enable reranking for retrieval
     */
    enable_reranking?: boolean | null;
    /**
     * Number of reranked nodes for returning.
     */
    rerank_top_n?: number | null;
    /**
     * Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.
     */
    alpha?: number | null;
    /**
     * Search filters for retrieval.
     */
    search_filters?: MetadataFilters | null;
    /**
     * JSON Schema that will be used to infer search_filters. Omit or leave as null to skip inference.
     */
    search_filters_inference_schema?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).
     */
    files_top_k?: number | null;
    /**
     * The retrieval mode for the query.
     */
    retrieval_mode?: RetrievalMode;
    /**
     * Whether to retrieve image nodes.
     * @deprecated
     */
    retrieve_image_nodes?: boolean;
    /**
     * Whether to retrieve page screenshot nodes.
     */
    retrieve_page_screenshot_nodes?: boolean;
    /**
     * Whether to retrieve page figure nodes.
     */
    retrieve_page_figure_nodes?: boolean;
    class_name?: string;
};
/**
 * Schema for a presigned URL.
 */
type PresignedUrl = {
    /**
     * A presigned URL for IO operations against a private file
     */
    url: string;
    /**
     * The time at which the presigned URL expires
     */
    expires_at: string;
    /**
     * Form fields for a presigned POST request
     */
    form_fields?: {
        [key: string]: string;
    } | null;
};
/**
 * Schema for a project.
 */
type Project = {
    name: string;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    ad_hoc_eval_dataset_id?: string | null;
    /**
     * The Organization ID the project is under.
     */
    organization_id: string;
    /**
     * Whether this project is the default project for the user.
     */
    is_default?: boolean;
};
/**
 * Schema for creating a project.
 */
type ProjectCreate = {
    name: string;
};
/**
 * Schema for updating a project.
 */
type ProjectUpdate = {
    name: string;
};
type PublicModelName = "openai-gpt-4o" | "openai-gpt-4o-mini" | "openai-gpt-4-1" | "openai-gpt-4-1-mini" | "openai-gpt-4-1-nano" | "openai-gpt-5" | "openai-gpt-5-mini" | "openai-gpt-5-nano" | "openai-text-embedding-3-small" | "openai-text-embedding-3-large" | "openai-whisper-1" | "anthropic-sonnet-3.5" | "anthropic-sonnet-3.5-v2" | "anthropic-sonnet-3.7" | "anthropic-sonnet-4.0" | "gemini-2.5-flash" | "gemini-2.5-pro" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-flash-lite" | "gemini-1.5-flash" | "gemini-1.5-pro";
declare const PublicModelName: {
    readonly OPENAI_GPT_4O: "openai-gpt-4o";
    readonly OPENAI_GPT_4O_MINI: "openai-gpt-4o-mini";
    readonly OPENAI_GPT_4_1: "openai-gpt-4-1";
    readonly OPENAI_GPT_4_1_MINI: "openai-gpt-4-1-mini";
    readonly OPENAI_GPT_4_1_NANO: "openai-gpt-4-1-nano";
    readonly OPENAI_GPT_5: "openai-gpt-5";
    readonly OPENAI_GPT_5_MINI: "openai-gpt-5-mini";
    readonly OPENAI_GPT_5_NANO: "openai-gpt-5-nano";
    readonly OPENAI_TEXT_EMBEDDING_3_SMALL: "openai-text-embedding-3-small";
    readonly OPENAI_TEXT_EMBEDDING_3_LARGE: "openai-text-embedding-3-large";
    readonly OPENAI_WHISPER_1: "openai-whisper-1";
    readonly ANTHROPIC_SONNET_3_5: "anthropic-sonnet-3.5";
    readonly ANTHROPIC_SONNET_3_5_V2: "anthropic-sonnet-3.5-v2";
    readonly ANTHROPIC_SONNET_3_7: "anthropic-sonnet-3.7";
    readonly ANTHROPIC_SONNET_4_0: "anthropic-sonnet-4.0";
    readonly GEMINI_2_5_FLASH: "gemini-2.5-flash";
    readonly GEMINI_2_5_PRO: "gemini-2.5-pro";
    readonly GEMINI_2_0_FLASH: "gemini-2.0-flash";
    readonly GEMINI_2_0_FLASH_LITE: "gemini-2.0-flash-lite";
    readonly GEMINI_2_5_FLASH_LITE: "gemini-2.5-flash-lite";
    readonly GEMINI_1_5_FLASH: "gemini-1.5-flash";
    readonly GEMINI_1_5_PRO: "gemini-1.5-pro";
};
/**
 * Full quota configuration model.
 */
type QuotaConfiguration = {
    /**
     * The source type, e.g. 'organization'
     */
    source_type: "organization";
    /**
     * The source ID, e.g. the organization ID
     */
    source_id: string;
    /**
     * The quota configuration type
     */
    configuration_type: "rate_limit_parse_concurrent_premium" | "rate_limit_parse_concurrent_default" | "rate_limit_concurrent_jobs_in_execution_default" | "rate_limit_concurrent_jobs_in_execution_doc_ingest" | "limit_embedding_character";
    /**
     * The quota configuration value
     */
    configuration_value: QuotaRateLimitConfigurationValue;
    /**
     * The configuration metadata
     */
    configuration_metadata: {
        [key: string]: unknown;
    } | null;
    /**
     * The start date of the quota
     */
    started_at?: string;
    /**
     * The end date of the quota
     */
    ended_at?: string | null;
    /**
     * The idempotency key
     */
    idempotency_key?: string | null;
    /**
     * The status of the quota, i.e. 'ACTIVE' or 'INACTIVE'
     */
    status: "ACTIVE" | "INACTIVE";
    /**
     * The system-generated UUID for the quota
     */
    id?: string | null;
    /**
     * The creation date of the quota configuration in the database
     */
    created_at?: string | null;
    /**
     * The last updated date of the quota configuration in the database
     */
    updated_at?: string | null;
};
/**
 * Quota-specific wrapper for default rate limit configuration.
 */
type QuotaRateLimitConfigurationValue = {
    /**
     * The rate numerator
     */
    numerator: number;
    /**
     * The rate limit denominator
     */
    denominator?: number | null;
    /**
     * The default rate limit denominator units
     */
    denominator_units?: ("second" | "minute" | "hour" | "day") | null;
};
type ReRankConfig = {
    /**
     * The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     */
    top_n?: number;
    /**
     * The type of reranker to use.
     */
    type?: ReRankerType;
};
/**
 * Enum for the reranker type.
 */
type ReRankerType = "system_default" | "llm" | "cohere" | "bedrock" | "score" | "disabled";
/**
 * Enum for the reranker type.
 */
declare const ReRankerType: {
    readonly SYSTEM_DEFAULT: "system_default";
    readonly LLM: "llm";
    readonly COHERE: "cohere";
    readonly BEDROCK: "bedrock";
    readonly SCORE: "score";
    readonly DISABLED: "disabled";
};
type RecurringCreditGrant = {
    name: string;
    credit_amount: number;
    credit_type: CreditType;
    /**
     * The ID of the product in Metronome used to represent the credit grant
     */
    product_id: string;
    priority: number;
    /**
     * The fraction of the credit that will roll over to the next period, between 0 and 1
     */
    rollover_fraction: number;
    /**
     * How many billing periods the credit grant will last for
     */
    periods_duration?: number;
};
type RelatedNodeInfo = {
    node_id: string;
    node_type?: ObjectType | string | null;
    metadata?: {
        [key: string]: unknown;
    };
    hash?: string | null;
    class_name?: string;
};
type Restrict = {
    /**
     * The project ID to restrict the user to.
     */
    project_id: string | null;
};
type RetrievalMode = "chunks" | "files_via_metadata" | "files_via_content" | "auto_routed";
declare const RetrievalMode: {
    readonly CHUNKS: "chunks";
    readonly FILES_VIA_METADATA: "files_via_metadata";
    readonly FILES_VIA_CONTENT: "files_via_content";
    readonly AUTO_ROUTED: "auto_routed";
};
/**
 * Schema for the search params for an retrieval execution.
 */
type RetrievalParams = {
    /**
     * Number of nodes for dense retrieval.
     */
    dense_similarity_top_k?: number | null;
    /**
     * Minimum similarity score wrt query for retrieval
     */
    dense_similarity_cutoff?: number | null;
    /**
     * Number of nodes for sparse retrieval.
     */
    sparse_similarity_top_k?: number | null;
    /**
     * Enable reranking for retrieval
     */
    enable_reranking?: boolean | null;
    /**
     * Number of reranked nodes for returning.
     */
    rerank_top_n?: number | null;
    /**
     * Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.
     */
    alpha?: number | null;
    /**
     * Search filters for retrieval.
     */
    search_filters?: MetadataFilters | null;
    /**
     * JSON Schema that will be used to infer search_filters. Omit or leave as null to skip inference.
     */
    search_filters_inference_schema?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).
     */
    files_top_k?: number | null;
    /**
     * The retrieval mode for the query.
     */
    retrieval_mode?: RetrievalMode;
    /**
     * Whether to retrieve image nodes.
     * @deprecated
     */
    retrieve_image_nodes?: boolean;
    /**
     * Whether to retrieve page screenshot nodes.
     */
    retrieve_page_screenshot_nodes?: boolean;
    /**
     * Whether to retrieve page figure nodes.
     */
    retrieve_page_figure_nodes?: boolean;
    /**
     * The query to retrieve against.
     */
    query: string;
    class_name?: string;
};
/**
 * Schema for the result of an retrieval execution.
 */
type RetrieveResults = {
    /**
     * The ID of the pipeline that the query was retrieved against.
     */
    pipeline_id: string;
    /**
     * The nodes retrieved by the pipeline for the given query.
     */
    retrieval_nodes: Array<TextNodeWithScore>;
    /**
     * The image nodes retrieved by the pipeline for the given query. Deprecated - will soon be replaced with 'page_screenshot_nodes'.
     * @deprecated
     */
    image_nodes?: Array<PageScreenshotNodeWithScore>;
    /**
     * The page figure nodes retrieved by the pipeline for the given query.
     */
    page_figure_nodes?: Array<PageFigureNodeWithScore>;
    /**
     * The end-to-end latency for retrieval and reranking.
     */
    retrieval_latency?: {
        [key: string]: number;
    };
    /**
     * Metadata associated with the retrieval execution
     */
    metadata?: {
        [key: string]: string;
    };
    /**
     * The inferred search filters for the query.
     */
    inferred_search_filters?: MetadataFilters | null;
    class_name?: string;
};
/**
 * An entity that retrieves context nodes from several sub RetrieverTools.
 */
type Retriever = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string;
    /**
     * The pipelines this retriever uses.
     */
    pipelines?: Array<RetrieverPipeline>;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The ID of the project this retriever resides in.
     */
    project_id: string;
};
type RetrieverCreate = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string;
    /**
     * The pipelines this retriever uses.
     */
    pipelines?: Array<RetrieverPipeline>;
};
type RetrieverPipeline = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string | null;
    /**
     * A description of the retriever tool.
     */
    description: string | null;
    /**
     * The ID of the pipeline this tool uses.
     */
    pipeline_id: string;
    /**
     * Parameters for retrieval configuration.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
};
type RetrieverUpdate = {
    /**
     * A name for the retriever.
     */
    name?: string | null;
    /**
     * The pipelines this retriever uses.
     */
    pipelines: Array<RetrieverPipeline> | null;
};
/**
 * Schema for a role.
 */
type Role = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the role.
     */
    name: string;
    /**
     * The actual permissions of the role.
     */
    permissions: Array<Permission>;
};
/**
 * API request body for searching agent data
 */
type SearchRequest = {
    /**
     * The maximum number of items to return. The service may return fewer than this value. If unspecified, a default page size will be used. The maximum value is typically 1000; values above this will be coerced to the maximum.
     */
    page_size?: number | null;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    page_token?: string | null;
    /**
     * A filter object or expression that filters resources listed in the response.
     */
    filter?: {
        [key: string]: FilterOperation;
    } | null;
    /**
     * A comma-separated list of fields to order by, sorted in ascending order. Use 'field_name desc' to specify descending order.
     */
    order_by?: string | null;
    /**
     * The agent deployment's name to search within
     */
    deployment_name: string;
    /**
     * The logical agent data collection to search within
     */
    collection?: string;
    /**
     * Whether to include the total number of items in the response
     */
    include_total?: boolean;
    /**
     * The offset to start from. If not provided, the first page is returned
     */
    offset?: number | null;
};
type SemanticChunkingConfig = {
    mode?: "semantic";
    buffer_size?: number;
    breakpoint_percentile_threshold?: number;
};
type SentenceChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "sentence";
    separator?: string;
    paragraph_separator?: string;
};
/**
 * Configuration for sparse embedding models used in hybrid search.
 *
 * This allows users to choose between Splade and BM25 models for
 * sparse retrieval in managed data sinks.
 */
type SparseModelConfig = {
    /**
     * The sparse model type to use. 'auto' selects based on deployment mode (BYOC uses term frequency, Cloud uses Splade), 'splade' uses HuggingFace Splade model, 'bm25' uses Qdrant's FastEmbed BM25 model.
     */
    model_type?: SparseModelType;
    class_name?: string;
};
/**
 * Enum for sparse model types supported in LlamaCloud.
 *
 * SPLADE: Uses HuggingFace Splade model for sparse embeddings
 * BM25: Uses Qdrant's FastEmbed BM25 model for sparse embeddings
 * AUTO: Automatically selects based on deployment mode (BYOC uses term frequency, Cloud uses Splade)
 */
type SparseModelType = "splade" | "bm25" | "auto";
/**
 * Enum for sparse model types supported in LlamaCloud.
 *
 * SPLADE: Uses HuggingFace Splade model for sparse embeddings
 * BM25: Uses Qdrant's FastEmbed BM25 model for sparse embeddings
 * AUTO: Automatically selects based on deployment mode (BYOC uses term frequency, Cloud uses Splade)
 */
declare const SparseModelType: {
    readonly SPLADE: "splade";
    readonly BM25: "bm25";
    readonly AUTO: "auto";
};
/**
 * A spreadsheet parsing job
 */
type SpreadsheetJob = {
    /**
     * The ID of the job
     */
    id: string;
    /**
     * The ID of the user
     */
    user_id: string;
    /**
     * The ID of the project
     */
    project_id: string;
    /**
     * The ID of the file to parse
     */
    file_id: string;
    /**
     * Configuration for the parsing job
     */
    config: SpreadsheetParsingConfig;
    /**
     * The status of the parsing job
     */
    status: StatusEnum;
    /**
     * When the job was created
     */
    created_at: string;
    /**
     * When the job was last updated
     */
    updated_at: string;
    /**
     * Whether the job completed successfully
     */
    success?: boolean | null;
    /**
     * All extracted tables (populated when job is complete)
     */
    tables?: Array<ExtractedTable>;
    /**
     * Any errors encountered
     */
    errors?: Array<string>;
};
/**
 * Request to create a spreadsheet parsing job
 */
type SpreadsheetJobCreate = {
    /**
     * The ID of the file to parse
     */
    file_id: string;
    /**
     * Configuration for the parsing job
     */
    config?: SpreadsheetParsingConfig;
};
/**
 * Configuration for spreadsheet parsing
 */
type SpreadsheetParsingConfig = {
    /**
     * The names of the sheets to parse. If empty, all sheets will be parsed.
     */
    sheet_names?: Array<string> | null;
};
/**
 * Enum for representing the status of a job
 */
type StatusEnum = "PENDING" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Enum for representing the status of a job
 */
declare const StatusEnum: {
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};
/**
 * Response Schema for a supported eval LLM model.
 */
type SupportedLlmModel = {
    /**
     * The name of the supported LLM model.
     */
    name: string;
    /**
     * Whether the LLM model is enabled for use in LlamaCloud.
     */
    enabled?: boolean;
    /**
     * The details of the supported LLM model.
     */
    details: LlmModelData;
};
type SupportedLlmModelNames = "GPT_4O" | "GPT_4O_MINI" | "GPT_4_1" | "GPT_4_1_NANO" | "GPT_4_1_MINI" | "AZURE_OPENAI_GPT_4O" | "AZURE_OPENAI_GPT_4O_MINI" | "AZURE_OPENAI_GPT_4_1" | "AZURE_OPENAI_GPT_4_1_MINI" | "AZURE_OPENAI_GPT_4_1_NANO" | "CLAUDE_3_5_SONNET" | "BEDROCK_CLAUDE_3_5_SONNET_V1" | "BEDROCK_CLAUDE_3_5_SONNET_V2" | "VERTEX_AI_CLAUDE_3_5_SONNET_V2";
declare const SupportedLlmModelNames: {
    readonly GPT_4O: "GPT_4O";
    readonly GPT_4O_MINI: "GPT_4O_MINI";
    readonly GPT_4_1: "GPT_4_1";
    readonly GPT_4_1_NANO: "GPT_4_1_NANO";
    readonly GPT_4_1_MINI: "GPT_4_1_MINI";
    readonly AZURE_OPENAI_GPT_4O: "AZURE_OPENAI_GPT_4O";
    readonly AZURE_OPENAI_GPT_4O_MINI: "AZURE_OPENAI_GPT_4O_MINI";
    readonly AZURE_OPENAI_GPT_4_1: "AZURE_OPENAI_GPT_4_1";
    readonly AZURE_OPENAI_GPT_4_1_MINI: "AZURE_OPENAI_GPT_4_1_MINI";
    readonly AZURE_OPENAI_GPT_4_1_NANO: "AZURE_OPENAI_GPT_4_1_NANO";
    readonly CLAUDE_3_5_SONNET: "CLAUDE_3_5_SONNET";
    readonly BEDROCK_CLAUDE_3_5_SONNET_V1: "BEDROCK_CLAUDE_3_5_SONNET_V1";
    readonly BEDROCK_CLAUDE_3_5_SONNET_V2: "BEDROCK_CLAUDE_3_5_SONNET_V2";
    readonly VERTEX_AI_CLAUDE_3_5_SONNET_V2: "VERTEX_AI_CLAUDE_3_5_SONNET_V2";
};
/**
 * Provided for backward compatibility.
 *
 * Note: we keep the field with the typo "seperator" to maintain backward compatibility for
 * serialized objects.
 */
type TextNode = {
    /**
     * Unique ID of the node.
     */
    id_?: string;
    /**
     * Embedding of the node.
     */
    embedding?: Array<number> | null;
    /**
     * A flat dictionary of metadata fields
     */
    extra_info?: {
        [key: string]: unknown;
    };
    /**
     * Metadata keys that are excluded from text for the embed model.
     */
    excluded_embed_metadata_keys?: Array<string>;
    /**
     * Metadata keys that are excluded from text for the LLM.
     */
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * A mapping of relationships to other node information.
     */
    relationships?: {
        [key: string]: RelatedNodeInfo | Array<RelatedNodeInfo>;
    };
    /**
     * Template for how metadata is formatted, with {key} and {value} placeholders.
     */
    metadata_template?: string;
    /**
     * Separator between metadata fields when converting to string.
     */
    metadata_seperator?: string;
    /**
     * Text content of the node.
     */
    text?: string;
    /**
     * MIME type of the node content.
     */
    mimetype?: string;
    /**
     * Start char index of the node.
     */
    start_char_idx?: number | null;
    /**
     * End char index of the node.
     */
    end_char_idx?: number | null;
    /**
     * Template for how text is formatted, with {content} and {metadata_str} placeholders.
     */
    text_template?: string;
    class_name?: string;
};
/**
 * Same as NodeWithScore but type for node is a TextNode instead of BaseNode.
 * FastAPI doesn't accept abstract classes like BaseNode.
 */
type TextNodeWithScore = {
    node: TextNode;
    score?: number | null;
    class_name?: string;
};
type TokenChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "token";
    separator?: string;
};
type UsageAndPlan = {
    plan: BasePlan;
    usage: UsageResponse;
};
type UsageMetricResponse = {
    feature_usage: {
        [key: string]: unknown;
    };
    day: string;
    source: string;
    job_id: string;
};
/**
 * Response model
 */
type UsageResponse = {
    active_free_credits_usage?: Array<FreeCreditsUsage>;
    total_users?: number;
    total_indexes?: number;
    total_indexed_pages?: number;
    active_alerts?: Array<"plan_spend_limit_exceeded" | "plan_spend_limit_soft_alert" | "configured_spend_limit_exceeded" | "free_credits_exhausted" | "internal_spending_alert" | "has_spending_alert">;
    current_invoice_total_usd_cents?: number | null;
    total_extraction_agents?: number;
};
type User = {
    id: string;
    email: string;
    /**
     * The last login provider.
     */
    last_login_provider?: "oidc" | "basic" | "no_auth";
    /**
     * The user's name.
     */
    name?: string | null;
    /**
     * The user's first name.
     */
    first_name?: string | null;
    /**
     * The user's last name.
     */
    last_name?: string | null;
    /**
     * The user's custom claims.
     */
    claims?: CustomClaims;
    /**
     * The restrictions on the user.
     */
    restrict?: Restrict | null;
    /**
     * The user's creation date.
     */
    created_at?: string | null;
};
type UserJobRecord = {
    /**
     * The user id from who triggered the job
     */
    id: string;
    /**
     * The name of the user
     */
    name: string;
};
/**
 * Schema for a user's membership to an organization.
 */
type UserOrganization = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The user's email address.
     */
    email?: string | null;
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * Whether the user's membership is pending account signup.
     */
    pending?: boolean;
    /**
     * The user ID of the user who added the user to the organization.
     */
    invited_by_user_id?: string | null;
    /**
     * The email address of the user who added the user to the organization.
     */
    invited_by_user_email?: string | null;
    /**
     * The roles of the user in the organization.
     */
    roles: Array<UserOrganizationRole>;
};
/**
 * Schema for creating a user's membership to an organization.
 */
type UserOrganizationCreate = {
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The user's email address.
     */
    email?: string | null;
    /**
     * The project IDs to add the user to.
     */
    project_ids: Array<string> | null;
    /**
     * The role ID to assign to the user.
     */
    role_id?: string | null;
};
/**
 * Schema for deleting a user's membership to an organization.
 */
type UserOrganizationDelete = {
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The user's email address.
     */
    email?: string | null;
    /**
     * The project ids
     */
    project_id_list?: Array<string> | null;
};
/**
 * Schema for a user's role in an organization.
 */
type UserOrganizationRole = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The user's ID.
     */
    user_id: string;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * The project ID scope.
     */
    project_ids?: Array<string> | null;
    /**
     * The role.
     */
    role: Role;
};
/**
 * Schema for creating a user's role in an organization.
 */
type UserOrganizationRoleCreate = {
    /**
     * The user's ID.
     */
    user_id: string;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * The role's ID.
     */
    role_id: string;
};
type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};
type VertexAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "VERTEXAI_EMBEDDING";
    /**
     * Configuration for the VertexAI embedding model.
     */
    component?: VertexTextEmbedding;
};
/**
 * Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode
 * since importing llama_index.embeddings.vertex.base incurs a lot of memory usage.
 */
type VertexEmbeddingMode = "default" | "classification" | "clustering" | "similarity" | "retrieval";
/**
 * Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode
 * since importing llama_index.embeddings.vertex.base incurs a lot of memory usage.
 */
declare const VertexEmbeddingMode: {
    readonly DEFAULT: "default";
    readonly CLASSIFICATION: "classification";
    readonly CLUSTERING: "clustering";
    readonly SIMILARITY: "similarity";
    readonly RETRIEVAL: "retrieval";
};
type VertexTextEmbedding = {
    /**
     * The modelId of the VertexAI model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The default location to use when making API calls.
     */
    location: string;
    /**
     * The default GCP project to use when making Vertex API calls.
     */
    project: string;
    /**
     * The embedding mode to use.
     */
    embed_mode?: VertexEmbeddingMode;
    /**
     * Additional kwargs for the Vertex.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The client email for the VertexAI credentials.
     */
    client_email: string | null;
    /**
     * The token URI for the VertexAI credentials.
     */
    token_uri: string | null;
    /**
     * The private key ID for the VertexAI credentials.
     */
    private_key_id: string | null;
    /**
     * The private key for the VertexAI credentials.
     */
    private_key: string | null;
    class_name?: string;
};
/**
 * Allows the user to configure webhook options for notifications and callbacks.
 */
type WebhookConfiguration = {
    /**
     * The URL to send webhook notifications to.
     */
    webhook_url?: string | null;
    /**
     * Custom HTTP headers to include with webhook requests.
     */
    webhook_headers?: {
        [key: string]: string;
    } | null;
    /**
     * List of event names to subscribe to
     */
    webhook_events?: Array<"extract.pending" | "extract.success" | "extract.error" | "extract.partial_success" | "extract.cancelled" | "parse.pending" | "parse.success" | "parse.error" | "parse.partial_success" | "parse.cancelled" | "unmapped_event"> | null;
    /**
     * The output format to use for the webhook. Defaults to string if none supplied. Currently supported values: string, json
     */
    webhook_output_format?: string | null;
};
type ListDeploymentsApiV1ProjectsProjectIdAgentsGetData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: "/api/v1/projects/{project_id}/agents";
};
type ListDeploymentsApiV1ProjectsProjectIdAgentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListDeploymentsApiV1ProjectsProjectIdAgentsGetError = ListDeploymentsApiV1ProjectsProjectIdAgentsGetErrors[keyof ListDeploymentsApiV1ProjectsProjectIdAgentsGetErrors];
type ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponses = {
    /**
     * Successful Response
     */
    200: AgentDeploymentList;
};
type ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponse = ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponses[keyof ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponses];
type SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: "/api/v1/projects/{project_id}/agents:sync";
};
type SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostError = SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostErrors[keyof SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostErrors];
type SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponses = {
    /**
     * Successful Response
     */
    200: AgentDeploymentList;
};
type SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponse = SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponses[keyof SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponses];
type ListKeysApiV1ApiKeysGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        key_type?: ApiKeyType;
    };
    url: "/api/v1/api-keys";
};
type ListKeysApiV1ApiKeysGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListKeysApiV1ApiKeysGetError = ListKeysApiV1ApiKeysGetErrors[keyof ListKeysApiV1ApiKeysGetErrors];
type ListKeysApiV1ApiKeysGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ApiKey>;
};
type ListKeysApiV1ApiKeysGetResponse = ListKeysApiV1ApiKeysGetResponses[keyof ListKeysApiV1ApiKeysGetResponses];
type GenerateKeyApiV1ApiKeysPostData = {
    body: ApiKeyCreate;
    path?: never;
    query?: never;
    url: "/api/v1/api-keys";
};
type GenerateKeyApiV1ApiKeysPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GenerateKeyApiV1ApiKeysPostError = GenerateKeyApiV1ApiKeysPostErrors[keyof GenerateKeyApiV1ApiKeysPostErrors];
type GenerateKeyApiV1ApiKeysPostResponses = {
    /**
     * Successful Response
     */
    200: ApiKey;
};
type GenerateKeyApiV1ApiKeysPostResponse = GenerateKeyApiV1ApiKeysPostResponses[keyof GenerateKeyApiV1ApiKeysPostResponses];
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData = {
    body?: never;
    path: {
        api_key_id: string;
    };
    query?: never;
    url: "/api/v1/api-keys/{api_key_id}";
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError = DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors[keyof DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors];
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse = DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses[keyof DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses];
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData = {
    body: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    path?: never;
    query?: {
        pipeline_id?: string | null;
    };
    url: "/api/v1/validate-integrations/validate-embedding-connection";
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError = ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors[keyof ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors];
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse = ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses[keyof ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses];
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        existing_data_source_id?: string | null;
    };
    url: "/api/v1/validate-integrations/validate-data-source-connection";
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError = ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors[keyof ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors];
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse = ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses[keyof ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses];
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: never;
    url: "/api/v1/validate-integrations/validate-data-sink-connection";
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError = ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors[keyof ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors];
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse = ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses[keyof ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses];
type ListDataSinksApiV1DataSinksGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type ListDataSinksApiV1DataSinksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListDataSinksApiV1DataSinksGetError = ListDataSinksApiV1DataSinksGetErrors[keyof ListDataSinksApiV1DataSinksGetErrors];
type ListDataSinksApiV1DataSinksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DataSinkReadable>;
};
type ListDataSinksApiV1DataSinksGetResponse = ListDataSinksApiV1DataSinksGetResponses[keyof ListDataSinksApiV1DataSinksGetResponses];
type CreateDataSinkApiV1DataSinksPostData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type CreateDataSinkApiV1DataSinksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateDataSinkApiV1DataSinksPostError = CreateDataSinkApiV1DataSinksPostErrors[keyof CreateDataSinkApiV1DataSinksPostErrors];
type CreateDataSinkApiV1DataSinksPostResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type CreateDataSinkApiV1DataSinksPostResponse = CreateDataSinkApiV1DataSinksPostResponses[keyof CreateDataSinkApiV1DataSinksPostResponses];
type UpsertDataSinkApiV1DataSinksPutData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type UpsertDataSinkApiV1DataSinksPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertDataSinkApiV1DataSinksPutError = UpsertDataSinkApiV1DataSinksPutErrors[keyof UpsertDataSinkApiV1DataSinksPutErrors];
type UpsertDataSinkApiV1DataSinksPutResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type UpsertDataSinkApiV1DataSinksPutResponse = UpsertDataSinkApiV1DataSinksPutResponses[keyof UpsertDataSinkApiV1DataSinksPutResponses];
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData = {
    body?: never;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError = DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors[keyof DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors];
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse = DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses[keyof DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses];
type GetDataSinkApiV1DataSinksDataSinkIdGetData = {
    body?: never;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type GetDataSinkApiV1DataSinksDataSinkIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDataSinkApiV1DataSinksDataSinkIdGetError = GetDataSinkApiV1DataSinksDataSinkIdGetErrors[keyof GetDataSinkApiV1DataSinksDataSinkIdGetErrors];
type GetDataSinkApiV1DataSinksDataSinkIdGetResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type GetDataSinkApiV1DataSinksDataSinkIdGetResponse = GetDataSinkApiV1DataSinksDataSinkIdGetResponses[keyof GetDataSinkApiV1DataSinksDataSinkIdGetResponses];
type UpdateDataSinkApiV1DataSinksDataSinkIdPutData = {
    body: DataSinkUpdateWritable;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutError = UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors[keyof UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors];
type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse = UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses[keyof UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses];
type ListDataSourcesApiV1DataSourcesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type ListDataSourcesApiV1DataSourcesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListDataSourcesApiV1DataSourcesGetError = ListDataSourcesApiV1DataSourcesGetErrors[keyof ListDataSourcesApiV1DataSourcesGetErrors];
type ListDataSourcesApiV1DataSourcesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DataSourceReadable>;
};
type ListDataSourcesApiV1DataSourcesGetResponse = ListDataSourcesApiV1DataSourcesGetResponses[keyof ListDataSourcesApiV1DataSourcesGetResponses];
type CreateDataSourceApiV1DataSourcesPostData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type CreateDataSourceApiV1DataSourcesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateDataSourceApiV1DataSourcesPostError = CreateDataSourceApiV1DataSourcesPostErrors[keyof CreateDataSourceApiV1DataSourcesPostErrors];
type CreateDataSourceApiV1DataSourcesPostResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type CreateDataSourceApiV1DataSourcesPostResponse = CreateDataSourceApiV1DataSourcesPostResponses[keyof CreateDataSourceApiV1DataSourcesPostResponses];
type UpsertDataSourceApiV1DataSourcesPutData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type UpsertDataSourceApiV1DataSourcesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertDataSourceApiV1DataSourcesPutError = UpsertDataSourceApiV1DataSourcesPutErrors[keyof UpsertDataSourceApiV1DataSourcesPutErrors];
type UpsertDataSourceApiV1DataSourcesPutResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type UpsertDataSourceApiV1DataSourcesPutResponse = UpsertDataSourceApiV1DataSourcesPutResponses[keyof UpsertDataSourceApiV1DataSourcesPutResponses];
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData = {
    body?: never;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError = DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors[keyof DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors];
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse = DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses[keyof DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses];
type GetDataSourceApiV1DataSourcesDataSourceIdGetData = {
    body?: never;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetError = GetDataSourceApiV1DataSourcesDataSourceIdGetErrors[keyof GetDataSourceApiV1DataSourcesDataSourceIdGetErrors];
type GetDataSourceApiV1DataSourcesDataSourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetResponse = GetDataSourceApiV1DataSourcesDataSourceIdGetResponses[keyof GetDataSourceApiV1DataSourcesDataSourceIdGetResponses];
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutData = {
    body: DataSourceUpdateWritable;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutError = UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors[keyof UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors];
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse = UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses[keyof UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses];
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError = ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors[keyof ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors];
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<EmbeddingModelConfig>;
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse = ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses[keyof ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses];
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData = {
    body: EmbeddingModelConfigCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError = CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors[keyof CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors];
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses = {
    /**
     * Successful Response
     */
    201: EmbeddingModelConfig;
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse = CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses[keyof CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses];
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData = {
    body: EmbeddingModelConfigUpdate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError = UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors[keyof UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors];
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses = {
    /**
     * Successful Response
     */
    200: EmbeddingModelConfig;
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse = UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses[keyof UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses];
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData = {
    body?: never;
    path: {
        embedding_model_config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs/{embedding_model_config_id}";
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError = DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors[keyof DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors];
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse = DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses[keyof DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses];
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData = {
    body: EmbeddingModelConfigUpdate;
    path: {
        embedding_model_config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs/{embedding_model_config_id}";
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError = UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors[keyof UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors];
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses = {
    /**
     * Successful Response
     */
    200: EmbeddingModelConfig;
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse = UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses[keyof UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses];
type ListOrganizationsApiV1OrganizationsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type ListOrganizationsApiV1OrganizationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListOrganizationsApiV1OrganizationsGetError = ListOrganizationsApiV1OrganizationsGetErrors[keyof ListOrganizationsApiV1OrganizationsGetErrors];
type ListOrganizationsApiV1OrganizationsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Organization>;
};
type ListOrganizationsApiV1OrganizationsGetResponse = ListOrganizationsApiV1OrganizationsGetResponses[keyof ListOrganizationsApiV1OrganizationsGetResponses];
type CreateOrganizationApiV1OrganizationsPostData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type CreateOrganizationApiV1OrganizationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateOrganizationApiV1OrganizationsPostError = CreateOrganizationApiV1OrganizationsPostErrors[keyof CreateOrganizationApiV1OrganizationsPostErrors];
type CreateOrganizationApiV1OrganizationsPostResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type CreateOrganizationApiV1OrganizationsPostResponse = CreateOrganizationApiV1OrganizationsPostResponses[keyof CreateOrganizationApiV1OrganizationsPostResponses];
type UpsertOrganizationApiV1OrganizationsPutData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type UpsertOrganizationApiV1OrganizationsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertOrganizationApiV1OrganizationsPutError = UpsertOrganizationApiV1OrganizationsPutErrors[keyof UpsertOrganizationApiV1OrganizationsPutErrors];
type UpsertOrganizationApiV1OrganizationsPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type UpsertOrganizationApiV1OrganizationsPutResponse = UpsertOrganizationApiV1OrganizationsPutResponses[keyof UpsertOrganizationApiV1OrganizationsPutResponses];
type GetDefaultOrganizationApiV1OrganizationsDefaultGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/organizations/default";
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetError = GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors[keyof GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors];
type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse = GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses[keyof GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses];
type SetDefaultOrganizationApiV1OrganizationsDefaultPutData = {
    body: DefaultOrganizationUpdate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations/default";
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutError = SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors[keyof SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors];
type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse = SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses[keyof SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses];
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError = DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors[keyof DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors];
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse = DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses[keyof DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses];
type GetOrganizationApiV1OrganizationsOrganizationIdGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetError = GetOrganizationApiV1OrganizationsOrganizationIdGetErrors[keyof GetOrganizationApiV1OrganizationsOrganizationIdGetErrors];
type GetOrganizationApiV1OrganizationsOrganizationIdGetResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetResponse = GetOrganizationApiV1OrganizationsOrganizationIdGetResponses[keyof GetOrganizationApiV1OrganizationsOrganizationIdGetResponses];
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutData = {
    body: OrganizationUpdate;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutError = UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors[keyof UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors];
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse = UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses[keyof UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses];
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: {
        get_current_invoice_total?: boolean;
    };
    url: "/api/v1/organizations/{organization_id}/usage";
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError = GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors[keyof GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors];
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses = {
    /**
     * Successful Response
     */
    200: UsageAndPlan;
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse = GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses[keyof GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses];
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users";
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError = ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors[keyof ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors];
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserOrganization>;
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse = ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses[keyof ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses];
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData = {
    body: Array<UserOrganizationCreate>;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users";
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError = AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors[keyof AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors];
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses = {
    /**
     * Successful Response
     */
    200: Array<UserOrganization>;
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse = AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses[keyof AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses];
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData = {
    body?: Array<string> | null;
    path: {
        organization_id: string;
        member_user_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{member_user_id}";
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError = RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors[keyof RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors];
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse = RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses[keyof RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses];
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData = {
    body: Array<UserOrganizationDelete>;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/remove";
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError = BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors[keyof BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors];
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse = BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses[keyof BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses];
type ListRolesApiV1OrganizationsOrganizationIdRolesGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/roles";
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetError = ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors[keyof ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors];
type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Role>;
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse = ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses[keyof ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses];
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/organizations/{organization_id}/users/roles";
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError = GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors[keyof GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors];
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses = {
    /**
     * Successful Response
     */
    200: UserOrganizationRole | null;
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse = GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses[keyof GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses];
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData = {
    body: UserOrganizationRoleCreate;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/roles";
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError = AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors[keyof AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors];
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses = {
    /**
     * Successful Response
     */
    200: UserOrganizationRole;
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse = AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses[keyof AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses];
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData = {
    body?: never;
    path: {
        organization_id: string;
        user_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects";
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError = ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors[keyof ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors];
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse = ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses[keyof ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses];
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData = {
    body?: never;
    path: {
        organization_id: string | null;
        user_id: string;
    };
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects";
};
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError = AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors[keyof AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors];
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        organization_id: string;
        user_id: string;
        project_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects/{project_id}";
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError = RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors[keyof RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors];
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListProjectsApiV1ProjectsGetData = {
    body?: never;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_name?: string | null;
    };
    url: "/api/v1/projects";
};
type ListProjectsApiV1ProjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListProjectsApiV1ProjectsGetError = ListProjectsApiV1ProjectsGetErrors[keyof ListProjectsApiV1ProjectsGetErrors];
type ListProjectsApiV1ProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};
type ListProjectsApiV1ProjectsGetResponse = ListProjectsApiV1ProjectsGetResponses[keyof ListProjectsApiV1ProjectsGetResponses];
type CreateProjectApiV1ProjectsPostData = {
    body: ProjectCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects";
};
type CreateProjectApiV1ProjectsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateProjectApiV1ProjectsPostError = CreateProjectApiV1ProjectsPostErrors[keyof CreateProjectApiV1ProjectsPostErrors];
type CreateProjectApiV1ProjectsPostResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type CreateProjectApiV1ProjectsPostResponse = CreateProjectApiV1ProjectsPostResponses[keyof CreateProjectApiV1ProjectsPostResponses];
type UpsertProjectApiV1ProjectsPutData = {
    body: ProjectCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects";
};
type UpsertProjectApiV1ProjectsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertProjectApiV1ProjectsPutError = UpsertProjectApiV1ProjectsPutErrors[keyof UpsertProjectApiV1ProjectsPutErrors];
type UpsertProjectApiV1ProjectsPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type UpsertProjectApiV1ProjectsPutResponse = UpsertProjectApiV1ProjectsPutResponses[keyof UpsertProjectApiV1ProjectsPutResponses];
type DeleteProjectApiV1ProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type DeleteProjectApiV1ProjectsProjectIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteProjectApiV1ProjectsProjectIdDeleteError = DeleteProjectApiV1ProjectsProjectIdDeleteErrors[keyof DeleteProjectApiV1ProjectsProjectIdDeleteErrors];
type DeleteProjectApiV1ProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteProjectApiV1ProjectsProjectIdDeleteResponse = DeleteProjectApiV1ProjectsProjectIdDeleteResponses[keyof DeleteProjectApiV1ProjectsProjectIdDeleteResponses];
type GetProjectApiV1ProjectsProjectIdGetData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type GetProjectApiV1ProjectsProjectIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetProjectApiV1ProjectsProjectIdGetError = GetProjectApiV1ProjectsProjectIdGetErrors[keyof GetProjectApiV1ProjectsProjectIdGetErrors];
type GetProjectApiV1ProjectsProjectIdGetResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type GetProjectApiV1ProjectsProjectIdGetResponse = GetProjectApiV1ProjectsProjectIdGetResponses[keyof GetProjectApiV1ProjectsProjectIdGetResponses];
type UpdateExistingProjectApiV1ProjectsProjectIdPutData = {
    body: ProjectUpdate;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutError = UpdateExistingProjectApiV1ProjectsProjectIdPutErrors[keyof UpdateExistingProjectApiV1ProjectsProjectIdPutErrors];
type UpdateExistingProjectApiV1ProjectsProjectIdPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutResponse = UpdateExistingProjectApiV1ProjectsProjectIdPutResponses[keyof UpdateExistingProjectApiV1ProjectsProjectIdPutResponses];
type GetCurrentProjectApiV1ProjectsCurrentGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/projects/current";
};
type GetCurrentProjectApiV1ProjectsCurrentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetCurrentProjectApiV1ProjectsCurrentGetError = GetCurrentProjectApiV1ProjectsCurrentGetErrors[keyof GetCurrentProjectApiV1ProjectsCurrentGetErrors];
type GetCurrentProjectApiV1ProjectsCurrentGetResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type GetCurrentProjectApiV1ProjectsCurrentGetResponse = GetCurrentProjectApiV1ProjectsCurrentGetResponses[keyof GetCurrentProjectApiV1ProjectsCurrentGetResponses];
type GetProjectUsageApiV1ProjectsProjectIdUsageGetData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        get_current_invoice_total?: boolean;
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}/usage";
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetError = GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors[keyof GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors];
type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses = {
    /**
     * Successful Response
     */
    200: UsageAndPlan;
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse = GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses[keyof GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses];
type DeleteFileApiV1FilesIdDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}";
};
type DeleteFileApiV1FilesIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteFileApiV1FilesIdDeleteError = DeleteFileApiV1FilesIdDeleteErrors[keyof DeleteFileApiV1FilesIdDeleteErrors];
type DeleteFileApiV1FilesIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteFileApiV1FilesIdDeleteResponse = DeleteFileApiV1FilesIdDeleteResponses[keyof DeleteFileApiV1FilesIdDeleteResponses];
type GetFileApiV1FilesIdGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}";
};
type GetFileApiV1FilesIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFileApiV1FilesIdGetError = GetFileApiV1FilesIdGetErrors[keyof GetFileApiV1FilesIdGetErrors];
type GetFileApiV1FilesIdGetResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type GetFileApiV1FilesIdGetResponse = GetFileApiV1FilesIdGetResponses[keyof GetFileApiV1FilesIdGetResponses];
type ListFilesApiV1FilesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type ListFilesApiV1FilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilesApiV1FilesGetError = ListFilesApiV1FilesGetErrors[keyof ListFilesApiV1FilesGetErrors];
type ListFilesApiV1FilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<File>;
};
type ListFilesApiV1FilesGetResponse = ListFilesApiV1FilesGetResponses[keyof ListFilesApiV1FilesGetResponses];
type UploadFileApiV1FilesPostData = {
    body: BodyUploadFileApiV1FilesPost;
    path?: never;
    query?: {
        external_file_id?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type UploadFileApiV1FilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiV1FilesPostError = UploadFileApiV1FilesPostErrors[keyof UploadFileApiV1FilesPostErrors];
type UploadFileApiV1FilesPostResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type UploadFileApiV1FilesPostResponse = UploadFileApiV1FilesPostResponses[keyof UploadFileApiV1FilesPostResponses];
type GeneratePresignedUrlApiV1FilesPutData = {
    body: FileCreate;
    path?: never;
    query?: {
        expires_at_seconds?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type GeneratePresignedUrlApiV1FilesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiV1FilesPutError = GeneratePresignedUrlApiV1FilesPutErrors[keyof GeneratePresignedUrlApiV1FilesPutErrors];
type GeneratePresignedUrlApiV1FilesPutResponses = {
    /**
     * Successful Response
     */
    200: FileIdPresignedUrl;
};
type GeneratePresignedUrlApiV1FilesPutResponse = GeneratePresignedUrlApiV1FilesPutResponses[keyof GeneratePresignedUrlApiV1FilesPutResponses];
type SyncFilesApiV1FilesSyncPutData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/sync";
};
type SyncFilesApiV1FilesSyncPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncFilesApiV1FilesSyncPutError = SyncFilesApiV1FilesSyncPutErrors[keyof SyncFilesApiV1FilesSyncPutErrors];
type SyncFilesApiV1FilesSyncPutResponses = {
    /**
     * Successful Response
     */
    200: Array<File>;
};
type SyncFilesApiV1FilesSyncPutResponse = SyncFilesApiV1FilesSyncPutResponses[keyof SyncFilesApiV1FilesSyncPutResponses];
type UploadFileFromUrlApiV1FilesUploadFromUrlPutData = {
    body: FileCreateFromUrl;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/upload_from_url";
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutError = UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors[keyof UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors];
type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse = UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses[keyof UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses];
type ReadFileContentApiV1FilesIdContentGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        expires_at_seconds?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/content";
};
type ReadFileContentApiV1FilesIdContentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ReadFileContentApiV1FilesIdContentGetError = ReadFileContentApiV1FilesIdContentGetErrors[keyof ReadFileContentApiV1FilesIdContentGetErrors];
type ReadFileContentApiV1FilesIdContentGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type ReadFileContentApiV1FilesIdContentGetResponse = ReadFileContentApiV1FilesIdContentGetResponses[keyof ReadFileContentApiV1FilesIdContentGetResponses];
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page_screenshots";
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError = ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors[keyof ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors];
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageScreenshotMetadata>;
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse = ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses[keyof ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses];
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page_screenshots/{page_index}";
};
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError = GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors[keyof GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors];
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures";
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetError = ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors[keyof ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors];
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageFigureMetadata>;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse = ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses[keyof ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses];
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures/{page_index}";
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError = ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors[keyof ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors];
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageFigureMetadata>;
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse = ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses[keyof ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses];
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
        figure_name: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures/{page_index}/{figure_name}";
};
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError = GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors[keyof GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors];
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page_screenshots/{page_index}/presigned_url";
};
type GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostError = GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostErrors[keyof GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostErrors];
type GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponse = GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponses[keyof GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponses];
type GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
        figure_name: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures/{page_index}/{figure_name}/presigned_url";
};
type GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostError = GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostErrors[keyof GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostErrors];
type GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponse = GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponses[keyof GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponses];
type SearchPipelinesApiV1PipelinesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        project_name?: string | null;
        pipeline_name?: string | null;
        pipeline_type?: PipelineType | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines";
};
type SearchPipelinesApiV1PipelinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SearchPipelinesApiV1PipelinesGetError = SearchPipelinesApiV1PipelinesGetErrors[keyof SearchPipelinesApiV1PipelinesGetErrors];
type SearchPipelinesApiV1PipelinesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineReadable>;
};
type SearchPipelinesApiV1PipelinesGetResponse = SearchPipelinesApiV1PipelinesGetResponses[keyof SearchPipelinesApiV1PipelinesGetResponses];
type CreatePipelineApiV1PipelinesPostData = {
    body: PipelineCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines";
};
type CreatePipelineApiV1PipelinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreatePipelineApiV1PipelinesPostError = CreatePipelineApiV1PipelinesPostErrors[keyof CreatePipelineApiV1PipelinesPostErrors];
type CreatePipelineApiV1PipelinesPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CreatePipelineApiV1PipelinesPostResponse = CreatePipelineApiV1PipelinesPostResponses[keyof CreatePipelineApiV1PipelinesPostResponses];
type UpsertPipelineApiV1PipelinesPutData = {
    body: PipelineCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines";
};
type UpsertPipelineApiV1PipelinesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertPipelineApiV1PipelinesPutError = UpsertPipelineApiV1PipelinesPutErrors[keyof UpsertPipelineApiV1PipelinesPutErrors];
type UpsertPipelineApiV1PipelinesPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type UpsertPipelineApiV1PipelinesPutResponse = UpsertPipelineApiV1PipelinesPutResponses[keyof UpsertPipelineApiV1PipelinesPutResponses];
type DeletePipelineApiV1PipelinesPipelineIdDeleteData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteError = DeletePipelineApiV1PipelinesPipelineIdDeleteErrors[keyof DeletePipelineApiV1PipelinesPipelineIdDeleteErrors];
type DeletePipelineApiV1PipelinesPipelineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteResponse = DeletePipelineApiV1PipelinesPipelineIdDeleteResponses[keyof DeletePipelineApiV1PipelinesPipelineIdDeleteResponses];
type GetPipelineApiV1PipelinesPipelineIdGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type GetPipelineApiV1PipelinesPipelineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineApiV1PipelinesPipelineIdGetError = GetPipelineApiV1PipelinesPipelineIdGetErrors[keyof GetPipelineApiV1PipelinesPipelineIdGetErrors];
type GetPipelineApiV1PipelinesPipelineIdGetResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type GetPipelineApiV1PipelinesPipelineIdGetResponse = GetPipelineApiV1PipelinesPipelineIdGetResponses[keyof GetPipelineApiV1PipelinesPipelineIdGetResponses];
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutData = {
    body: PipelineUpdateWritable;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutError = UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors[keyof UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors];
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse = UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses[keyof UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses];
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/status";
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError = GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors[keyof GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors];
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse = GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses[keyof GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses];
type SyncPipelineApiV1PipelinesPipelineIdSyncPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/sync";
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostError = SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors[keyof SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors];
type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse = SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses[keyof SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses];
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/sync/cancel";
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError = CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors[keyof CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors];
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse = CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses[keyof CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses];
type ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/force-delete";
};
type ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostError = ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostErrors[keyof ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostErrors];
type ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponse = ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponses[keyof ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponses];
type CopyPipelineApiV1PipelinesPipelineIdCopyPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/copy";
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostError = CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors[keyof CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors];
type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse = CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses[keyof CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses];
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files";
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError = ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors[keyof ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors];
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineFile>;
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse = ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses[keyof ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses];
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData = {
    body: Array<PipelineFileCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files";
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError = AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors[keyof AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors];
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineFile>;
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse = AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses[keyof AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses];
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
        file_name_contains?: string | null;
        limit?: number | null;
        offset?: number | null;
        order_by?: string | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files2";
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError = ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors[keyof ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors];
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedListPipelineFilesResponse;
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse = ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses[keyof ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses];
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files/status-counts";
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError = GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors[keyof GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors];
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses = {
    /**
     * Successful Response
     */
    200: FileCountByStatusResponse;
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse = GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses[keyof GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses];
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData = {
    body?: never;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}/status";
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError = GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors[keyof GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors];
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse = GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses[keyof GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses];
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData = {
    body?: never;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}";
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError = DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors[keyof DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors];
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse = DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses[keyof DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses];
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData = {
    body: PipelineFileUpdate;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}";
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError = UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors[keyof UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors];
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineFile;
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse = UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses[keyof UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses];
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/metadata";
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError = DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors[keyof DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors];
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse = DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses[keyof DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses];
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData = {
    body: BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/metadata";
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError = ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors[keyof ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors];
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse = ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses[keyof ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses];
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources";
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError = ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors[keyof ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors];
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDataSourceReadable>;
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse = ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses[keyof ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses];
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData = {
    body: Array<PipelineDataSourceCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources";
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError = AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors[keyof AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors];
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDataSourceReadable>;
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse = AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses[keyof AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses];
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}";
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError = DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors[keyof DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors];
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse = DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses[keyof DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses];
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData = {
    body: PipelineDataSourceUpdate;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}";
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError = UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors[keyof UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors];
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineDataSourceReadable;
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse = UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses[keyof UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses];
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync";
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError = SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors[keyof SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors];
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse = SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses[keyof SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses];
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/status";
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError = GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors[keyof GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors];
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse = GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses[keyof GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses];
type RunSearchApiV1PipelinesPipelineIdRetrievePostData = {
    body: RetrievalParams;
    path: {
        pipeline_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/retrieve";
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostError = RunSearchApiV1PipelinesPipelineIdRetrievePostErrors[keyof RunSearchApiV1PipelinesPipelineIdRetrievePostErrors];
type RunSearchApiV1PipelinesPipelineIdRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: RetrieveResults;
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostResponse = RunSearchApiV1PipelinesPipelineIdRetrievePostResponses[keyof RunSearchApiV1PipelinesPipelineIdRetrievePostResponses];
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/jobs";
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError = ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors[keyof ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors];
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDeployment>;
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse = ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses[keyof ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses];
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/jobs/{job_id}";
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError = GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors[keyof GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors];
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: PipelineDeployment;
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse = GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses[keyof GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses];
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/playground-session";
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError = GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors[keyof GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors];
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses = {
    /**
     * Successful Response
     */
    200: PlaygroundSession;
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse = GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses[keyof GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses];
type ChatApiV1PipelinesPipelineIdChatPostData = {
    body: ChatInputParams;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/chat";
};
type ChatApiV1PipelinesPipelineIdChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ChatApiV1PipelinesPipelineIdChatPostError = ChatApiV1PipelinesPipelineIdChatPostErrors[keyof ChatApiV1PipelinesPipelineIdChatPostErrors];
type ChatApiV1PipelinesPipelineIdChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        skip?: number;
        limit?: number;
        file_id?: string | null;
        only_direct_upload?: boolean | null;
        only_api_data_source_documents?: boolean | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError = ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors[keyof ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors];
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse = ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses[keyof ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses];
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData = {
    body: Array<CloudDocumentCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError = CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors[keyof CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors];
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse = CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses[keyof CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses];
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData = {
    body: Array<CloudDocumentCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError = UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors[keyof UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors];
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse = UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses[keyof UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses];
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        skip?: number;
        limit?: number;
        file_id?: string | null;
        only_direct_upload?: boolean | null;
        only_api_data_source_documents?: boolean | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/documents/paginated";
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError = PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors[keyof PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors];
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedListCloudDocumentsResponse;
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse = PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses[keyof PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses];
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}";
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError = DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors[keyof DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors];
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse = DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses[keyof DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses];
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}";
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError = GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors[keyof GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors];
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses = {
    /**
     * Successful Response
     */
    200: CloudDocument;
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse = GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses[keyof GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses];
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status";
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError = GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors[keyof GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors];
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse = GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses[keyof GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses];
type SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/sync";
};
type SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostError = SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostErrors[keyof SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostErrors];
type SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/chunks";
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError = ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors[keyof ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors];
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<TextNode>;
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse = ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses[keyof ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses];
type ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        batch_size?: number;
        /**
         * Only sync retriable documents (failed/cancelled/not-started/stalled-in-progress)
         */
        only_failed?: boolean;
    };
    url: "/api/v1/pipelines/{pipeline_id}/documents/force-sync-all";
};
type ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostError = ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostErrors[keyof ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostErrors];
type ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostResponses = {
    /**
     * Successful Response
     */
    202: unknown;
};
type ListRetrieversApiV1RetrieversGetData = {
    body?: never;
    path?: never;
    query?: {
        name?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type ListRetrieversApiV1RetrieversGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListRetrieversApiV1RetrieversGetError = ListRetrieversApiV1RetrieversGetErrors[keyof ListRetrieversApiV1RetrieversGetErrors];
type ListRetrieversApiV1RetrieversGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Retriever>;
};
type ListRetrieversApiV1RetrieversGetResponse = ListRetrieversApiV1RetrieversGetResponses[keyof ListRetrieversApiV1RetrieversGetResponses];
type CreateRetrieverApiV1RetrieversPostData = {
    body: RetrieverCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type CreateRetrieverApiV1RetrieversPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateRetrieverApiV1RetrieversPostError = CreateRetrieverApiV1RetrieversPostErrors[keyof CreateRetrieverApiV1RetrieversPostErrors];
type CreateRetrieverApiV1RetrieversPostResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type CreateRetrieverApiV1RetrieversPostResponse = CreateRetrieverApiV1RetrieversPostResponses[keyof CreateRetrieverApiV1RetrieversPostResponses];
type UpsertRetrieverApiV1RetrieversPutData = {
    body: RetrieverCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type UpsertRetrieverApiV1RetrieversPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertRetrieverApiV1RetrieversPutError = UpsertRetrieverApiV1RetrieversPutErrors[keyof UpsertRetrieverApiV1RetrieversPutErrors];
type UpsertRetrieverApiV1RetrieversPutResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type UpsertRetrieverApiV1RetrieversPutResponse = UpsertRetrieverApiV1RetrieversPutResponses[keyof UpsertRetrieverApiV1RetrieversPutResponses];
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData = {
    body?: never;
    path: {
        retriever_id: string;
    };
    query?: never;
    url: "/api/v1/retrievers/{retriever_id}";
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError = DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors[keyof DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors];
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse = DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses[keyof DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses];
type GetRetrieverApiV1RetrieversRetrieverIdGetData = {
    body?: never;
    path: {
        retriever_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/{retriever_id}";
};
type GetRetrieverApiV1RetrieversRetrieverIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRetrieverApiV1RetrieversRetrieverIdGetError = GetRetrieverApiV1RetrieversRetrieverIdGetErrors[keyof GetRetrieverApiV1RetrieversRetrieverIdGetErrors];
type GetRetrieverApiV1RetrieversRetrieverIdGetResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type GetRetrieverApiV1RetrieversRetrieverIdGetResponse = GetRetrieverApiV1RetrieversRetrieverIdGetResponses[keyof GetRetrieverApiV1RetrieversRetrieverIdGetResponses];
type UpdateRetrieverApiV1RetrieversRetrieverIdPutData = {
    body: RetrieverUpdate;
    path: {
        retriever_id: string;
    };
    query?: never;
    url: "/api/v1/retrievers/{retriever_id}";
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutError = UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors[keyof UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors];
type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse = UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses[keyof UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses];
type RetrieveApiV1RetrieversRetrieverIdRetrievePostData = {
    body: CompositeRetrievalParams;
    path: {
        retriever_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/{retriever_id}/retrieve";
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostError = RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors[keyof RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors];
type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: CompositeRetrievalResult;
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse = RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses[keyof RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses];
type DirectRetrieveApiV1RetrieversRetrievePostData = {
    body: DirectRetrievalParams;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/retrieve";
};
type DirectRetrieveApiV1RetrieversRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DirectRetrieveApiV1RetrieversRetrievePostError = DirectRetrieveApiV1RetrieversRetrievePostErrors[keyof DirectRetrieveApiV1RetrieversRetrievePostErrors];
type DirectRetrieveApiV1RetrieversRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: CompositeRetrievalResult;
};
type DirectRetrieveApiV1RetrieversRetrievePostResponse = DirectRetrieveApiV1RetrieversRetrievePostResponses[keyof DirectRetrieveApiV1RetrieversRetrievePostResponses];
type GetJobsApiV1JobsGetData = {
    body?: never;
    path?: never;
    query?: {
        job_name?: string | null;
        limit?: number;
        offset?: number;
        sort?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/jobs";
};
type GetJobsApiV1JobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobsApiV1JobsGetError = GetJobsApiV1JobsGetErrors[keyof GetJobsApiV1JobsGetErrors];
type GetJobsApiV1JobsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedJobsHistoryWithMetrics;
};
type GetJobsApiV1JobsGetResponse = GetJobsApiV1JobsGetResponses[keyof GetJobsApiV1JobsGetResponses];
type ListSupportedModelsApiV1EvalsModelsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/evals/models";
};
type ListSupportedModelsApiV1EvalsModelsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListSupportedModelsApiV1EvalsModelsGetError = ListSupportedModelsApiV1EvalsModelsGetErrors[keyof ListSupportedModelsApiV1EvalsModelsGetErrors];
type ListSupportedModelsApiV1EvalsModelsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SupportedLlmModel>;
};
type ListSupportedModelsApiV1EvalsModelsGetResponse = ListSupportedModelsApiV1EvalsModelsGetResponses[keyof ListSupportedModelsApiV1EvalsModelsGetResponses];
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData = {
    body?: never;
    path: {
        job_id: string;
        name: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/image/{name}";
};
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError = GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors[keyof GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors];
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/parsing/supported_file_extensions";
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<LlamaParseSupportedFileExtensions>;
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse = GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses[keyof GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses];
type ScreenshotApiV1ParsingScreenshotPostData = {
    body?: BodyScreenshotApiV1ParsingScreenshotPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/parsing/screenshot";
};
type ScreenshotApiV1ParsingScreenshotPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ScreenshotApiV1ParsingScreenshotPostError = ScreenshotApiV1ParsingScreenshotPostErrors[keyof ScreenshotApiV1ParsingScreenshotPostErrors];
type ScreenshotApiV1ParsingScreenshotPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type ScreenshotApiV1ParsingScreenshotPostResponse = ScreenshotApiV1ParsingScreenshotPostResponses[keyof ScreenshotApiV1ParsingScreenshotPostResponses];
type UploadFileApiV1ParsingUploadPostData = {
    body?: BodyUploadFileApiV1ParsingUploadPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/parsing/upload";
};
type UploadFileApiV1ParsingUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiV1ParsingUploadPostError = UploadFileApiV1ParsingUploadPostErrors[keyof UploadFileApiV1ParsingUploadPostErrors];
type UploadFileApiV1ParsingUploadPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type UploadFileApiV1ParsingUploadPostResponse = UploadFileApiV1ParsingUploadPostResponses[keyof UploadFileApiV1ParsingUploadPostResponses];
type GetJobApiV1ParsingJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}";
};
type GetJobApiV1ParsingJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiV1ParsingJobJobIdGetError = GetJobApiV1ParsingJobJobIdGetErrors[keyof GetJobApiV1ParsingJobJobIdGetErrors];
type GetJobApiV1ParsingJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type GetJobApiV1ParsingJobJobIdGetResponse = GetJobApiV1ParsingJobJobIdGetResponses[keyof GetJobApiV1ParsingJobJobIdGetResponses];
type GetJobParametersApiV1ParsingJobJobIdParametersGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/parameters";
};
type GetJobParametersApiV1ParsingJobJobIdParametersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobParametersApiV1ParsingJobJobIdParametersGetError = GetJobParametersApiV1ParsingJobJobIdParametersGetErrors[keyof GetJobParametersApiV1ParsingJobJobIdParametersGetErrors];
type GetJobParametersApiV1ParsingJobJobIdParametersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/details";
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError = GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors[keyof GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors];
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/text";
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetError = GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors[keyof GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors];
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobTextResult;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse = GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses[keyof GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses];
type GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/text";
};
type GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetError = GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetErrors[keyof GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetErrors];
type GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/pdf";
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError = GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors[keyof GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors];
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/pdf";
};
type GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetError = GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetErrors[keyof GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetErrors];
type GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/structured";
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError = GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors[keyof GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors];
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobStructuredResult;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse = GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses[keyof GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses];
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/structured";
};
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError = GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors[keyof GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors];
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/xlsx";
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError = GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors[keyof GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors];
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/xlsx";
};
type GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetError = GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetErrors[keyof GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetErrors];
type GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/markdown";
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError = GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors[keyof GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors];
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobMarkdownResult;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse = GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses[keyof GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses];
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/markdown";
};
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError = GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors[keyof GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors];
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/json";
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError = GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors[keyof GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors];
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobJsonResult;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse = GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses[keyof GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses];
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/json";
};
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError = GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors[keyof GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors];
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/parsing/history";
};
type GetParsingHistoryResultApiV1ParsingHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetError = GetParsingHistoryResultApiV1ParsingHistoryGetErrors[keyof GetParsingHistoryResultApiV1ParsingHistoryGetErrors];
type GetParsingHistoryResultApiV1ParsingHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ParsingHistoryItem>;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetResponse = GetParsingHistoryResultApiV1ParsingHistoryGetResponses[keyof GetParsingHistoryResultApiV1ParsingHistoryGetResponses];
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData = {
    body?: never;
    path: {
        job_id: string;
        filename: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/read/{filename}";
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError = GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors[keyof GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors];
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse = GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses[keyof GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses];
type GetChatAppsApiV1AppsGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/";
};
type GetChatAppsApiV1AppsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetChatAppsApiV1AppsGetError = GetChatAppsApiV1AppsGetErrors[keyof GetChatAppsApiV1AppsGetErrors];
type GetChatAppsApiV1AppsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatAppResponse>;
};
type GetChatAppsApiV1AppsGetResponse = GetChatAppsApiV1AppsGetResponses[keyof GetChatAppsApiV1AppsGetResponses];
type CreateChatAppApiV1AppsPostData = {
    body: ChatAppCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/";
};
type CreateChatAppApiV1AppsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateChatAppApiV1AppsPostError = CreateChatAppApiV1AppsPostErrors[keyof CreateChatAppApiV1AppsPostErrors];
type CreateChatAppApiV1AppsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type CreateChatAppApiV1AppsPostResponse = CreateChatAppApiV1AppsPostResponses[keyof CreateChatAppApiV1AppsPostResponses];
type DeleteChatAppApiV1AppsIdDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}";
};
type DeleteChatAppApiV1AppsIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteChatAppApiV1AppsIdDeleteError = DeleteChatAppApiV1AppsIdDeleteErrors[keyof DeleteChatAppApiV1AppsIdDeleteErrors];
type DeleteChatAppApiV1AppsIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetChatAppApiV1AppsIdGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}";
};
type GetChatAppApiV1AppsIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetChatAppApiV1AppsIdGetError = GetChatAppApiV1AppsIdGetErrors[keyof GetChatAppApiV1AppsIdGetErrors];
type GetChatAppApiV1AppsIdGetResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type GetChatAppApiV1AppsIdGetResponse = GetChatAppApiV1AppsIdGetResponses[keyof GetChatAppApiV1AppsIdGetResponses];
type UpdateChatAppApiV1AppsIdPutData = {
    body: ChatAppUpdate;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/{id}";
};
type UpdateChatAppApiV1AppsIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateChatAppApiV1AppsIdPutError = UpdateChatAppApiV1AppsIdPutErrors[keyof UpdateChatAppApiV1AppsIdPutErrors];
type UpdateChatAppApiV1AppsIdPutResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type UpdateChatAppApiV1AppsIdPutResponse = UpdateChatAppApiV1AppsIdPutResponses[keyof UpdateChatAppApiV1AppsIdPutResponses];
type ChatWithChatAppApiV1AppsIdChatPostData = {
    body: AppChatInputParams;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}/chat";
};
type ChatWithChatAppApiV1AppsIdChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ChatWithChatAppApiV1AppsIdChatPostError = ChatWithChatAppApiV1AppsIdChatPostErrors[keyof ChatWithChatAppApiV1AppsIdChatPostErrors];
type ChatWithChatAppApiV1AppsIdChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListClassifyJobsApiV1ClassifierJobsGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
        page_size?: number | null;
        page_token?: string | null;
    };
    url: "/api/v1/classifier/jobs";
};
type ListClassifyJobsApiV1ClassifierJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListClassifyJobsApiV1ClassifierJobsGetError = ListClassifyJobsApiV1ClassifierJobsGetErrors[keyof ListClassifyJobsApiV1ClassifierJobsGetErrors];
type ListClassifyJobsApiV1ClassifierJobsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseClassifyJob;
};
type ListClassifyJobsApiV1ClassifierJobsGetResponse = ListClassifyJobsApiV1ClassifierJobsGetResponses[keyof ListClassifyJobsApiV1ClassifierJobsGetResponses];
type CreateClassifyJobApiV1ClassifierJobsPostData = {
    body: ClassifyJobCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/classifier/jobs";
};
type CreateClassifyJobApiV1ClassifierJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateClassifyJobApiV1ClassifierJobsPostError = CreateClassifyJobApiV1ClassifierJobsPostErrors[keyof CreateClassifyJobApiV1ClassifierJobsPostErrors];
type CreateClassifyJobApiV1ClassifierJobsPostResponses = {
    /**
     * Successful Response
     */
    200: ClassifyJob;
};
type CreateClassifyJobApiV1ClassifierJobsPostResponse = CreateClassifyJobApiV1ClassifierJobsPostResponses[keyof CreateClassifyJobApiV1ClassifierJobsPostResponses];
type GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetData = {
    body?: never;
    path: {
        classify_job_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/classifier/jobs/{classify_job_id}";
};
type GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetError = GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetErrors[keyof GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetErrors];
type GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ClassifyJob;
};
type GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponse = GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponses[keyof GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponses];
type GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetData = {
    body?: never;
    path: {
        classify_job_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/classifier/jobs/{classify_job_id}/results";
};
type GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetError = GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetErrors[keyof GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetErrors];
type GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponses = {
    /**
     * Successful Response
     */
    200: ClassifyJobResults;
};
type GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponse = GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponses[keyof GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponses];
type ReadSelfApiV1AuthMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/auth/me";
};
type ReadSelfApiV1AuthMeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ReadSelfApiV1AuthMeGetError = ReadSelfApiV1AuthMeGetErrors[keyof ReadSelfApiV1AuthMeGetErrors];
type ReadSelfApiV1AuthMeGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};
type ReadSelfApiV1AuthMeGetResponse = ReadSelfApiV1AuthMeGetResponses[keyof ReadSelfApiV1AuthMeGetResponses];
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData = {
    body: CustomerPortalSessionCreatePayload;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/billing/customer-portal-session";
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError = CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors[keyof CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors];
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses = {
    /**
     * Successful Response
     */
    200: string;
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse = CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses[keyof CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses];
type DowngradePlanApiV1BillingDowngradePlanPostData = {
    body?: never;
    path?: never;
    query: {
        organization_id: string;
    };
    url: "/api/v1/billing/downgrade-plan";
};
type DowngradePlanApiV1BillingDowngradePlanPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DowngradePlanApiV1BillingDowngradePlanPostError = DowngradePlanApiV1BillingDowngradePlanPostErrors[keyof DowngradePlanApiV1BillingDowngradePlanPostErrors];
type DowngradePlanApiV1BillingDowngradePlanPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: "success";
    };
};
type DowngradePlanApiV1BillingDowngradePlanPostResponse = DowngradePlanApiV1BillingDowngradePlanPostResponses[keyof DowngradePlanApiV1BillingDowngradePlanPostResponses];
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData = {
    body?: never;
    path?: never;
    query: {
        plan_name: "free" | "llama_parse" | "enterprise" | "unknown" | "free_contract" | "pro" | "enterprise_contract" | "enterprise_poc" | "free_v1" | "starter_v1" | "pro_v1";
        organization_id?: string | null;
    };
    url: "/api/v1/billing/create-intent-and-customer-session";
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError = CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors[keyof CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors];
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses = {
    /**
     * Successful Response
     */
    200: CreateIntentAndCustomerSessionResponse;
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse = CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses[keyof CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses];
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData = {
    body?: never;
    path?: never;
    query: {
        organization_id: string;
        /**
         * The type of dashboard to get
         */
        dashboard_type?: MetronomeDashboardType;
    };
    url: "/api/v1/billing/metronome/dashboard";
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError = GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors[keyof GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors];
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses = {
    /**
     * Successful Response
     */
    200: MetronomeDashboardResponse;
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse = GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses[keyof GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses];
type ListJobsApiV1ExtractionJobsGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
    };
    url: "/api/v1/extraction/jobs";
};
type ListJobsApiV1ExtractionJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListJobsApiV1ExtractionJobsGetError = ListJobsApiV1ExtractionJobsGetErrors[keyof ListJobsApiV1ExtractionJobsGetErrors];
type ListJobsApiV1ExtractionJobsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractJob>;
};
type ListJobsApiV1ExtractionJobsGetResponse = ListJobsApiV1ExtractionJobsGetResponses[keyof ListJobsApiV1ExtractionJobsGetResponses];
type RunJobApiV1ExtractionJobsPostData = {
    body: ExtractJobCreate;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs";
};
type RunJobApiV1ExtractionJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunJobApiV1ExtractionJobsPostError = RunJobApiV1ExtractionJobsPostErrors[keyof RunJobApiV1ExtractionJobsPostErrors];
type RunJobApiV1ExtractionJobsPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type RunJobApiV1ExtractionJobsPostResponse = RunJobApiV1ExtractionJobsPostResponses[keyof RunJobApiV1ExtractionJobsPostResponses];
type GetJobApiV1ExtractionJobsJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/jobs/{job_id}";
};
type GetJobApiV1ExtractionJobsJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiV1ExtractionJobsJobIdGetError = GetJobApiV1ExtractionJobsJobIdGetErrors[keyof GetJobApiV1ExtractionJobsJobIdGetErrors];
type GetJobApiV1ExtractionJobsJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type GetJobApiV1ExtractionJobsJobIdGetResponse = GetJobApiV1ExtractionJobsJobIdGetResponses[keyof GetJobApiV1ExtractionJobsJobIdGetResponses];
type RunJobOnFileApiV1ExtractionJobsFilePostData = {
    body: BodyRunJobOnFileApiV1ExtractionJobsFilePost;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs/file";
};
type RunJobOnFileApiV1ExtractionJobsFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunJobOnFileApiV1ExtractionJobsFilePostError = RunJobOnFileApiV1ExtractionJobsFilePostErrors[keyof RunJobOnFileApiV1ExtractionJobsFilePostErrors];
type RunJobOnFileApiV1ExtractionJobsFilePostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type RunJobOnFileApiV1ExtractionJobsFilePostResponse = RunJobOnFileApiV1ExtractionJobsFilePostResponses[keyof RunJobOnFileApiV1ExtractionJobsFilePostResponses];
type RunBatchJobsApiV1ExtractionJobsBatchPostData = {
    body: ExtractJobCreateBatch;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs/batch";
};
type RunBatchJobsApiV1ExtractionJobsBatchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunBatchJobsApiV1ExtractionJobsBatchPostError = RunBatchJobsApiV1ExtractionJobsBatchPostErrors[keyof RunBatchJobsApiV1ExtractionJobsBatchPostErrors];
type RunBatchJobsApiV1ExtractionJobsBatchPostResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractJob>;
};
type RunBatchJobsApiV1ExtractionJobsBatchPostResponse = RunBatchJobsApiV1ExtractionJobsBatchPostResponses[keyof RunBatchJobsApiV1ExtractionJobsBatchPostResponses];
type GetJobResultApiV1ExtractionJobsJobIdResultGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/jobs/{job_id}/result";
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetError = GetJobResultApiV1ExtractionJobsJobIdResultGetErrors[keyof GetJobResultApiV1ExtractionJobsJobIdResultGetErrors];
type GetJobResultApiV1ExtractionJobsJobIdResultGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractResultset;
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetResponse = GetJobResultApiV1ExtractionJobsJobIdResultGetResponses[keyof GetJobResultApiV1ExtractionJobsJobIdResultGetResponses];
type ListExtractRunsApiV1ExtractionRunsGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
        skip?: number;
        limit?: number;
    };
    url: "/api/v1/extraction/runs";
};
type ListExtractRunsApiV1ExtractionRunsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListExtractRunsApiV1ExtractionRunsGetError = ListExtractRunsApiV1ExtractionRunsGetErrors[keyof ListExtractRunsApiV1ExtractionRunsGetErrors];
type ListExtractRunsApiV1ExtractionRunsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedExtractRunsResponse;
};
type ListExtractRunsApiV1ExtractionRunsGetResponse = ListExtractRunsApiV1ExtractionRunsGetResponses[keyof ListExtractRunsApiV1ExtractionRunsGetResponses];
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
    };
    url: "/api/v1/extraction/runs/latest-from-ui";
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError = GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors[keyof GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors];
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun | null;
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse = GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses[keyof GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses];
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/runs/by-job/{job_id}";
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError = GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors[keyof GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors];
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun;
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse = GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses[keyof GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses];
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData = {
    body?: never;
    path: {
        run_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/runs/{run_id}";
};
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError = DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors[keyof DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors];
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetRunApiV1ExtractionRunsRunIdGetData = {
    body?: never;
    path: {
        run_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/runs/{run_id}";
};
type GetRunApiV1ExtractionRunsRunIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRunApiV1ExtractionRunsRunIdGetError = GetRunApiV1ExtractionRunsRunIdGetErrors[keyof GetRunApiV1ExtractionRunsRunIdGetErrors];
type GetRunApiV1ExtractionRunsRunIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun;
};
type GetRunApiV1ExtractionRunsRunIdGetResponse = GetRunApiV1ExtractionRunsRunIdGetResponses[keyof GetRunApiV1ExtractionRunsRunIdGetResponses];
type ExtractStatelessApiV1ExtractionRunPostData = {
    body: ExtractStatelessRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/run";
};
type ExtractStatelessApiV1ExtractionRunPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ExtractStatelessApiV1ExtractionRunPostError = ExtractStatelessApiV1ExtractionRunPostErrors[keyof ExtractStatelessApiV1ExtractionRunPostErrors];
type ExtractStatelessApiV1ExtractionRunPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type ExtractStatelessApiV1ExtractionRunPostResponse = ExtractStatelessApiV1ExtractionRunPostResponses[keyof ExtractStatelessApiV1ExtractionRunPostResponses];
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Whether to include default agents in the results
         */
        include_default?: boolean;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents";
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError = ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors[keyof ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors];
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractAgent>;
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse = ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses[keyof ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses];
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData = {
    body: ExtractAgentCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents";
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError = CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors[keyof CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors];
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse = CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses[keyof CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses];
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData = {
    body: ExtractSchemaValidateRequest;
    path?: never;
    query?: never;
    url: "/api/v1/extraction/extraction-agents/schema/validation";
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError = ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors[keyof ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors];
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractSchemaValidateResponse;
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse = ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses[keyof ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses];
type GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostData = {
    body: ExtractSchemaGenerateRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents/schema/generate";
};
type GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostError = GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostErrors[keyof GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostErrors];
type GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponses = {
    /**
     * Successful Response
     */
    200: ExtractSchemaGenerateResponse;
};
type GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponse = GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponses[keyof GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponses];
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents/by-name/{name}";
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError = GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors[keyof GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors];
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse = GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses[keyof GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses];
type GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents/default";
};
type GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetError = GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetErrors[keyof GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetErrors];
type GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponse = GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponses[keyof GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponses];
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData = {
    body?: never;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError = DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors[keyof DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors];
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData = {
    body?: never;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError = GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors[keyof GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors];
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse = GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses[keyof GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses];
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData = {
    body: ExtractAgentUpdate;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError = UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors[keyof UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors];
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse = UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses[keyof UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses];
type ListApiKeysApiV1BetaApiKeysGetData = {
    body?: never;
    path?: never;
    query?: {
        page_size?: number | null;
        page_token?: string | null;
        name?: string | null;
        project_id?: string | null;
        key_type?: ApiKeyType | null;
    };
    url: "/api/v1/beta/api-keys";
};
type ListApiKeysApiV1BetaApiKeysGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListApiKeysApiV1BetaApiKeysGetError = ListApiKeysApiV1BetaApiKeysGetErrors[keyof ListApiKeysApiV1BetaApiKeysGetErrors];
type ListApiKeysApiV1BetaApiKeysGetResponses = {
    /**
     * Successful Response
     */
    200: ApiKeyQueryResponse;
};
type ListApiKeysApiV1BetaApiKeysGetResponse = ListApiKeysApiV1BetaApiKeysGetResponses[keyof ListApiKeysApiV1BetaApiKeysGetResponses];
type CreateApiKeyApiV1BetaApiKeysPostData = {
    body: ApiKeyCreate;
    path?: never;
    query?: never;
    url: "/api/v1/beta/api-keys";
};
type CreateApiKeyApiV1BetaApiKeysPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateApiKeyApiV1BetaApiKeysPostError = CreateApiKeyApiV1BetaApiKeysPostErrors[keyof CreateApiKeyApiV1BetaApiKeysPostErrors];
type CreateApiKeyApiV1BetaApiKeysPostResponses = {
    /**
     * Successful Response
     */
    201: ApiKey;
};
type CreateApiKeyApiV1BetaApiKeysPostResponse = CreateApiKeyApiV1BetaApiKeysPostResponses[keyof CreateApiKeyApiV1BetaApiKeysPostResponses];
type DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteData = {
    body?: never;
    path: {
        api_key_id: string;
    };
    query?: never;
    url: "/api/v1/beta/api-keys/{api_key_id}";
};
type DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteError = DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteErrors[keyof DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteErrors];
type DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponse = DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponses[keyof DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponses];
type GetApiKeyApiV1BetaApiKeysApiKeyIdGetData = {
    body?: never;
    path: {
        api_key_id: string;
    };
    query?: never;
    url: "/api/v1/beta/api-keys/{api_key_id}";
};
type GetApiKeyApiV1BetaApiKeysApiKeyIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetApiKeyApiV1BetaApiKeysApiKeyIdGetError = GetApiKeyApiV1BetaApiKeysApiKeyIdGetErrors[keyof GetApiKeyApiV1BetaApiKeysApiKeyIdGetErrors];
type GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponses = {
    /**
     * Successful Response
     */
    200: ApiKey;
};
type GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponse = GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponses[keyof GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponses];
type ListBatchesApiV1BetaBatchesGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/batches";
};
type ListBatchesApiV1BetaBatchesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListBatchesApiV1BetaBatchesGetError = ListBatchesApiV1BetaBatchesGetErrors[keyof ListBatchesApiV1BetaBatchesGetErrors];
type ListBatchesApiV1BetaBatchesGetResponses = {
    /**
     * Successful Response
     */
    200: BatchPaginatedList;
};
type ListBatchesApiV1BetaBatchesGetResponse = ListBatchesApiV1BetaBatchesGetResponses[keyof ListBatchesApiV1BetaBatchesGetResponses];
type CreateBatchApiV1BetaBatchesPostData = {
    body: BatchCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/beta/batches";
};
type CreateBatchApiV1BetaBatchesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateBatchApiV1BetaBatchesPostError = CreateBatchApiV1BetaBatchesPostErrors[keyof CreateBatchApiV1BetaBatchesPostErrors];
type CreateBatchApiV1BetaBatchesPostResponses = {
    /**
     * Successful Response
     */
    200: Batch;
};
type CreateBatchApiV1BetaBatchesPostResponse = CreateBatchApiV1BetaBatchesPostResponses[keyof CreateBatchApiV1BetaBatchesPostResponses];
type GetBatchApiV1BetaBatchesBatchIdGetData = {
    body?: never;
    path: {
        batch_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/beta/batches/{batch_id}";
};
type GetBatchApiV1BetaBatchesBatchIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetBatchApiV1BetaBatchesBatchIdGetError = GetBatchApiV1BetaBatchesBatchIdGetErrors[keyof GetBatchApiV1BetaBatchesBatchIdGetErrors];
type GetBatchApiV1BetaBatchesBatchIdGetResponses = {
    /**
     * Successful Response
     */
    200: BatchPublicOutput;
};
type GetBatchApiV1BetaBatchesBatchIdGetResponse = GetBatchApiV1BetaBatchesBatchIdGetResponses[keyof GetBatchApiV1BetaBatchesBatchIdGetResponses];
type DeleteAgentDataApiV1BetaAgentDataItemIdDeleteData = {
    body?: never;
    path: {
        item_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/{item_id}";
};
type DeleteAgentDataApiV1BetaAgentDataItemIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteAgentDataApiV1BetaAgentDataItemIdDeleteError = DeleteAgentDataApiV1BetaAgentDataItemIdDeleteErrors[keyof DeleteAgentDataApiV1BetaAgentDataItemIdDeleteErrors];
type DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};
type DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponse = DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponses[keyof DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponses];
type GetAgentDataApiV1BetaAgentDataItemIdGetData = {
    body?: never;
    path: {
        item_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/{item_id}";
};
type GetAgentDataApiV1BetaAgentDataItemIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetAgentDataApiV1BetaAgentDataItemIdGetError = GetAgentDataApiV1BetaAgentDataItemIdGetErrors[keyof GetAgentDataApiV1BetaAgentDataItemIdGetErrors];
type GetAgentDataApiV1BetaAgentDataItemIdGetResponses = {
    /**
     * Successful Response
     */
    200: AgentData;
};
type GetAgentDataApiV1BetaAgentDataItemIdGetResponse = GetAgentDataApiV1BetaAgentDataItemIdGetResponses[keyof GetAgentDataApiV1BetaAgentDataItemIdGetResponses];
type UpdateAgentDataApiV1BetaAgentDataItemIdPutData = {
    body: AgentDataUpdate;
    path: {
        item_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/{item_id}";
};
type UpdateAgentDataApiV1BetaAgentDataItemIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateAgentDataApiV1BetaAgentDataItemIdPutError = UpdateAgentDataApiV1BetaAgentDataItemIdPutErrors[keyof UpdateAgentDataApiV1BetaAgentDataItemIdPutErrors];
type UpdateAgentDataApiV1BetaAgentDataItemIdPutResponses = {
    /**
     * Successful Response
     */
    200: AgentData;
};
type UpdateAgentDataApiV1BetaAgentDataItemIdPutResponse = UpdateAgentDataApiV1BetaAgentDataItemIdPutResponses[keyof UpdateAgentDataApiV1BetaAgentDataItemIdPutResponses];
type CreateAgentDataApiV1BetaAgentDataPostData = {
    body: AgentDataCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data";
};
type CreateAgentDataApiV1BetaAgentDataPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateAgentDataApiV1BetaAgentDataPostError = CreateAgentDataApiV1BetaAgentDataPostErrors[keyof CreateAgentDataApiV1BetaAgentDataPostErrors];
type CreateAgentDataApiV1BetaAgentDataPostResponses = {
    /**
     * Successful Response
     */
    200: AgentData;
};
type CreateAgentDataApiV1BetaAgentDataPostResponse = CreateAgentDataApiV1BetaAgentDataPostResponses[keyof CreateAgentDataApiV1BetaAgentDataPostResponses];
type SearchAgentDataApiV1BetaAgentDataSearchPostData = {
    body: SearchRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/:search";
};
type SearchAgentDataApiV1BetaAgentDataSearchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SearchAgentDataApiV1BetaAgentDataSearchPostError = SearchAgentDataApiV1BetaAgentDataSearchPostErrors[keyof SearchAgentDataApiV1BetaAgentDataSearchPostErrors];
type SearchAgentDataApiV1BetaAgentDataSearchPostResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseAgentData;
};
type SearchAgentDataApiV1BetaAgentDataSearchPostResponse = SearchAgentDataApiV1BetaAgentDataSearchPostResponses[keyof SearchAgentDataApiV1BetaAgentDataSearchPostResponses];
type AggregateAgentDataApiV1BetaAgentDataAggregatePostData = {
    body: AggregateRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/:aggregate";
};
type AggregateAgentDataApiV1BetaAgentDataAggregatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AggregateAgentDataApiV1BetaAgentDataAggregatePostError = AggregateAgentDataApiV1BetaAgentDataAggregatePostErrors[keyof AggregateAgentDataApiV1BetaAgentDataAggregatePostErrors];
type AggregateAgentDataApiV1BetaAgentDataAggregatePostResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseAggregateGroup;
};
type AggregateAgentDataApiV1BetaAgentDataAggregatePostResponse = AggregateAgentDataApiV1BetaAgentDataAggregatePostResponses[keyof AggregateAgentDataApiV1BetaAgentDataAggregatePostResponses];
type DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostData = {
    body: DeleteRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/agent-data/:delete";
};
type DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostError = DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostErrors[keyof DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostErrors];
type DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponses = {
    /**
     * Successful Response
     */
    200: DeleteResponse;
};
type DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponse = DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponses[keyof DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponses];
type ListQuotaConfigurationsApiV1BetaQuotaManagementGetData = {
    body?: never;
    path?: never;
    query: {
        source_type: "organization";
        source_id: string;
        page?: number;
        page_size?: number;
    };
    url: "/api/v1/beta/quota-management";
};
type ListQuotaConfigurationsApiV1BetaQuotaManagementGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListQuotaConfigurationsApiV1BetaQuotaManagementGetError = ListQuotaConfigurationsApiV1BetaQuotaManagementGetErrors[keyof ListQuotaConfigurationsApiV1BetaQuotaManagementGetErrors];
type ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseQuotaConfiguration;
};
type ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponse = ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponses[keyof ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponses];
type CreateFileApiV1BetaFilesPostData = {
    body: FileCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/files";
};
type CreateFileApiV1BetaFilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateFileApiV1BetaFilesPostError = CreateFileApiV1BetaFilesPostErrors[keyof CreateFileApiV1BetaFilesPostErrors];
type CreateFileApiV1BetaFilesPostResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type CreateFileApiV1BetaFilesPostResponse = CreateFileApiV1BetaFilesPostResponses[keyof CreateFileApiV1BetaFilesPostResponses];
type UpsertFileApiV1BetaFilesPutData = {
    body: FileCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/files";
};
type UpsertFileApiV1BetaFilesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertFileApiV1BetaFilesPutError = UpsertFileApiV1BetaFilesPutErrors[keyof UpsertFileApiV1BetaFilesPutErrors];
type UpsertFileApiV1BetaFilesPutResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type UpsertFileApiV1BetaFilesPutResponse = UpsertFileApiV1BetaFilesPutResponses[keyof UpsertFileApiV1BetaFilesPutResponses];
type QueryFilesApiV1BetaFilesQueryPostData = {
    body: FileQueryRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/files/query";
};
type QueryFilesApiV1BetaFilesQueryPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type QueryFilesApiV1BetaFilesQueryPostError = QueryFilesApiV1BetaFilesQueryPostErrors[keyof QueryFilesApiV1BetaFilesQueryPostErrors];
type QueryFilesApiV1BetaFilesQueryPostResponses = {
    /**
     * Successful Response
     */
    200: FileQueryResponse;
};
type QueryFilesApiV1BetaFilesQueryPostResponse = QueryFilesApiV1BetaFilesQueryPostResponses[keyof QueryFilesApiV1BetaFilesQueryPostResponses];
type DeleteFileApiV1BetaFilesFileIdDeleteData = {
    body?: never;
    path: {
        file_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/files/{file_id}";
};
type DeleteFileApiV1BetaFilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteFileApiV1BetaFilesFileIdDeleteError = DeleteFileApiV1BetaFilesFileIdDeleteErrors[keyof DeleteFileApiV1BetaFilesFileIdDeleteErrors];
type DeleteFileApiV1BetaFilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteFileApiV1BetaFilesFileIdDeleteResponse = DeleteFileApiV1BetaFilesFileIdDeleteResponses[keyof DeleteFileApiV1BetaFilesFileIdDeleteResponses];
type ListParseConfigurationsApiV1BetaParseConfigurationsGetData = {
    body?: never;
    path?: never;
    query?: {
        page_size?: number | null;
        page_token?: string | null;
        name?: string | null;
        creator?: string | null;
        version?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations";
};
type ListParseConfigurationsApiV1BetaParseConfigurationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListParseConfigurationsApiV1BetaParseConfigurationsGetError = ListParseConfigurationsApiV1BetaParseConfigurationsGetErrors[keyof ListParseConfigurationsApiV1BetaParseConfigurationsGetErrors];
type ListParseConfigurationsApiV1BetaParseConfigurationsGetResponses = {
    /**
     * Successful Response
     */
    200: ParseConfigurationQueryResponse;
};
type ListParseConfigurationsApiV1BetaParseConfigurationsGetResponse = ListParseConfigurationsApiV1BetaParseConfigurationsGetResponses[keyof ListParseConfigurationsApiV1BetaParseConfigurationsGetResponses];
type CreateParseConfigurationApiV1BetaParseConfigurationsPostData = {
    body: ParseConfigurationCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations";
};
type CreateParseConfigurationApiV1BetaParseConfigurationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateParseConfigurationApiV1BetaParseConfigurationsPostError = CreateParseConfigurationApiV1BetaParseConfigurationsPostErrors[keyof CreateParseConfigurationApiV1BetaParseConfigurationsPostErrors];
type CreateParseConfigurationApiV1BetaParseConfigurationsPostResponses = {
    /**
     * Successful Response
     */
    201: ParseConfiguration;
};
type CreateParseConfigurationApiV1BetaParseConfigurationsPostResponse = CreateParseConfigurationApiV1BetaParseConfigurationsPostResponses[keyof CreateParseConfigurationApiV1BetaParseConfigurationsPostResponses];
type UpsertParseConfigurationApiV1BetaParseConfigurationsPutData = {
    body: ParseConfigurationCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations";
};
type UpsertParseConfigurationApiV1BetaParseConfigurationsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertParseConfigurationApiV1BetaParseConfigurationsPutError = UpsertParseConfigurationApiV1BetaParseConfigurationsPutErrors[keyof UpsertParseConfigurationApiV1BetaParseConfigurationsPutErrors];
type UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponses = {
    /**
     * Successful Response
     */
    200: ParseConfiguration;
};
type UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponse = UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponses[keyof UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponses];
type DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteData = {
    body?: never;
    path: {
        config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations/{config_id}";
};
type DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteError = DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteErrors[keyof DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteErrors];
type DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponse = DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponses[keyof DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponses];
type GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetData = {
    body?: never;
    path: {
        config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations/{config_id}";
};
type GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetError = GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetErrors[keyof GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetErrors];
type GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponses = {
    /**
     * Successful Response
     */
    200: ParseConfiguration;
};
type GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponse = GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponses[keyof GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponses];
type UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutData = {
    body: ParseConfigurationUpdate;
    path: {
        config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations/{config_id}";
};
type UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutError = UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutErrors[keyof UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutErrors];
type UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponses = {
    /**
     * Successful Response
     */
    200: ParseConfiguration;
};
type UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponse = UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponses[keyof UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponses];
type QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostData = {
    body: ParseConfigurationQueryRequest;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations/query";
};
type QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostError = QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostErrors[keyof QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostErrors];
type QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponses = {
    /**
     * Successful Response
     */
    200: ParseConfigurationQueryResponse;
};
type QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponse = QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponses[keyof QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponses];
type GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetData = {
    body?: never;
    path?: never;
    query?: {
        creator?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/parse-configurations/latest";
};
type GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetError = GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetErrors[keyof GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetErrors];
type GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponses = {
    /**
     * Successful Response
     */
    200: ParseConfiguration | null;
};
type GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponse = GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponses[keyof GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponses];
type ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetData = {
    body?: never;
    path?: never;
    query?: {
        include_results?: boolean;
        project_id?: string | null;
        organization_id?: string | null;
        page_size?: number | null;
        page_token?: string | null;
    };
    url: "/api/v1/beta/spreadsheet/jobs";
};
type ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetError = ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetErrors[keyof ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetErrors];
type ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedResponseSpreadsheetJob;
};
type ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponse = ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponses[keyof ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponses];
type CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostData = {
    body: SpreadsheetJobCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/spreadsheet/jobs";
};
type CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostError = CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostErrors[keyof CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostErrors];
type CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponses = {
    /**
     * Successful Response
     */
    200: SpreadsheetJob;
};
type CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponse = CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponses[keyof CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponses];
type GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetData = {
    body?: never;
    path: {
        spreadsheet_job_id: string;
    };
    query?: {
        include_results?: boolean;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/spreadsheet/jobs/{spreadsheet_job_id}";
};
type GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetError = GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetErrors[keyof GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetErrors];
type GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: SpreadsheetJob;
};
type GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponse = GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponses[keyof GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponses];
type GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetData = {
    body?: never;
    path: {
        spreadsheet_job_id: string;
        table_id: number;
    };
    query?: {
        expires_at_seconds?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/spreadsheet/jobs/{spreadsheet_job_id}/tables/{table_id}/result";
};
type GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetError = GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetErrors[keyof GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetErrors];
type GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponse = GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponses[keyof GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponses];
type UploadFileV2ApiV2Alpha1ParseUploadPostData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v2alpha1/parse/upload";
};
type UploadFileV2ApiV2Alpha1ParseUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileV2ApiV2Alpha1ParseUploadPostError = UploadFileV2ApiV2Alpha1ParseUploadPostErrors[keyof UploadFileV2ApiV2Alpha1ParseUploadPostErrors];
type UploadFileV2ApiV2Alpha1ParseUploadPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type UploadFileV2ApiV2Alpha1ParseUploadPostResponse = UploadFileV2ApiV2Alpha1ParseUploadPostResponses[keyof UploadFileV2ApiV2Alpha1ParseUploadPostResponses];
type GetJobImageResultApiParsingJobJobIdResultImageNameGetData = {
    body?: never;
    path: {
        job_id: string;
        name: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/image/{name}";
};
type GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobImageResultApiParsingJobJobIdResultImageNameGetError = GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors[keyof GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors];
type GetJobImageResultApiParsingJobJobIdResultImageNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/parsing/supported_file_extensions";
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<LlamaParseSupportedFileExtensions>;
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse = GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses[keyof GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses];
type ScreenshotApiParsingScreenshotPostData = {
    body?: BodyScreenshotApiParsingScreenshotPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/parsing/screenshot";
};
type ScreenshotApiParsingScreenshotPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ScreenshotApiParsingScreenshotPostError = ScreenshotApiParsingScreenshotPostErrors[keyof ScreenshotApiParsingScreenshotPostErrors];
type ScreenshotApiParsingScreenshotPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type ScreenshotApiParsingScreenshotPostResponse = ScreenshotApiParsingScreenshotPostResponses[keyof ScreenshotApiParsingScreenshotPostResponses];
type UploadFileApiParsingUploadPostData = {
    body?: BodyUploadFileApiParsingUploadPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/parsing/upload";
};
type UploadFileApiParsingUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiParsingUploadPostError = UploadFileApiParsingUploadPostErrors[keyof UploadFileApiParsingUploadPostErrors];
type UploadFileApiParsingUploadPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type UploadFileApiParsingUploadPostResponse = UploadFileApiParsingUploadPostResponses[keyof UploadFileApiParsingUploadPostResponses];
type GetJobApiParsingJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}";
};
type GetJobApiParsingJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiParsingJobJobIdGetError = GetJobApiParsingJobJobIdGetErrors[keyof GetJobApiParsingJobJobIdGetErrors];
type GetJobApiParsingJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type GetJobApiParsingJobJobIdGetResponse = GetJobApiParsingJobJobIdGetResponses[keyof GetJobApiParsingJobJobIdGetResponses];
type GetJobParametersApiParsingJobJobIdParametersGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/parameters";
};
type GetJobParametersApiParsingJobJobIdParametersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobParametersApiParsingJobJobIdParametersGetError = GetJobParametersApiParsingJobJobIdParametersGetErrors[keyof GetJobParametersApiParsingJobJobIdParametersGetErrors];
type GetJobParametersApiParsingJobJobIdParametersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/details";
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetError = GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors[keyof GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors];
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/text";
};
type GetJobTextResultApiParsingJobJobIdResultTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetError = GetJobTextResultApiParsingJobJobIdResultTextGetErrors[keyof GetJobTextResultApiParsingJobJobIdResultTextGetErrors];
type GetJobTextResultApiParsingJobJobIdResultTextGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobTextResult;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetResponse = GetJobTextResultApiParsingJobJobIdResultTextGetResponses[keyof GetJobTextResultApiParsingJobJobIdResultTextGetResponses];
type GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/text";
};
type GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetError = GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetErrors[keyof GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetErrors];
type GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/pdf";
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetError = GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors[keyof GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors];
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/pdf";
};
type GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetError = GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetErrors[keyof GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetErrors];
type GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/structured";
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError = GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors[keyof GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors];
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobStructuredResult;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse = GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses[keyof GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses];
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/structured";
};
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError = GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors[keyof GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors];
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/xlsx";
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError = GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors[keyof GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors];
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/xlsx";
};
type GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetError = GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetErrors[keyof GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetErrors];
type GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/markdown";
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetError = GetJobResultApiParsingJobJobIdResultMarkdownGetErrors[keyof GetJobResultApiParsingJobJobIdResultMarkdownGetErrors];
type GetJobResultApiParsingJobJobIdResultMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobMarkdownResult;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetResponse = GetJobResultApiParsingJobJobIdResultMarkdownGetResponses[keyof GetJobResultApiParsingJobJobIdResultMarkdownGetResponses];
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/markdown";
};
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError = GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors[keyof GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors];
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/json";
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetError = GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors[keyof GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors];
type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobJsonResult;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse = GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses[keyof GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses];
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/json";
};
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError = GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors[keyof GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors];
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingHistoryResultApiParsingHistoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/parsing/history";
};
type GetParsingHistoryResultApiParsingHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingHistoryResultApiParsingHistoryGetError = GetParsingHistoryResultApiParsingHistoryGetErrors[keyof GetParsingHistoryResultApiParsingHistoryGetErrors];
type GetParsingHistoryResultApiParsingHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ParsingHistoryItem>;
};
type GetParsingHistoryResultApiParsingHistoryGetResponse = GetParsingHistoryResultApiParsingHistoryGetResponses[keyof GetParsingHistoryResultApiParsingHistoryGetResponses];
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData = {
    body?: never;
    path: {
        job_id: string;
        filename: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/read/{filename}";
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError = GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors[keyof GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors];
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse = GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses[keyof GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses];
type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

declare const client: _hey_api_client_fetch.Client;

type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options$1<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
/**
 * List Deployments
 * List all deployments for a project.
 */
declare const listDeploymentsApiV1ProjectsProjectIdAgentsGet: <ThrowOnError extends boolean = false>(options: Options<ListDeploymentsApiV1ProjectsProjectIdAgentsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<AgentDeploymentList, HttpValidationError, ThrowOnError>;
/**
 * Sync Deployments
 * Sync deployments for a project.
 */
declare const syncDeploymentsApiV1ProjectsProjectIdAgentsSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<AgentDeploymentList, HttpValidationError, ThrowOnError>;
/**
 * List Keys
 * List API Keys for a user, filtered by type.
 */
declare const listKeysApiV1ApiKeysGet: <ThrowOnError extends boolean = false>(options?: Options<ListKeysApiV1ApiKeysGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey[], HttpValidationError, ThrowOnError>;
/**
 * Generate Key
 * Generate a new API Key.
 */
declare const generateKeyApiV1ApiKeysPost: <ThrowOnError extends boolean = false>(options: Options<GenerateKeyApiV1ApiKeysPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey, HttpValidationError, ThrowOnError>;
/**
 * Delete Api Key
 * Delete an API Key by ID.
 */
declare const deleteApiKeyApiV1ApiKeysApiKeyIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Validate Embedding Connection
 * Validate an embedding connection.
 *
 * Args:
 * embedding_config: The embedding configuration to validate.
 * pipeline_id: If provided, the embedding connection will be validated for the pipeline.
 * user: The user to validate the embedding connection for.
 * db: The database session.
 *
 * Returns:
 * A BaseConnectionValidation object indicating the result of the validation.
 */
declare const validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * Validate Data Source Connection
 * Validate a data source connection.
 */
declare const validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * Validate Data Sink Connection
 * Validate a data sink connection.
 */
declare const validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * List Data Sinks
 * List data sinks for a given project.
 */
declare const listDataSinksApiV1DataSinksGet: <ThrowOnError extends boolean = false>(options?: Options<ListDataSinksApiV1DataSinksGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Data Sink
 * Create a new data sink.
 */
declare const createDataSinkApiV1DataSinksPost: <ThrowOnError extends boolean = false>(options: Options<CreateDataSinkApiV1DataSinksPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Data Sink
 * Upserts a data sink.
 * Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.
 */
declare const upsertDataSinkApiV1DataSinksPut: <ThrowOnError extends boolean = false>(options: Options<UpsertDataSinkApiV1DataSinksPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Data Sink
 * Delete a data sink by ID.
 */
declare const deleteDataSinkApiV1DataSinksDataSinkIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Data Sink
 * Get a data sink by ID.
 */
declare const getDataSinkApiV1DataSinksDataSinkIdGet: <ThrowOnError extends boolean = false>(options: Options<GetDataSinkApiV1DataSinksDataSinkIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Data Sink
 * Update a data sink by ID.
 */
declare const updateDataSinkApiV1DataSinksDataSinkIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateDataSinkApiV1DataSinksDataSinkIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * List Data Sources
 * List data sources for a given project.
 * If project_id is not provided, uses the default project.
 */
declare const listDataSourcesApiV1DataSourcesGet: <ThrowOnError extends boolean = false>(options?: Options<ListDataSourcesApiV1DataSourcesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Data Source
 * Create a new data source.
 */
declare const createDataSourceApiV1DataSourcesPost: <ThrowOnError extends boolean = false>(options: Options<CreateDataSourceApiV1DataSourcesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Data Source
 * Upserts a data source.
 * Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.
 */
declare const upsertDataSourceApiV1DataSourcesPut: <ThrowOnError extends boolean = false>(options: Options<UpsertDataSourceApiV1DataSourcesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Data Source
 * Delete a data source by ID.
 */
declare const deleteDataSourceApiV1DataSourcesDataSourceIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Data Source
 * Get a data source by ID.
 */
declare const getDataSourceApiV1DataSourcesDataSourceIdGet: <ThrowOnError extends boolean = false>(options: Options<GetDataSourceApiV1DataSourcesDataSourceIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Data Source
 * Update a data source by ID.
 */
declare const updateDataSourceApiV1DataSourcesDataSourceIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateDataSourceApiV1DataSourcesDataSourceIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * List Embedding Model Configs
 */
declare const listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet: <ThrowOnError extends boolean = false>(options?: Options<ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig[], HttpValidationError, ThrowOnError>;
/**
 * Create a new Embedding Model Configuration
 * Create a new embedding model configuration within a specified project.
 */
declare const createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost: <ThrowOnError extends boolean = false>(options: Options<CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * Upsert Embedding Model Config
 * Upserts an embedding model config.
 * Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.
 */
declare const upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * Delete Embedding Model Config
 * Delete an embedding model config by ID.
 */
declare const deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Embedding Model Config
 * Update an embedding model config by ID.
 */
declare const updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * List Organizations
 * List organizations for a user.
 */
declare const listOrganizationsApiV1OrganizationsGet: <ThrowOnError extends boolean = false>(options?: Options<ListOrganizationsApiV1OrganizationsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization[], HttpValidationError, ThrowOnError>;
/**
 * Create Organization
 * Create a new organization.
 */
declare const createOrganizationApiV1OrganizationsPost: <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationApiV1OrganizationsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Upsert Organization
 * Upsert a new organization.
 */
declare const upsertOrganizationApiV1OrganizationsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertOrganizationApiV1OrganizationsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Get Default Organization
 * Get the default organization for the user.
 */
declare const getDefaultOrganizationApiV1OrganizationsDefaultGet: <ThrowOnError extends boolean = false>(options?: Options<GetDefaultOrganizationApiV1OrganizationsDefaultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Set Default Organization
 * Set the default organization for the user.
 */
declare const setDefaultOrganizationApiV1OrganizationsDefaultPut: <ThrowOnError extends boolean = false>(options: Options<SetDefaultOrganizationApiV1OrganizationsDefaultPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Delete Organization
 * Delete an organization by ID.
 */
declare const deleteOrganizationApiV1OrganizationsOrganizationIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Organization
 * Get an organization by ID.
 */
declare const getOrganizationApiV1OrganizationsOrganizationIdGet: <ThrowOnError extends boolean = false>(options: Options<GetOrganizationApiV1OrganizationsOrganizationIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Update Organization
 * Update an existing organization.
 */
declare const updateOrganizationApiV1OrganizationsOrganizationIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationApiV1OrganizationsOrganizationIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Get Organization Usage
 * Get usage for a specific organization.
 */
declare const getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet: <ThrowOnError extends boolean = false>(options: Options<GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UsageAndPlan, HttpValidationError, ThrowOnError>;
/**
 * List Organization Users
 * Get all users in an organization.
 */
declare const listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet: <ThrowOnError extends boolean = false>(options: Options<ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganization[], HttpValidationError, ThrowOnError>;
/**
 * Add Users To Organization
 * Add a user to an organization.
 */
declare const addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut: <ThrowOnError extends boolean = false>(options: Options<AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganization[], HttpValidationError, ThrowOnError>;
/**
 * Remove Users From Organization
 * Remove users from an organization.
 */
declare const removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete: <ThrowOnError extends boolean = false>(options: Options<RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * Batch Remove Users From Organization
 * Remove a batch of users from an organization.
 */
declare const batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut: <ThrowOnError extends boolean = false>(options: Options<BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * List Roles
 * List all roles in an organization.
 */
declare const listRolesApiV1OrganizationsOrganizationIdRolesGet: <ThrowOnError extends boolean = false>(options: Options<ListRolesApiV1OrganizationsOrganizationIdRolesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Role[], HttpValidationError, ThrowOnError>;
/**
 * Get User Role
 * Get the role of a user in an organization.
 */
declare const getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet: <ThrowOnError extends boolean = false>(options: Options<GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganizationRole | null, HttpValidationError, ThrowOnError>;
/**
 * Assign Role To User In Organization
 * Assign a role to a user in an organization.
 */
declare const assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut: <ThrowOnError extends boolean = false>(options: Options<AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganizationRole, HttpValidationError, ThrowOnError>;
/**
 * List Projects By User
 * List all projects for a user in an organization.
 */
declare const listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet: <ThrowOnError extends boolean = false>(options: Options<ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project[], HttpValidationError, ThrowOnError>;
/**
 * Add User To Project
 * Add a user to a project.
 */
declare const addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut: <ThrowOnError extends boolean = false>(options: Options<AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Remove User From Project
 * Remove a user from a project.
 */
declare const removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete: <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Projects
 * List projects or get one by name
 */
declare const listProjectsApiV1ProjectsGet: <ThrowOnError extends boolean = false>(options?: Options<ListProjectsApiV1ProjectsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project[], HttpValidationError, ThrowOnError>;
/**
 * Create Project
 * Create a new project.
 */
declare const createProjectApiV1ProjectsPost: <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Upsert Project
 * Upsert a project.
 * Updates if a project with the same name already exists. Otherwise, creates a new project.
 */
declare const upsertProjectApiV1ProjectsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertProjectApiV1ProjectsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Delete Project
 * Delete a project by ID.
 */
declare const deleteProjectApiV1ProjectsProjectIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteProjectApiV1ProjectsProjectIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Project
 * Get a project by ID.
 */
declare const getProjectApiV1ProjectsProjectIdGet: <ThrowOnError extends boolean = false>(options: Options<GetProjectApiV1ProjectsProjectIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Update Existing Project
 * Update an existing project.
 */
declare const updateExistingProjectApiV1ProjectsProjectIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExistingProjectApiV1ProjectsProjectIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Get Current Project
 * Get the current project.
 */
declare const getCurrentProjectApiV1ProjectsCurrentGet: <ThrowOnError extends boolean = false>(options?: Options<GetCurrentProjectApiV1ProjectsCurrentGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Get Project Usage
 * Get usage for a project
 */
declare const getProjectUsageApiV1ProjectsProjectIdUsageGet: <ThrowOnError extends boolean = false>(options: Options<GetProjectUsageApiV1ProjectsProjectIdUsageGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UsageAndPlan, HttpValidationError, ThrowOnError>;
/**
 * Delete File
 * Delete the file from S3.
 */
declare const deleteFileApiV1FilesIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiV1FilesIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get File
 * Read File metadata objects.
 */
declare const getFileApiV1FilesIdGet: <ThrowOnError extends boolean = false>(options: Options<GetFileApiV1FilesIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * List Files
 * Read File metadata objects.
 */
declare const listFilesApiV1FilesGet: <ThrowOnError extends boolean = false>(options?: Options<ListFilesApiV1FilesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File[], HttpValidationError, ThrowOnError>;
/**
 * Upload File
 * Upload a file to S3.
 */
declare const uploadFileApiV1FilesPost: <ThrowOnError extends boolean = false>(options: Options<UploadFileApiV1FilesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Create a presigned url for uploading a file.
 *
 * The presigned url is valid for a limited time period, after which it will expire.
 * Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.
 */
declare const generatePresignedUrlApiV1FilesPut: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiV1FilesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<FileIdPresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Sync Files
 * Sync Files API against file contents uploaded via S3 presigned urls.
 */
declare const syncFilesApiV1FilesSyncPut: <ThrowOnError extends boolean = false>(options?: Options<SyncFilesApiV1FilesSyncPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File[], HttpValidationError, ThrowOnError>;
/**
 * Upload File From Url
 * Upload a file to the project from a URL.
 *
 * If name is ommitted in the request payload, the file name will be
 * extracted from the response Content-Disposition header if available
 * or otherwise it will be derived from the URL path.
 *
 * If providing the name in the request payload, always suffix the
 * file extension in the name if available.
 */
declare const uploadFileFromUrlApiV1FilesUploadFromUrlPut: <ThrowOnError extends boolean = false>(options: Options<UploadFileFromUrlApiV1FilesUploadFromUrlPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Read File Content
 * Returns a presigned url to read the file content.
 */
declare const readFileContentApiV1FilesIdContentGet: <ThrowOnError extends boolean = false>(options: Options<ReadFileContentApiV1FilesIdContentGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * List File Page Screenshots
 * List metadata for all screenshots of pages from a file.
 */
declare const listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageScreenshotMetadata[], HttpValidationError, ThrowOnError>;
/**
 * Get File Page Screenshot
 * Get screenshot of a page from a file.
 */
declare const getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet: <ThrowOnError extends boolean = false>(options: Options<GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List File Pages Figures
 */
declare const listFilePagesFiguresApiV1FilesIdPageFiguresGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePagesFiguresApiV1FilesIdPageFiguresGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageFigureMetadata[], HttpValidationError, ThrowOnError>;
/**
 * List File Page Figures
 */
declare const listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageFigureMetadata[], HttpValidationError, ThrowOnError>;
/**
 * Get File Page Figure
 */
declare const getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet: <ThrowOnError extends boolean = false>(options: Options<GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Generate File Page Screenshot Presigned Url
 * Returns a presigned url to read a page screenshot.
 *
 * The presigned url is valid for a limited time period, after which it will expire.
 * Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.
 */
declare const generateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPost: <ThrowOnError extends boolean = false>(options: Options<GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Generate File Page Figure Presigned Url
 * Returns a presigned url to read a page figure.
 *
 * The presigned url is valid for a limited time period, after which it will expire.
 * Be careful on accidental exposure of the presigned url, as it may allow unauthorized access to the file before the expiration.
 */
declare const generateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPost: <ThrowOnError extends boolean = false>(options: Options<GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Search Pipelines
 * Search for pipelines by various parameters.
 */
declare const searchPipelinesApiV1PipelinesGet: <ThrowOnError extends boolean = false>(options?: Options<SearchPipelinesApiV1PipelinesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Pipeline
 * Create a new pipeline for a project.
 */
declare const createPipelineApiV1PipelinesPost: <ThrowOnError extends boolean = false>(options: Options<CreatePipelineApiV1PipelinesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Pipeline
 * Upsert a pipeline for a project.
 * Updates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.
 */
declare const upsertPipelineApiV1PipelinesPut: <ThrowOnError extends boolean = false>(options: Options<UpsertPipelineApiV1PipelinesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline
 * Delete a pipeline by ID.
 */
declare const deletePipelineApiV1PipelinesPipelineIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineApiV1PipelinesPipelineIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline
 * Get a pipeline by ID for a given project.
 */
declare const getPipelineApiV1PipelinesPipelineIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineApiV1PipelinesPipelineIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Existing Pipeline
 * Update an existing pipeline for a project.
 */
declare const updateExistingPipelineApiV1PipelinesPipelineIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExistingPipelineApiV1PipelinesPipelineIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Status
 * Get the status of a pipeline by ID.
 */
declare const getPipelineStatusApiV1PipelinesPipelineIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Sync Pipeline
 * Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.
 */
declare const syncPipelineApiV1PipelinesPipelineIdSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncPipelineApiV1PipelinesPipelineIdSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Cancel Pipeline Sync
 */
declare const cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost: <ThrowOnError extends boolean = false>(options: Options<CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Force Delete Pipeline
 */
declare const forceDeletePipelineApiV1PipelinesPipelineIdForceDeletePost: <ThrowOnError extends boolean = false>(options: Options<ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Copy Pipeline
 * Copy a pipeline by ID.
 */
declare const copyPipelineApiV1PipelinesPipelineIdCopyPost: <ThrowOnError extends boolean = false>(options: Options<CopyPipelineApiV1PipelinesPipelineIdCopyPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * List Pipeline Files
 * Get files for a pipeline.
 */
declare const listPipelineFilesApiV1PipelinesPipelineIdFilesGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile[], HttpValidationError, ThrowOnError>;
/**
 * Add Files To Pipeline Api
 * Add files to a pipeline.
 */
declare const addFilesToPipelineApiApiV1PipelinesPipelineIdFilesPut: <ThrowOnError extends boolean = false>(options: Options<AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile[], HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * List Pipeline Files2
 * Get files for a pipeline.
 *
 * Args:
 * pipeline_id: ID of the pipeline
 * data_source_id: Optional filter by data source ID
 * only_manually_uploaded: Filter for only manually uploaded files
 * file_name_contains: Optional filter by file name (substring match)
 * limit: Limit number of results
 * offset: Offset for pagination
 * order_by: Field to order by
 */
declare const listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get: <ThrowOnError extends boolean = false>(options: Options<ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedListPipelineFilesResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline File Status Counts
 * Get files for a pipeline.
 */
declare const getPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<FileCountByStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline File Status
 * Get status of a file for a pipeline.
 */
declare const getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline File
 * Delete a file from a pipeline.
 */
declare const deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Pipeline File
 * Update a file for a pipeline.
 */
declare const updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Files Metadata
 * Delete metadata for all files in a pipeline.
 */
declare const deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Import Pipeline Metadata
 * Import metadata for a pipeline.
 */
declare const importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut: <ThrowOnError extends boolean = false>(options: Options<ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: string;
}, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Data Sources
 * Get data sources for a pipeline.
 */
declare const listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Add Data Sources To Pipeline
 * Add data sources to a pipeline.
 */
declare const addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut: <ThrowOnError extends boolean = false>(options: Options<AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Data Source
 * Delete a data source from a pipeline.
 */
declare const deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Pipeline Data Source
 * Update the configuration of a data source in a pipeline.
 */
declare const updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Sync Pipeline Data Source
 * Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.
 */
declare const syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Data Source Status
 * Get the status of a data source for a pipeline.
 */
declare const getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Run Search
 * Get retrieval results for a managed pipeline and a query
 */
declare const runSearchApiV1PipelinesPipelineIdRetrievePost: <ThrowOnError extends boolean = false>(options: Options<RunSearchApiV1PipelinesPipelineIdRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<RetrieveResults, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Jobs
 * Get jobs for a pipeline.
 */
declare const listPipelineJobsApiV1PipelinesPipelineIdJobsGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDeployment[], HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Job
 * Get a job for a pipeline.
 */
declare const getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDeployment, HttpValidationError, ThrowOnError>;
/**
 * Get Playground Session
 * Get a playground session for a user and pipeline.
 */
declare const getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet: <ThrowOnError extends boolean = false>(options: Options<GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PlaygroundSession, HttpValidationError, ThrowOnError>;
/**
 * Chat
 * Make a retrieval query + chat completion for a managed pipeline.
 */
declare const chatApiV1PipelinesPipelineIdChatPost: <ThrowOnError extends boolean = false>(options: Options<ChatApiV1PipelinesPipelineIdChatPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
declare const listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Create Batch Pipeline Documents
 * Batch create documents for a pipeline.
 */
declare const createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost: <ThrowOnError extends boolean = false>(options: Options<CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Upsert Batch Pipeline Documents
 * Batch create or update a document for a pipeline.
 */
declare const upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Paginated List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
declare const paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet: <ThrowOnError extends boolean = false>(options: Options<PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedListCloudDocumentsResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Document
 * Delete a document from a pipeline.
 * Initiates an async job that will:
 * 1. Delete vectors from the vector store
 * 2. Delete the document from MongoDB after vectors are successfully deleted
 */
declare const deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Document
 * Return a single document for a pipeline.
 */
declare const getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Document Status
 * Return a single document for a pipeline.
 */
declare const getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Sync Pipeline Document
 * Sync a specific document for a pipeline.
 */
declare const syncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Document Chunks
 * Return a list of chunks for a pipeline document.
 */
declare const listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<TextNode[], HttpValidationError, ThrowOnError>;
/**
 * Force Sync All Pipeline Documents
 * Force sync all documents in a pipeline by batching document ingestion jobs.
 *
 * - Iterates all document refs for the pipeline
 * - Enqueues document ingestion jobs in batches of `batch_size`
 */
declare const forceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPost: <ThrowOnError extends boolean = false>(options: Options<ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Retrievers
 * List Retrievers for a project.
 */
declare const listRetrieversApiV1RetrieversGet: <ThrowOnError extends boolean = false>(options?: Options<ListRetrieversApiV1RetrieversGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever[], HttpValidationError, ThrowOnError>;
/**
 * Create Retriever
 * Create a new Retriever.
 */
declare const createRetrieverApiV1RetrieversPost: <ThrowOnError extends boolean = false>(options: Options<CreateRetrieverApiV1RetrieversPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Upsert Retriever
 * Upsert a new Retriever.
 */
declare const upsertRetrieverApiV1RetrieversPut: <ThrowOnError extends boolean = false>(options: Options<UpsertRetrieverApiV1RetrieversPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Delete Retriever
 * Delete a Retriever by ID.
 */
declare const deleteRetrieverApiV1RetrieversRetrieverIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Retriever
 * Get a Retriever by ID.
 */
declare const getRetrieverApiV1RetrieversRetrieverIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRetrieverApiV1RetrieversRetrieverIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Update Retriever
 * Update an existing Retriever.
 */
declare const updateRetrieverApiV1RetrieversRetrieverIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateRetrieverApiV1RetrieversRetrieverIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Retrieve
 * Retrieve data using a Retriever.
 */
declare const retrieveApiV1RetrieversRetrieverIdRetrievePost: <ThrowOnError extends boolean = false>(options: Options<RetrieveApiV1RetrieversRetrieverIdRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CompositeRetrievalResult, HttpValidationError, ThrowOnError>;
/**
 * Direct Retrieve
 * Retrieve data using specified pipelines without creating a persistent retriever.
 */
declare const directRetrieveApiV1RetrieversRetrievePost: <ThrowOnError extends boolean = false>(options: Options<DirectRetrieveApiV1RetrieversRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CompositeRetrievalResult, HttpValidationError, ThrowOnError>;
/**
 * Get Jobs
 * Get jobs for a project.
 *
 * Note:
 * The include_usage_metrics parameter is deprecated and will be removed in a future version.
 * We've moved to usage v2 and this parameter will no longer return meaningful data.
 */
declare const getJobsApiV1JobsGet: <ThrowOnError extends boolean = false>(options?: Options<GetJobsApiV1JobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedJobsHistoryWithMetrics, HttpValidationError, ThrowOnError>;
/**
 * List Supported Models
 * List supported models.
 */
declare const listSupportedModelsApiV1EvalsModelsGet: <ThrowOnError extends boolean = false>(options?: Options<ListSupportedModelsApiV1EvalsModelsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<SupportedLlmModel[], HttpValidationError, ThrowOnError>;
/**
 * Get Job Image Result
 * Get a job by id
 */
declare const getJobImageResultApiV1ParsingJobJobIdResultImageNameGet: <ThrowOnError extends boolean = false>(options: Options<GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
declare const getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet: <ThrowOnError extends boolean = false>(options?: Options<GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<LlamaParseSupportedFileExtensions[], unknown, ThrowOnError>;
/**
 * Screenshot
 */
declare const screenshotApiV1ParsingScreenshotPost: <ThrowOnError extends boolean = false>(options?: Options<ScreenshotApiV1ParsingScreenshotPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Upload File
 */
declare const uploadFileApiV1ParsingUploadPost: <ThrowOnError extends boolean = false>(options?: Options<UploadFileApiV1ParsingUploadPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 * Get a job by id
 */
declare const getJobApiV1ParsingJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiV1ParsingJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job Parameters
 * Get a job by id
 */
declare const getJobParametersApiV1ParsingJobJobIdParametersGet: <ThrowOnError extends boolean = false>(options: Options<GetJobParametersApiV1ParsingJobJobIdParametersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Parsing Job Details
 * Get a job by id
 */
declare const getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet: <ThrowOnError extends boolean = false>(options: Options<GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobTextResultApiV1ParsingJobJobIdResultTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobTextResultApiV1ParsingJobJobIdResultTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobTextResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result Raw
 * Get a job by id
 */
declare const getJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result Raw Pdf
 * Get a job by id
 */
declare const getJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobStructuredResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
declare const getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result Raw
 * Get a job by id
 */
declare const getJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobResultApiV1ParsingJobJobIdResultMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobMarkdownResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Md Result
 * Get a job by id
 */
declare const getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobJsonResultApiV1ParsingJobJobIdResultJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobJsonResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Raw Result
 * Get a job by id
 */
declare const getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
declare const getParsingHistoryResultApiV1ParsingHistoryGet: <ThrowOnError extends boolean = false>(options?: Options<GetParsingHistoryResultApiV1ParsingHistoryGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingHistoryItem[], HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
declare const generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Get Chat Apps
 */
declare const getChatAppsApiV1AppsGet: <ThrowOnError extends boolean = false>(options?: Options<GetChatAppsApiV1AppsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatAppResponse[], HttpValidationError, ThrowOnError>;
/**
 * Create Chat App
 * Create a new chat app.
 */
declare const createChatAppApiV1AppsPost: <ThrowOnError extends boolean = false>(options: Options<CreateChatAppApiV1AppsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Delete Chat App
 */
declare const deleteChatAppApiV1AppsIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteChatAppApiV1AppsIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Chat App
 * Get a chat app by ID.
 */
declare const getChatAppApiV1AppsIdGet: <ThrowOnError extends boolean = false>(options: Options<GetChatAppApiV1AppsIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Update Chat App
 * Update a chat app.
 */
declare const updateChatAppApiV1AppsIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateChatAppApiV1AppsIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Chat With Chat App
 * Chat with a chat app.
 */
declare const chatWithChatAppApiV1AppsIdChatPost: <ThrowOnError extends boolean = false>(options: Options<ChatWithChatAppApiV1AppsIdChatPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Classify Jobs
 * List classify jobs.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const listClassifyJobsApiV1ClassifierJobsGet: <ThrowOnError extends boolean = false>(options?: Options<ListClassifyJobsApiV1ClassifierJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedResponseClassifyJob, HttpValidationError, ThrowOnError>;
/**
 * Create Classify Job
 * Create a classify job.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const createClassifyJobApiV1ClassifierJobsPost: <ThrowOnError extends boolean = false>(options: Options<CreateClassifyJobApiV1ClassifierJobsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ClassifyJob, HttpValidationError, ThrowOnError>;
/**
 * Get Classify Job
 * Get a classify job.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const getClassifyJobApiV1ClassifierJobsClassifyJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ClassifyJob, HttpValidationError, ThrowOnError>;
/**
 * Get Classification Job Results
 * Get the results of a classify job.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const getClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGet: <ThrowOnError extends boolean = false>(options: Options<GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ClassifyJobResults, HttpValidationError, ThrowOnError>;
/**
 * Read Self
 */
declare const readSelfApiV1AuthMeGet: <ThrowOnError extends boolean = false>(options?: Options<ReadSelfApiV1AuthMeGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<User, HttpValidationError, ThrowOnError>;
/**
 * Create Customer Portal Session
 * Create a new customer portal session.
 */
declare const createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost: <ThrowOnError extends boolean = false>(options: Options<CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<string, HttpValidationError, ThrowOnError>;
/**
 * Downgrade Plan
 */
declare const downgradePlanApiV1BillingDowngradePlanPost: <ThrowOnError extends boolean = false>(options: Options<DowngradePlanApiV1BillingDowngradePlanPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: "success";
}, HttpValidationError, ThrowOnError>;
/**
 * Create Intent And Customer Session
 * Create a new setup intent and and a customer session.
 *
 * See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements
 */
declare const createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost: <ThrowOnError extends boolean = false>(options: Options<CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CreateIntentAndCustomerSessionResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Metronome Dashboard
 * Get the invoices for a given organization.
 */
declare const getMetronomeDashboardApiV1BillingMetronomeDashboardGet: <ThrowOnError extends boolean = false>(options: Options<GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<MetronomeDashboardResponse, HttpValidationError, ThrowOnError>;
/**
 * List Jobs
 */
declare const listJobsApiV1ExtractionJobsGet: <ThrowOnError extends boolean = false>(options: Options<ListJobsApiV1ExtractionJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob[], HttpValidationError, ThrowOnError>;
/**
 * Run Job
 */
declare const runJobApiV1ExtractionJobsPost: <ThrowOnError extends boolean = false>(options: Options<RunJobApiV1ExtractionJobsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 */
declare const getJobApiV1ExtractionJobsJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiV1ExtractionJobsJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Run Job On File
 */
declare const runJobOnFileApiV1ExtractionJobsFilePost: <ThrowOnError extends boolean = false>(options: Options<RunJobOnFileApiV1ExtractionJobsFilePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Run Batch Jobs
 */
declare const runBatchJobsApiV1ExtractionJobsBatchPost: <ThrowOnError extends boolean = false>(options: Options<RunBatchJobsApiV1ExtractionJobsBatchPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob[], HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 */
declare const getJobResultApiV1ExtractionJobsJobIdResultGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiV1ExtractionJobsJobIdResultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractResultset, HttpValidationError, ThrowOnError>;
/**
 * List Extract Runs
 */
declare const listExtractRunsApiV1ExtractionRunsGet: <ThrowOnError extends boolean = false>(options: Options<ListExtractRunsApiV1ExtractionRunsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedExtractRunsResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Latest Run From Ui
 */
declare const getLatestRunFromUiApiV1ExtractionRunsLatestFromUiGet: <ThrowOnError extends boolean = false>(options: Options<GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun | null, HttpValidationError, ThrowOnError>;
/**
 * Get Run By Job Id
 */
declare const getRunByJobIdApiV1ExtractionRunsByJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun, HttpValidationError, ThrowOnError>;
/**
 * Delete Extraction Run
 */
declare const deleteExtractionRunApiV1ExtractionRunsRunIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Run
 */
declare const getRunApiV1ExtractionRunsRunIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRunApiV1ExtractionRunsRunIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun, HttpValidationError, ThrowOnError>;
/**
 * Extract Stateless
 * Stateless extraction endpoint that uses a default extraction agent in the user's default project.
 * Requires data_schema, config, and either file_id, text, or base64 encoded file data.
 */
declare const extractStatelessApiV1ExtractionRunPost: <ThrowOnError extends boolean = false>(options: Options<ExtractStatelessApiV1ExtractionRunPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * List Extraction Agents
 */
declare const listExtractionAgentsApiV1ExtractionExtractionAgentsGet: <ThrowOnError extends boolean = false>(options?: Options<ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent[], HttpValidationError, ThrowOnError>;
/**
 * Create Extraction Agent
 */
declare const createExtractionAgentApiV1ExtractionExtractionAgentsPost: <ThrowOnError extends boolean = false>(options: Options<CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Validate Extraction Schema
 * Validates an extraction agent's schema definition.
 * Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.
 */
declare const validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost: <ThrowOnError extends boolean = false>(options: Options<ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractSchemaValidateResponse, HttpValidationError, ThrowOnError>;
/**
 * Generate Extraction Schema
 * Generates an extraction agent's schema definition from a file and/or natural language prompt.
 */
declare const generateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePost: <ThrowOnError extends boolean = false>(options: Options<GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractSchemaGenerateResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Extraction Agent By Name
 */
declare const getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet: <ThrowOnError extends boolean = false>(options: Options<GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Get Or Create Default Extraction Agent
 * Get or create a default extraction agent for the current project.
 * The default agent has an empty schema and default configuration.
 */
declare const getOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGet: <ThrowOnError extends boolean = false>(options?: Options<GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Delete Extraction Agent
 */
declare const deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Extraction Agent
 */
declare const getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet: <ThrowOnError extends boolean = false>(options: Options<GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Update Extraction Agent
 */
declare const updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * List Api Keys
 * List API keys.
 *
 * If project_id is provided, validates user has access to that project.
 * If project_id is not provided, scopes results to the current user.
 *
 * Args:
 * user: Current user
 * db: Database session
 * page_size: Number of items per page
 * page_token: Token for pagination
 * name: Filter by API key name
 * project_id: Filter by project ID
 * key_type: Filter by key type
 *
 * Returns:
 * Paginated response with API keys
 */
declare const listApiKeysApiV1BetaApiKeysGet: <ThrowOnError extends boolean = false>(options?: Options<ListApiKeysApiV1BetaApiKeysGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKeyQueryResponse, HttpValidationError, ThrowOnError>;
/**
 * Create Api Key
 * Create a new API key.
 *
 * If project_id is specified, validates user has admin permissions for that project.
 *
 * Args:
 * api_key_create: API key creation data
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The created API key with the secret key visible in redacted_api_key field
 */
declare const createApiKeyApiV1BetaApiKeysPost: <ThrowOnError extends boolean = false>(options: Options<CreateApiKeyApiV1BetaApiKeysPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey, HttpValidationError, ThrowOnError>;
/**
 * Delete Api Key
 * Delete an API key.
 *
 * If the API key belongs to a project, validates user has admin permissions for that project.
 * If the API key has no project, validates it belongs to the current user.
 *
 * Args:
 * api_key_id: The ID of the API key to delete
 * user: Current user
 * db: Database session
 */
declare const deleteApiKeyApiV1BetaApiKeysApiKeyIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Api Key
 * Get an API key by ID.
 *
 * Args:
 * api_key_id: The ID of the API key
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The API key
 */
declare const getApiKeyApiV1BetaApiKeysApiKeyIdGet: <ThrowOnError extends boolean = false>(options: Options<GetApiKeyApiV1BetaApiKeysApiKeyIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey, HttpValidationError, ThrowOnError>;
/**
 * List Batches
 */
declare const listBatchesApiV1BetaBatchesGet: <ThrowOnError extends boolean = false>(options?: Options<ListBatchesApiV1BetaBatchesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BatchPaginatedList, HttpValidationError, ThrowOnError>;
/**
 * Create Batch
 */
declare const createBatchApiV1BetaBatchesPost: <ThrowOnError extends boolean = false>(options: Options<CreateBatchApiV1BetaBatchesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Batch, HttpValidationError, ThrowOnError>;
/**
 * Get Batch
 */
declare const getBatchApiV1BetaBatchesBatchIdGet: <ThrowOnError extends boolean = false>(options: Options<GetBatchApiV1BetaBatchesBatchIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BatchPublicOutput, HttpValidationError, ThrowOnError>;
/**
 * Delete Agent Data
 * Delete agent data by ID.
 */
declare const deleteAgentDataApiV1BetaAgentDataItemIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteAgentDataApiV1BetaAgentDataItemIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: string;
}, HttpValidationError, ThrowOnError>;
/**
 * Get Agent Data
 * Get agent data by ID.
 */
declare const getAgentDataApiV1BetaAgentDataItemIdGet: <ThrowOnError extends boolean = false>(options: Options<GetAgentDataApiV1BetaAgentDataItemIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<AgentData, HttpValidationError, ThrowOnError>;
/**
 * Update Agent Data
 * Update agent data by ID (overwrites).
 */
declare const updateAgentDataApiV1BetaAgentDataItemIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateAgentDataApiV1BetaAgentDataItemIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<AgentData, HttpValidationError, ThrowOnError>;
/**
 * Create Agent Data
 * Create new agent data.
 */
declare const createAgentDataApiV1BetaAgentDataPost: <ThrowOnError extends boolean = false>(options: Options<CreateAgentDataApiV1BetaAgentDataPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<AgentData, HttpValidationError, ThrowOnError>;
/**
 * Search Agent Data
 * Search agent data with filtering, sorting, and pagination.
 */
declare const searchAgentDataApiV1BetaAgentDataSearchPost: <ThrowOnError extends boolean = false>(options: Options<SearchAgentDataApiV1BetaAgentDataSearchPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedResponseAgentData, HttpValidationError, ThrowOnError>;
/**
 * Aggregate Agent Data
 * Aggregate agent data with grouping and optional counting/first item retrieval.
 */
declare const aggregateAgentDataApiV1BetaAgentDataAggregatePost: <ThrowOnError extends boolean = false>(options: Options<AggregateAgentDataApiV1BetaAgentDataAggregatePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedResponseAggregateGroup, HttpValidationError, ThrowOnError>;
/**
 * Delete Agent Data By Query
 * Bulk delete agent data by query (deployment_name, collection, optional filters).
 */
declare const deleteAgentDataByQueryApiV1BetaAgentDataDeletePost: <ThrowOnError extends boolean = false>(options: Options<DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DeleteResponse, HttpValidationError, ThrowOnError>;
/**
 * List quota configurations
 * Retrieve a paginated list of quota configurations with optional filtering.
 */
declare const listQuotaConfigurationsApiV1BetaQuotaManagementGet: <ThrowOnError extends boolean = false>(options: Options<ListQuotaConfigurationsApiV1BetaQuotaManagementGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedResponseQuotaConfiguration, HttpValidationError, ThrowOnError>;
/**
 * Create File
 * Create a new file in the project.
 *
 * Args:
 * file_create: File creation data
 * project: Validated project from dependency
 * db: Database session
 *
 * Returns:
 * The created file
 */
declare const createFileApiV1BetaFilesPost: <ThrowOnError extends boolean = false>(options: Options<CreateFileApiV1BetaFilesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Upsert File
 * Upsert a file (create or update if exists) in the project.
 *
 * Args:
 * file_create: File creation/update data
 * project: Validated project from dependency
 * db: Database session
 *
 * Returns:
 * The upserted file
 */
declare const upsertFileApiV1BetaFilesPut: <ThrowOnError extends boolean = false>(options: Options<UpsertFileApiV1BetaFilesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Query Files
 * Query files with flexible filtering and pagination.
 *
 * Args:
 * request: The query request with filters and pagination
 * project: Validated project from dependency
 * db: Database session
 *
 * Returns:
 * Paginated response with files
 */
declare const queryFilesApiV1BetaFilesQueryPost: <ThrowOnError extends boolean = false>(options: Options<QueryFilesApiV1BetaFilesQueryPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<FileQueryResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete File
 * Delete a single file from the project.
 *
 * Args:
 * file_id: The ID of the file to delete
 * project: Validated project from dependency
 * db: Database session
 *
 * Returns:
 * None (204 No Content on success)
 */
declare const deleteFileApiV1BetaFilesFileIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiV1BetaFilesFileIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * List Parse Configurations
 * List parse configurations for the current project.
 *
 * Args:
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 * page_size: Number of items per page
 * page_token: Token for pagination
 * name: Filter by configuration name
 * creator: Filter by creator
 * version: Filter by version
 *
 * Returns:
 * Paginated response with parse configurations
 */
declare const listParseConfigurationsApiV1BetaParseConfigurationsGet: <ThrowOnError extends boolean = false>(options?: Options<ListParseConfigurationsApiV1BetaParseConfigurationsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfigurationQueryResponse, HttpValidationError, ThrowOnError>;
/**
 * Create Parse Configuration
 * Create a new parse configuration.
 *
 * Args:
 * config_create: Parse configuration creation data
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The created parse configuration
 */
declare const createParseConfigurationApiV1BetaParseConfigurationsPost: <ThrowOnError extends boolean = false>(options: Options<CreateParseConfigurationApiV1BetaParseConfigurationsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfiguration, HttpValidationError, ThrowOnError>;
/**
 * Upsert Parse Configuration
 * Create or update a parse configuration by name.
 *
 * Args:
 * config_create: Parse configuration creation data
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The created or updated parse configuration
 */
declare const upsertParseConfigurationApiV1BetaParseConfigurationsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertParseConfigurationApiV1BetaParseConfigurationsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfiguration, HttpValidationError, ThrowOnError>;
/**
 * Delete Parse Configuration
 * Delete a parse configuration.
 *
 * Args:
 * config_id: The ID of the parse configuration to delete
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 */
declare const deleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Parse Configuration
 * Get a parse configuration by ID.
 *
 * Args:
 * config_id: The ID of the parse configuration
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The parse configuration
 */
declare const getParseConfigurationApiV1BetaParseConfigurationsConfigIdGet: <ThrowOnError extends boolean = false>(options: Options<GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfiguration, HttpValidationError, ThrowOnError>;
/**
 * Update Parse Configuration
 * Update a parse configuration.
 *
 * Args:
 * config_id: The ID of the parse configuration to update
 * config_update: Update data
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 *
 * Returns:
 * The updated parse configuration
 */
declare const updateParseConfigurationApiV1BetaParseConfigurationsConfigIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfiguration, HttpValidationError, ThrowOnError>;
/**
 * Query Parse Configurations
 * Query parse configurations with filtering and pagination.
 *
 * Args:
 * query_request: Query request with filters and pagination
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 *
 * Returns:
 * Paginated response with parse configurations
 */
declare const queryParseConfigurationsApiV1BetaParseConfigurationsQueryPost: <ThrowOnError extends boolean = false>(options: Options<QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfigurationQueryResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Latest Parse Configuration
 * Get the latest parse configuration for the current project.
 *
 * Args:
 * project: Validated project from dependency
 * user: Current user
 * db: Database session
 * creator: Optional creator filter
 *
 * Returns:
 * The latest parse configuration or None if not found
 */
declare const getLatestParseConfigurationApiV1BetaParseConfigurationsLatestGet: <ThrowOnError extends boolean = false>(options?: Options<GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParseConfiguration | null, HttpValidationError, ThrowOnError>;
/**
 * List Spreadsheet Jobs
 * List spreadsheet parsing jobs.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const listSpreadsheetJobsApiV1BetaSpreadsheetJobsGet: <ThrowOnError extends boolean = false>(options?: Options<ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedResponseSpreadsheetJob, HttpValidationError, ThrowOnError>;
/**
 * Create Spreadsheet Job
 * Create a spreadsheet parsing job.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const createSpreadsheetJobApiV1BetaSpreadsheetJobsPost: <ThrowOnError extends boolean = false>(options: Options<CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<SpreadsheetJob, HttpValidationError, ThrowOnError>;
/**
 * Get Spreadsheet Job
 * Get a spreadsheet parsing job.
 *
 * When include_results=True (default), the response will include extracted tables and results
 * if the job is complete, eliminating the need for a separate /results call.
 *
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const getSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<SpreadsheetJob, HttpValidationError, ThrowOnError>;
/**
 * Get Table Download Presigned Url
 * Generate a presigned URL to download a specific extracted table.
 * Experimental: This endpoint is not yet ready for production use and is subject to change at any time.
 */
declare const getTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGet: <ThrowOnError extends boolean = false>(options: Options<GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Upload File V2
 */
declare const uploadFileV2ApiV2Alpha1ParseUploadPost: <ThrowOnError extends boolean = false>(options?: Options<UploadFileV2ApiV2Alpha1ParseUploadPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job Image Result
 * Get a job by id
 */
declare const getJobImageResultApiParsingJobJobIdResultImageNameGet: <ThrowOnError extends boolean = false>(options: Options<GetJobImageResultApiParsingJobJobIdResultImageNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
declare const getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet: <ThrowOnError extends boolean = false>(options?: Options<GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<LlamaParseSupportedFileExtensions[], unknown, ThrowOnError>;
/**
 * Screenshot
 */
declare const screenshotApiParsingScreenshotPost: <ThrowOnError extends boolean = false>(options?: Options<ScreenshotApiParsingScreenshotPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Upload File
 */
declare const uploadFileApiParsingUploadPost: <ThrowOnError extends boolean = false>(options?: Options<UploadFileApiParsingUploadPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 * Get a job by id
 */
declare const getJobApiParsingJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiParsingJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job Parameters
 * Get a job by id
 */
declare const getJobParametersApiParsingJobJobIdParametersGet: <ThrowOnError extends boolean = false>(options: Options<GetJobParametersApiParsingJobJobIdParametersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Parsing Job Details
 * Get a job by id
 */
declare const getParsingJobDetailsApiParsingJobJobIdDetailsGet: <ThrowOnError extends boolean = false>(options: Options<GetParsingJobDetailsApiParsingJobJobIdDetailsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobTextResultApiParsingJobJobIdResultTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobTextResultApiParsingJobJobIdResultTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobTextResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result Raw
 * Get a job by id
 */
declare const getJobRawTextResultRawApiParsingJobJobIdResultRawTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiParsingJobJobIdResultPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiParsingJobJobIdResultPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result Raw Pdf
 * Get a job by id
 */
declare const getJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobStructuredResultApiParsingJobJobIdResultStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobStructuredResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
declare const getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result Raw
 * Get a job by id
 */
declare const getJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobResultApiParsingJobJobIdResultMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiParsingJobJobIdResultMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobMarkdownResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Md Result
 * Get a job by id
 */
declare const getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobJsonResultApiParsingJobJobIdResultJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonResultApiParsingJobJobIdResultJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobJsonResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Raw Result
 * Get a job by id
 */
declare const getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
declare const getParsingHistoryResultApiParsingHistoryGet: <ThrowOnError extends boolean = false>(options?: Options<GetParsingHistoryResultApiParsingHistoryGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingHistoryItem[], HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
declare const generatePresignedUrlApiParsingJobJobIdReadFilenameGet: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;

export { ApiKeyType, BoxAuthMechanism, CompositeRetrievalMode, ConfigurableDataSinkNames, ConfigurableDataSourceNames, DocumentChunkMode, ExtractMode, ExtractModels, ExtractState, ExtractTarget, FailPageMode, FilterCondition, FilterOperator, JobNameMapping, JobNames, LlamaParseSupportedFileExtensions, ManagedIngestionStatus, MessageRole, MetronomeDashboardType, NodeRelationship, ObjectType, ParsePlanLevel, ParserLanguages, ParsingMode, PartitionNames, PgVectorDistanceMethod, PgVectorVectorType, PipelineType, Pooling, PublicModelName, ReRankerType, RetrievalMode, SparseModelType, StatusEnum, SupportedLlmModelNames, VertexEmbeddingMode, addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut, addFilesToPipelineApiApiV1PipelinesPipelineIdFilesPut, addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut, addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut, aggregateAgentDataApiV1BetaAgentDataAggregatePost, assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut, batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut, cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost, chatApiV1PipelinesPipelineIdChatPost, chatWithChatAppApiV1AppsIdChatPost, client, copyPipelineApiV1PipelinesPipelineIdCopyPost, createAgentDataApiV1BetaAgentDataPost, createApiKeyApiV1BetaApiKeysPost, createBatchApiV1BetaBatchesPost, createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost, createChatAppApiV1AppsPost, createClassifyJobApiV1ClassifierJobsPost, createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost, createDataSinkApiV1DataSinksPost, createDataSourceApiV1DataSourcesPost, createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost, createExtractionAgentApiV1ExtractionExtractionAgentsPost, createFileApiV1BetaFilesPost, createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost, createOrganizationApiV1OrganizationsPost, createParseConfigurationApiV1BetaParseConfigurationsPost, createPipelineApiV1PipelinesPost, createProjectApiV1ProjectsPost, createRetrieverApiV1RetrieversPost, createSpreadsheetJobApiV1BetaSpreadsheetJobsPost, deleteAgentDataApiV1BetaAgentDataItemIdDelete, deleteAgentDataByQueryApiV1BetaAgentDataDeletePost, deleteApiKeyApiV1ApiKeysApiKeyIdDelete, deleteApiKeyApiV1BetaApiKeysApiKeyIdDelete, deleteChatAppApiV1AppsIdDelete, deleteDataSinkApiV1DataSinksDataSinkIdDelete, deleteDataSourceApiV1DataSourcesDataSourceIdDelete, deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete, deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete, deleteExtractionRunApiV1ExtractionRunsRunIdDelete, deleteFileApiV1BetaFilesFileIdDelete, deleteFileApiV1FilesIdDelete, deleteOrganizationApiV1OrganizationsOrganizationIdDelete, deleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDelete, deletePipelineApiV1PipelinesPipelineIdDelete, deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete, deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete, deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete, deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete, deleteProjectApiV1ProjectsProjectIdDelete, deleteRetrieverApiV1RetrieversRetrieverIdDelete, directRetrieveApiV1RetrieversRetrievePost, downgradePlanApiV1BillingDowngradePlanPost, extractStatelessApiV1ExtractionRunPost, forceDeletePipelineApiV1PipelinesPipelineIdForceDeletePost, forceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPost, generateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePost, generateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPost, generateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPost, generateKeyApiV1ApiKeysPost, generatePresignedUrlApiParsingJobJobIdReadFilenameGet, generatePresignedUrlApiV1FilesPut, generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet, getAgentDataApiV1BetaAgentDataItemIdGet, getApiKeyApiV1BetaApiKeysApiKeyIdGet, getBatchApiV1BetaBatchesBatchIdGet, getChatAppApiV1AppsIdGet, getChatAppsApiV1AppsGet, getClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGet, getClassifyJobApiV1ClassifierJobsClassifyJobIdGet, getCurrentProjectApiV1ProjectsCurrentGet, getDataSinkApiV1DataSinksDataSinkIdGet, getDataSourceApiV1DataSourcesDataSourceIdGet, getDefaultOrganizationApiV1OrganizationsDefaultGet, getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet, getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet, getFileApiV1FilesIdGet, getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet, getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet, getJobApiParsingJobJobIdGet, getJobApiV1ExtractionJobsJobIdGet, getJobApiV1ParsingJobJobIdGet, getJobImageResultApiParsingJobJobIdResultImageNameGet, getJobImageResultApiV1ParsingJobJobIdResultImageNameGet, getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet, getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet, getJobJsonResultApiParsingJobJobIdResultJsonGet, getJobJsonResultApiV1ParsingJobJobIdResultJsonGet, getJobParametersApiParsingJobJobIdParametersGet, getJobParametersApiV1ParsingJobJobIdParametersGet, getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet, getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet, getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet, getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet, getJobRawTextResultApiParsingJobJobIdResultPdfGet, getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet, getJobRawTextResultRawApiParsingJobJobIdResultRawTextGet, getJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGet, getJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGet, getJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGet, getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet, getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet, getJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGet, getJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGet, getJobResultApiParsingJobJobIdResultMarkdownGet, getJobResultApiV1ExtractionJobsJobIdResultGet, getJobResultApiV1ParsingJobJobIdResultMarkdownGet, getJobStructuredResultApiParsingJobJobIdResultStructuredGet, getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet, getJobTextResultApiParsingJobJobIdResultTextGet, getJobTextResultApiV1ParsingJobJobIdResultTextGet, getJobsApiV1JobsGet, getLatestParseConfigurationApiV1BetaParseConfigurationsLatestGet, getLatestRunFromUiApiV1ExtractionRunsLatestFromUiGet, getMetronomeDashboardApiV1BillingMetronomeDashboardGet, getOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGet, getOrganizationApiV1OrganizationsOrganizationIdGet, getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet, getParseConfigurationApiV1BetaParseConfigurationsConfigIdGet, getParsingHistoryResultApiParsingHistoryGet, getParsingHistoryResultApiV1ParsingHistoryGet, getParsingJobDetailsApiParsingJobJobIdDetailsGet, getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet, getPipelineApiV1PipelinesPipelineIdGet, getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet, getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet, getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet, getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet, getPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGet, getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet, getPipelineStatusApiV1PipelinesPipelineIdStatusGet, getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet, getProjectApiV1ProjectsProjectIdGet, getProjectUsageApiV1ProjectsProjectIdUsageGet, getRetrieverApiV1RetrieversRetrieverIdGet, getRunApiV1ExtractionRunsRunIdGet, getRunByJobIdApiV1ExtractionRunsByJobJobIdGet, getSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGet, getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet, getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet, getTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGet, getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet, importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut, listApiKeysApiV1BetaApiKeysGet, listBatchesApiV1BetaBatchesGet, listClassifyJobsApiV1ClassifierJobsGet, listDataSinksApiV1DataSinksGet, listDataSourcesApiV1DataSourcesGet, listDeploymentsApiV1ProjectsProjectIdAgentsGet, listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet, listExtractRunsApiV1ExtractionRunsGet, listExtractionAgentsApiV1ExtractionExtractionAgentsGet, listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet, listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet, listFilePagesFiguresApiV1FilesIdPageFiguresGet, listFilesApiV1FilesGet, listJobsApiV1ExtractionJobsGet, listKeysApiV1ApiKeysGet, listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet, listOrganizationsApiV1OrganizationsGet, listParseConfigurationsApiV1BetaParseConfigurationsGet, listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet, listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet, listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet, listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get, listPipelineFilesApiV1PipelinesPipelineIdFilesGet, listPipelineJobsApiV1PipelinesPipelineIdJobsGet, listProjectsApiV1ProjectsGet, listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet, listQuotaConfigurationsApiV1BetaQuotaManagementGet, listRetrieversApiV1RetrieversGet, listRolesApiV1OrganizationsOrganizationIdRolesGet, listSpreadsheetJobsApiV1BetaSpreadsheetJobsGet, listSupportedModelsApiV1EvalsModelsGet, paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet, queryFilesApiV1BetaFilesQueryPost, queryParseConfigurationsApiV1BetaParseConfigurationsQueryPost, readFileContentApiV1FilesIdContentGet, readSelfApiV1AuthMeGet, removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete, removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete, retrieveApiV1RetrieversRetrieverIdRetrievePost, runBatchJobsApiV1ExtractionJobsBatchPost, runJobApiV1ExtractionJobsPost, runJobOnFileApiV1ExtractionJobsFilePost, runSearchApiV1PipelinesPipelineIdRetrievePost, screenshotApiParsingScreenshotPost, screenshotApiV1ParsingScreenshotPost, searchAgentDataApiV1BetaAgentDataSearchPost, searchPipelinesApiV1PipelinesGet, setDefaultOrganizationApiV1OrganizationsDefaultPut, syncDeploymentsApiV1ProjectsProjectIdAgentsSyncPost, syncFilesApiV1FilesSyncPut, syncPipelineApiV1PipelinesPipelineIdSyncPost, syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost, syncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPost, updateAgentDataApiV1BetaAgentDataItemIdPut, updateChatAppApiV1AppsIdPut, updateDataSinkApiV1DataSinksDataSinkIdPut, updateDataSourceApiV1DataSourcesDataSourceIdPut, updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut, updateExistingPipelineApiV1PipelinesPipelineIdPut, updateExistingProjectApiV1ProjectsProjectIdPut, updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut, updateOrganizationApiV1OrganizationsOrganizationIdPut, updateParseConfigurationApiV1BetaParseConfigurationsConfigIdPut, updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut, updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut, updateRetrieverApiV1RetrieversRetrieverIdPut, uploadFileApiParsingUploadPost, uploadFileApiV1FilesPost, uploadFileApiV1ParsingUploadPost, uploadFileFromUrlApiV1FilesUploadFromUrlPut, uploadFileV2ApiV2Alpha1ParseUploadPost, upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut, upsertDataSinkApiV1DataSinksPut, upsertDataSourceApiV1DataSourcesPut, upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut, upsertFileApiV1BetaFilesPut, upsertOrganizationApiV1OrganizationsPut, upsertParseConfigurationApiV1BetaParseConfigurationsPut, upsertPipelineApiV1PipelinesPut, upsertProjectApiV1ProjectsPut, upsertRetrieverApiV1RetrieversPut, validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost, validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost, validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost, validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost };
export type { AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData, AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError, AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors, AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse, AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses, AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData, AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError, AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors, AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse, AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses, AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData, AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError, AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors, AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutResponses, AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData, AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError, AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors, AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse, AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses, AdvancedModeTransformConfig, AgentData, AgentDataCreate, AgentDataUpdate, AgentDeploymentList, AgentDeploymentSummary, AggregateAgentDataApiV1BetaAgentDataAggregatePostData, AggregateAgentDataApiV1BetaAgentDataAggregatePostError, AggregateAgentDataApiV1BetaAgentDataAggregatePostErrors, AggregateAgentDataApiV1BetaAgentDataAggregatePostResponse, AggregateAgentDataApiV1BetaAgentDataAggregatePostResponses, AggregateGroup, AggregateRequest, ApiKey, ApiKeyCreate, ApiKeyQueryResponse, AppChatInputParams, AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData, AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError, AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors, AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse, AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses, AutoTransformConfig, AzureOpenAiEmbedding, AzureOpenAiEmbeddingConfig, BaseConnectionValidation, BasePlan, Batch, BatchCreate, BatchItem, BatchPaginatedList, BatchPublicOutput, BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData, BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError, BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors, BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse, BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses, BedrockEmbedding, BedrockEmbeddingConfig, BillingPeriod, BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut, BodyRunJobOnFileApiV1ExtractionJobsFilePost, BodyScreenshotApiParsingScreenshotPost, BodyScreenshotApiV1ParsingScreenshotPost, BodyUploadFileApiParsingUploadPost, BodyUploadFileApiV1FilesPost, BodyUploadFileApiV1ParsingUploadPost, CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData, CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError, CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors, CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse, CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses, CharacterChunkingConfig, ChatApiV1PipelinesPipelineIdChatPostData, ChatApiV1PipelinesPipelineIdChatPostError, ChatApiV1PipelinesPipelineIdChatPostErrors, ChatApiV1PipelinesPipelineIdChatPostResponses, ChatApp, ChatAppCreate, ChatAppResponse, ChatAppUpdate, ChatData, ChatInputParams, ChatMessage, ChatWithChatAppApiV1AppsIdChatPostData, ChatWithChatAppApiV1AppsIdChatPostError, ChatWithChatAppApiV1AppsIdChatPostErrors, ChatWithChatAppApiV1AppsIdChatPostResponses, ClassificationResult, ClassifierRule, ClassifyJob, ClassifyJobCreate, ClassifyJobResults, ClassifyParsingConfiguration, ClientOptions, CloudAstraDbVectorStoreReadable, CloudAstraDbVectorStoreWritable, CloudAzStorageBlobDataSourceReadable, CloudAzStorageBlobDataSourceWritable, CloudAzureAiSearchVectorStoreReadable, CloudAzureAiSearchVectorStoreWritable, CloudBoxDataSourceReadable, CloudBoxDataSourceWritable, CloudConfluenceDataSourceReadable, CloudConfluenceDataSourceWritable, CloudDocument, CloudDocumentCreate, CloudJiraDataSourceReadable, CloudJiraDataSourceV2Readable, CloudJiraDataSourceV2Writable, CloudJiraDataSourceWritable, CloudMilvusVectorStoreReadable, CloudMilvusVectorStoreWritable, CloudMongoDbAtlasVectorSearchReadable, CloudMongoDbAtlasVectorSearchWritable, CloudNotionPageDataSourceReadable, CloudNotionPageDataSourceWritable, CloudOneDriveDataSourceReadable, CloudOneDriveDataSourceWritable, CloudPineconeVectorStoreReadable, CloudPineconeVectorStoreWritable, CloudPostgresVectorStoreReadable, CloudPostgresVectorStoreWritable, CloudQdrantVectorStoreReadable, CloudQdrantVectorStoreWritable, CloudS3DataSourceReadable, CloudS3DataSourceWritable, CloudSharepointDataSourceReadable, CloudSharepointDataSourceWritable, CloudSlackDataSourceReadable, CloudSlackDataSourceWritable, CohereEmbedding, CohereEmbeddingConfig, CompositeRetrievalParams, CompositeRetrievalResult, CompositeRetrievedTextNode, CompositeRetrievedTextNodeWithScore, CopyPipelineApiV1PipelinesPipelineIdCopyPostData, CopyPipelineApiV1PipelinesPipelineIdCopyPostError, CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors, CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse, CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses, CreateAgentDataApiV1BetaAgentDataPostData, CreateAgentDataApiV1BetaAgentDataPostError, CreateAgentDataApiV1BetaAgentDataPostErrors, CreateAgentDataApiV1BetaAgentDataPostResponse, CreateAgentDataApiV1BetaAgentDataPostResponses, CreateApiKeyApiV1BetaApiKeysPostData, CreateApiKeyApiV1BetaApiKeysPostError, CreateApiKeyApiV1BetaApiKeysPostErrors, CreateApiKeyApiV1BetaApiKeysPostResponse, CreateApiKeyApiV1BetaApiKeysPostResponses, CreateBatchApiV1BetaBatchesPostData, CreateBatchApiV1BetaBatchesPostError, CreateBatchApiV1BetaBatchesPostErrors, CreateBatchApiV1BetaBatchesPostResponse, CreateBatchApiV1BetaBatchesPostResponses, CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData, CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError, CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors, CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse, CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses, CreateChatAppApiV1AppsPostData, CreateChatAppApiV1AppsPostError, CreateChatAppApiV1AppsPostErrors, CreateChatAppApiV1AppsPostResponse, CreateChatAppApiV1AppsPostResponses, CreateClassifyJobApiV1ClassifierJobsPostData, CreateClassifyJobApiV1ClassifierJobsPostError, CreateClassifyJobApiV1ClassifierJobsPostErrors, CreateClassifyJobApiV1ClassifierJobsPostResponse, CreateClassifyJobApiV1ClassifierJobsPostResponses, CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData, CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError, CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors, CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse, CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses, CreateDataSinkApiV1DataSinksPostData, CreateDataSinkApiV1DataSinksPostError, CreateDataSinkApiV1DataSinksPostErrors, CreateDataSinkApiV1DataSinksPostResponse, CreateDataSinkApiV1DataSinksPostResponses, CreateDataSourceApiV1DataSourcesPostData, CreateDataSourceApiV1DataSourcesPostError, CreateDataSourceApiV1DataSourcesPostErrors, CreateDataSourceApiV1DataSourcesPostResponse, CreateDataSourceApiV1DataSourcesPostResponses, CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData, CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError, CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors, CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse, CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses, CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData, CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError, CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors, CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse, CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses, CreateFileApiV1BetaFilesPostData, CreateFileApiV1BetaFilesPostError, CreateFileApiV1BetaFilesPostErrors, CreateFileApiV1BetaFilesPostResponse, CreateFileApiV1BetaFilesPostResponses, CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData, CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError, CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors, CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse, CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses, CreateIntentAndCustomerSessionResponse, CreateOrganizationApiV1OrganizationsPostData, CreateOrganizationApiV1OrganizationsPostError, CreateOrganizationApiV1OrganizationsPostErrors, CreateOrganizationApiV1OrganizationsPostResponse, CreateOrganizationApiV1OrganizationsPostResponses, CreateParseConfigurationApiV1BetaParseConfigurationsPostData, CreateParseConfigurationApiV1BetaParseConfigurationsPostError, CreateParseConfigurationApiV1BetaParseConfigurationsPostErrors, CreateParseConfigurationApiV1BetaParseConfigurationsPostResponse, CreateParseConfigurationApiV1BetaParseConfigurationsPostResponses, CreatePipelineApiV1PipelinesPostData, CreatePipelineApiV1PipelinesPostError, CreatePipelineApiV1PipelinesPostErrors, CreatePipelineApiV1PipelinesPostResponse, CreatePipelineApiV1PipelinesPostResponses, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostError, CreateProjectApiV1ProjectsPostErrors, CreateProjectApiV1ProjectsPostResponse, CreateProjectApiV1ProjectsPostResponses, CreateRetrieverApiV1RetrieversPostData, CreateRetrieverApiV1RetrieversPostError, CreateRetrieverApiV1RetrieversPostErrors, CreateRetrieverApiV1RetrieversPostResponse, CreateRetrieverApiV1RetrieversPostResponses, CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostData, CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostError, CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostErrors, CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponse, CreateSpreadsheetJobApiV1BetaSpreadsheetJobsPostResponses, CreditType, CustomClaims, CustomerPortalSessionCreatePayload, DataSinkCreateReadable, DataSinkCreateWritable, DataSinkReadable, DataSinkUpdateReadable, DataSinkUpdateWritable, DataSinkWritable, DataSourceCreateReadable, DataSourceCreateWritable, DataSourceReadable, DataSourceReaderVersionMetadata, DataSourceUpdateDispatcherConfig, DataSourceUpdateReadable, DataSourceUpdateWritable, DataSourceWritable, DefaultOrganizationUpdate, DeleteAgentDataApiV1BetaAgentDataItemIdDeleteData, DeleteAgentDataApiV1BetaAgentDataItemIdDeleteError, DeleteAgentDataApiV1BetaAgentDataItemIdDeleteErrors, DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponse, DeleteAgentDataApiV1BetaAgentDataItemIdDeleteResponses, DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostData, DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostError, DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostErrors, DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponse, DeleteAgentDataByQueryApiV1BetaAgentDataDeletePostResponses, DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData, DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError, DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors, DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse, DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses, DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteData, DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteError, DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteErrors, DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponse, DeleteApiKeyApiV1BetaApiKeysApiKeyIdDeleteResponses, DeleteChatAppApiV1AppsIdDeleteData, DeleteChatAppApiV1AppsIdDeleteError, DeleteChatAppApiV1AppsIdDeleteErrors, DeleteChatAppApiV1AppsIdDeleteResponses, DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData, DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError, DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors, DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse, DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses, DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData, DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError, DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors, DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse, DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses, DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData, DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError, DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors, DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse, DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses, DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData, DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError, DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors, DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteResponses, DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData, DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError, DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors, DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteResponses, DeleteFileApiV1BetaFilesFileIdDeleteData, DeleteFileApiV1BetaFilesFileIdDeleteError, DeleteFileApiV1BetaFilesFileIdDeleteErrors, DeleteFileApiV1BetaFilesFileIdDeleteResponse, DeleteFileApiV1BetaFilesFileIdDeleteResponses, DeleteFileApiV1FilesIdDeleteData, DeleteFileApiV1FilesIdDeleteError, DeleteFileApiV1FilesIdDeleteErrors, DeleteFileApiV1FilesIdDeleteResponse, DeleteFileApiV1FilesIdDeleteResponses, DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData, DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError, DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors, DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse, DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses, DeleteParams, DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteData, DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteError, DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteErrors, DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponse, DeleteParseConfigurationApiV1BetaParseConfigurationsConfigIdDeleteResponses, DeletePipelineApiV1PipelinesPipelineIdDeleteData, DeletePipelineApiV1PipelinesPipelineIdDeleteError, DeletePipelineApiV1PipelinesPipelineIdDeleteErrors, DeletePipelineApiV1PipelinesPipelineIdDeleteResponse, DeletePipelineApiV1PipelinesPipelineIdDeleteResponses, DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData, DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError, DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors, DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse, DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses, DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData, DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError, DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors, DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse, DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses, DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData, DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError, DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors, DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse, DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses, DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData, DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError, DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors, DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse, DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses, DeleteProjectApiV1ProjectsProjectIdDeleteData, DeleteProjectApiV1ProjectsProjectIdDeleteError, DeleteProjectApiV1ProjectsProjectIdDeleteErrors, DeleteProjectApiV1ProjectsProjectIdDeleteResponse, DeleteProjectApiV1ProjectsProjectIdDeleteResponses, DeleteRequest, DeleteResponse, DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData, DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError, DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors, DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse, DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses, DirectRetrievalParams, DirectRetrieveApiV1RetrieversRetrievePostData, DirectRetrieveApiV1RetrieversRetrievePostError, DirectRetrieveApiV1RetrieversRetrievePostErrors, DirectRetrieveApiV1RetrieversRetrievePostResponse, DirectRetrieveApiV1RetrieversRetrievePostResponses, DocumentIngestionJobParams, DowngradePlanApiV1BillingDowngradePlanPostData, DowngradePlanApiV1BillingDowngradePlanPostError, DowngradePlanApiV1BillingDowngradePlanPostErrors, DowngradePlanApiV1BillingDowngradePlanPostResponse, DowngradePlanApiV1BillingDowngradePlanPostResponses, ElementSegmentationConfig, EmbeddingModelConfig, EmbeddingModelConfigCreate, EmbeddingModelConfigUpdate, EvalExecutionParams, ExtractAgent, ExtractAgentCreate, ExtractAgentUpdate, ExtractConfig, ExtractJob, ExtractJobCreate, ExtractJobCreateBatch, ExtractResultset, ExtractRun, ExtractSchemaGenerateRequest, ExtractSchemaGenerateResponse, ExtractSchemaValidateRequest, ExtractSchemaValidateResponse, ExtractStatelessApiV1ExtractionRunPostData, ExtractStatelessApiV1ExtractionRunPostError, ExtractStatelessApiV1ExtractionRunPostErrors, ExtractStatelessApiV1ExtractionRunPostResponse, ExtractStatelessApiV1ExtractionRunPostResponses, ExtractStatelessRequest, ExtractedTable, FailureHandlingConfig, File, FileClassification, FileCountByStatusResponse, FileCreate, FileCreateFromUrl, FileData, FileFilter, FileIdPresignedUrl, FileParsePublic, FileQueryRequest, FileQueryResponse, FilterOperation, ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostData, ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostError, ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostErrors, ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponse, ForceDeletePipelineApiV1PipelinesPipelineIdForceDeletePostResponses, ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostData, ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostError, ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostErrors, ForceSyncAllPipelineDocumentsApiV1PipelinesPipelineIdDocumentsForceSyncAllPostResponses, FreeCreditsUsage, GeminiEmbedding, GeminiEmbeddingConfig, GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostData, GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostError, GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostErrors, GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponse, GenerateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaGeneratePostResponses, GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostData, GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostError, GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostErrors, GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponse, GenerateFilePageFigurePresignedUrlApiV1FilesIdPageFiguresPageIndexFigureNamePresignedUrlPostResponses, GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostData, GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostError, GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostErrors, GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponse, GenerateFilePageScreenshotPresignedUrlApiV1FilesIdPageScreenshotsPageIndexPresignedUrlPostResponses, GenerateKeyApiV1ApiKeysPostData, GenerateKeyApiV1ApiKeysPostError, GenerateKeyApiV1ApiKeysPostErrors, GenerateKeyApiV1ApiKeysPostResponse, GenerateKeyApiV1ApiKeysPostResponses, GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData, GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError, GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors, GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse, GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses, GeneratePresignedUrlApiV1FilesPutData, GeneratePresignedUrlApiV1FilesPutError, GeneratePresignedUrlApiV1FilesPutErrors, GeneratePresignedUrlApiV1FilesPutResponse, GeneratePresignedUrlApiV1FilesPutResponses, GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData, GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError, GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors, GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse, GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses, GetAgentDataApiV1BetaAgentDataItemIdGetData, GetAgentDataApiV1BetaAgentDataItemIdGetError, GetAgentDataApiV1BetaAgentDataItemIdGetErrors, GetAgentDataApiV1BetaAgentDataItemIdGetResponse, GetAgentDataApiV1BetaAgentDataItemIdGetResponses, GetApiKeyApiV1BetaApiKeysApiKeyIdGetData, GetApiKeyApiV1BetaApiKeysApiKeyIdGetError, GetApiKeyApiV1BetaApiKeysApiKeyIdGetErrors, GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponse, GetApiKeyApiV1BetaApiKeysApiKeyIdGetResponses, GetBatchApiV1BetaBatchesBatchIdGetData, GetBatchApiV1BetaBatchesBatchIdGetError, GetBatchApiV1BetaBatchesBatchIdGetErrors, GetBatchApiV1BetaBatchesBatchIdGetResponse, GetBatchApiV1BetaBatchesBatchIdGetResponses, GetChatAppApiV1AppsIdGetData, GetChatAppApiV1AppsIdGetError, GetChatAppApiV1AppsIdGetErrors, GetChatAppApiV1AppsIdGetResponse, GetChatAppApiV1AppsIdGetResponses, GetChatAppsApiV1AppsGetData, GetChatAppsApiV1AppsGetError, GetChatAppsApiV1AppsGetErrors, GetChatAppsApiV1AppsGetResponse, GetChatAppsApiV1AppsGetResponses, GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetData, GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetError, GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetErrors, GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponse, GetClassificationJobResultsApiV1ClassifierJobsClassifyJobIdResultsGetResponses, GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetData, GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetError, GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetErrors, GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponse, GetClassifyJobApiV1ClassifierJobsClassifyJobIdGetResponses, GetCurrentProjectApiV1ProjectsCurrentGetData, GetCurrentProjectApiV1ProjectsCurrentGetError, GetCurrentProjectApiV1ProjectsCurrentGetErrors, GetCurrentProjectApiV1ProjectsCurrentGetResponse, GetCurrentProjectApiV1ProjectsCurrentGetResponses, GetDataSinkApiV1DataSinksDataSinkIdGetData, GetDataSinkApiV1DataSinksDataSinkIdGetError, GetDataSinkApiV1DataSinksDataSinkIdGetErrors, GetDataSinkApiV1DataSinksDataSinkIdGetResponse, GetDataSinkApiV1DataSinksDataSinkIdGetResponses, GetDataSourceApiV1DataSourcesDataSourceIdGetData, GetDataSourceApiV1DataSourcesDataSourceIdGetError, GetDataSourceApiV1DataSourcesDataSourceIdGetErrors, GetDataSourceApiV1DataSourcesDataSourceIdGetResponse, GetDataSourceApiV1DataSourcesDataSourceIdGetResponses, GetDefaultOrganizationApiV1OrganizationsDefaultGetData, GetDefaultOrganizationApiV1OrganizationsDefaultGetError, GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors, GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse, GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses, GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData, GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError, GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors, GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse, GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses, GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData, GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError, GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors, GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse, GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses, GetFileApiV1FilesIdGetData, GetFileApiV1FilesIdGetError, GetFileApiV1FilesIdGetErrors, GetFileApiV1FilesIdGetResponse, GetFileApiV1FilesIdGetResponses, GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData, GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError, GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors, GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetResponses, GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData, GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError, GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors, GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetResponses, GetJobApiParsingJobJobIdGetData, GetJobApiParsingJobJobIdGetError, GetJobApiParsingJobJobIdGetErrors, GetJobApiParsingJobJobIdGetResponse, GetJobApiParsingJobJobIdGetResponses, GetJobApiV1ExtractionJobsJobIdGetData, GetJobApiV1ExtractionJobsJobIdGetError, GetJobApiV1ExtractionJobsJobIdGetErrors, GetJobApiV1ExtractionJobsJobIdGetResponse, GetJobApiV1ExtractionJobsJobIdGetResponses, GetJobApiV1ParsingJobJobIdGetData, GetJobApiV1ParsingJobJobIdGetError, GetJobApiV1ParsingJobJobIdGetErrors, GetJobApiV1ParsingJobJobIdGetResponse, GetJobApiV1ParsingJobJobIdGetResponses, GetJobImageResultApiParsingJobJobIdResultImageNameGetData, GetJobImageResultApiParsingJobJobIdResultImageNameGetError, GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors, GetJobImageResultApiParsingJobJobIdResultImageNameGetResponses, GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData, GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError, GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors, GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetResponses, GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData, GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError, GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors, GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetResponses, GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData, GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError, GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors, GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetResponses, GetJobJsonResultApiParsingJobJobIdResultJsonGetData, GetJobJsonResultApiParsingJobJobIdResultJsonGetError, GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors, GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse, GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses, GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData, GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError, GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors, GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse, GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses, GetJobParametersApiParsingJobJobIdParametersGetData, GetJobParametersApiParsingJobJobIdParametersGetError, GetJobParametersApiParsingJobJobIdParametersGetErrors, GetJobParametersApiParsingJobJobIdParametersGetResponses, GetJobParametersApiV1ParsingJobJobIdParametersGetData, GetJobParametersApiV1ParsingJobJobIdParametersGetError, GetJobParametersApiV1ParsingJobJobIdParametersGetErrors, GetJobParametersApiV1ParsingJobJobIdParametersGetResponses, GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData, GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError, GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors, GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetResponses, GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData, GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError, GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors, GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetResponses, GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData, GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError, GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors, GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetResponses, GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData, GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError, GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors, GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetResponses, GetJobRawTextResultApiParsingJobJobIdResultPdfGetData, GetJobRawTextResultApiParsingJobJobIdResultPdfGetError, GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors, GetJobRawTextResultApiParsingJobJobIdResultPdfGetResponses, GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData, GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError, GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors, GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetResponses, GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetData, GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetError, GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetErrors, GetJobRawTextResultRawApiParsingJobJobIdResultRawTextGetResponses, GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetData, GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetError, GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetErrors, GetJobRawTextResultRawApiV1ParsingJobJobIdResultRawTextGetResponses, GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetData, GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetError, GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetErrors, GetJobRawTextResultRawPdfApiParsingJobJobIdResultRawPdfGetResponses, GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetData, GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetError, GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetErrors, GetJobRawTextResultRawPdfApiV1ParsingJobJobIdResultRawPdfGetResponses, GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData, GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError, GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors, GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetResponses, GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData, GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError, GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors, GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetResponses, GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetData, GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetError, GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetErrors, GetJobRawXlsxResultRawApiParsingJobJobIdResultRawXlsxGetResponses, GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetData, GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetError, GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetErrors, GetJobRawXlsxResultRawApiV1ParsingJobJobIdResultRawXlsxGetResponses, GetJobResultApiParsingJobJobIdResultMarkdownGetData, GetJobResultApiParsingJobJobIdResultMarkdownGetError, GetJobResultApiParsingJobJobIdResultMarkdownGetErrors, GetJobResultApiParsingJobJobIdResultMarkdownGetResponse, GetJobResultApiParsingJobJobIdResultMarkdownGetResponses, GetJobResultApiV1ExtractionJobsJobIdResultGetData, GetJobResultApiV1ExtractionJobsJobIdResultGetError, GetJobResultApiV1ExtractionJobsJobIdResultGetErrors, GetJobResultApiV1ExtractionJobsJobIdResultGetResponse, GetJobResultApiV1ExtractionJobsJobIdResultGetResponses, GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData, GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError, GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors, GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse, GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses, GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData, GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError, GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors, GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse, GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses, GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData, GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError, GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors, GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse, GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses, GetJobTextResultApiParsingJobJobIdResultTextGetData, GetJobTextResultApiParsingJobJobIdResultTextGetError, GetJobTextResultApiParsingJobJobIdResultTextGetErrors, GetJobTextResultApiParsingJobJobIdResultTextGetResponse, GetJobTextResultApiParsingJobJobIdResultTextGetResponses, GetJobTextResultApiV1ParsingJobJobIdResultTextGetData, GetJobTextResultApiV1ParsingJobJobIdResultTextGetError, GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors, GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse, GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses, GetJobsApiV1JobsGetData, GetJobsApiV1JobsGetError, GetJobsApiV1JobsGetErrors, GetJobsApiV1JobsGetResponse, GetJobsApiV1JobsGetResponses, GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetData, GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetError, GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetErrors, GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponse, GetLatestParseConfigurationApiV1BetaParseConfigurationsLatestGetResponses, GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData, GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError, GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors, GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse, GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses, GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData, GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError, GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors, GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse, GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses, GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetData, GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetError, GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetErrors, GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponse, GetOrCreateDefaultExtractionAgentApiV1ExtractionExtractionAgentsDefaultGetResponses, GetOrganizationApiV1OrganizationsOrganizationIdGetData, GetOrganizationApiV1OrganizationsOrganizationIdGetError, GetOrganizationApiV1OrganizationsOrganizationIdGetErrors, GetOrganizationApiV1OrganizationsOrganizationIdGetResponse, GetOrganizationApiV1OrganizationsOrganizationIdGetResponses, GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData, GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError, GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors, GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse, GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses, GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetData, GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetError, GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetErrors, GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponse, GetParseConfigurationApiV1BetaParseConfigurationsConfigIdGetResponses, GetParsingHistoryResultApiParsingHistoryGetData, GetParsingHistoryResultApiParsingHistoryGetError, GetParsingHistoryResultApiParsingHistoryGetErrors, GetParsingHistoryResultApiParsingHistoryGetResponse, GetParsingHistoryResultApiParsingHistoryGetResponses, GetParsingHistoryResultApiV1ParsingHistoryGetData, GetParsingHistoryResultApiV1ParsingHistoryGetError, GetParsingHistoryResultApiV1ParsingHistoryGetErrors, GetParsingHistoryResultApiV1ParsingHistoryGetResponse, GetParsingHistoryResultApiV1ParsingHistoryGetResponses, GetParsingJobDetailsApiParsingJobJobIdDetailsGetData, GetParsingJobDetailsApiParsingJobJobIdDetailsGetError, GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors, GetParsingJobDetailsApiParsingJobJobIdDetailsGetResponses, GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData, GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError, GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors, GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetResponses, GetPipelineApiV1PipelinesPipelineIdGetData, GetPipelineApiV1PipelinesPipelineIdGetError, GetPipelineApiV1PipelinesPipelineIdGetErrors, GetPipelineApiV1PipelinesPipelineIdGetResponse, GetPipelineApiV1PipelinesPipelineIdGetResponses, GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData, GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError, GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors, GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse, GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses, GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData, GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError, GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors, GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse, GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses, GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData, GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError, GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors, GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse, GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses, GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData, GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError, GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors, GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse, GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses, GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData, GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError, GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors, GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse, GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses, GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData, GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError, GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors, GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse, GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses, GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData, GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError, GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors, GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse, GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses, GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData, GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError, GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors, GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse, GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses, GetProjectApiV1ProjectsProjectIdGetData, GetProjectApiV1ProjectsProjectIdGetError, GetProjectApiV1ProjectsProjectIdGetErrors, GetProjectApiV1ProjectsProjectIdGetResponse, GetProjectApiV1ProjectsProjectIdGetResponses, GetProjectUsageApiV1ProjectsProjectIdUsageGetData, GetProjectUsageApiV1ProjectsProjectIdUsageGetError, GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors, GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse, GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses, GetRetrieverApiV1RetrieversRetrieverIdGetData, GetRetrieverApiV1RetrieversRetrieverIdGetError, GetRetrieverApiV1RetrieversRetrieverIdGetErrors, GetRetrieverApiV1RetrieversRetrieverIdGetResponse, GetRetrieverApiV1RetrieversRetrieverIdGetResponses, GetRunApiV1ExtractionRunsRunIdGetData, GetRunApiV1ExtractionRunsRunIdGetError, GetRunApiV1ExtractionRunsRunIdGetErrors, GetRunApiV1ExtractionRunsRunIdGetResponse, GetRunApiV1ExtractionRunsRunIdGetResponses, GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData, GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError, GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors, GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse, GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses, GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetData, GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetError, GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetErrors, GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponse, GetSpreadsheetJobApiV1BetaSpreadsheetJobsSpreadsheetJobIdGetResponses, GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData, GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse, GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses, GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData, GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse, GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses, GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetData, GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetError, GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetErrors, GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponse, GetTableDownloadPresignedUrlApiV1BetaSpreadsheetJobsSpreadsheetJobIdTablesTableIdResultGetResponses, GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData, GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError, GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors, GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse, GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses, HttpValidationError, HuggingFaceInferenceApiEmbedding, HuggingFaceInferenceApiEmbeddingConfig, ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData, ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError, ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors, ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse, ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses, IngestionErrorResponse, InputMessage, JobRecord, JobRecordWithUsageMetrics, LLamaParseTransformConfig, LegacyParseJobConfig, ListApiKeysApiV1BetaApiKeysGetData, ListApiKeysApiV1BetaApiKeysGetError, ListApiKeysApiV1BetaApiKeysGetErrors, ListApiKeysApiV1BetaApiKeysGetResponse, ListApiKeysApiV1BetaApiKeysGetResponses, ListBatchesApiV1BetaBatchesGetData, ListBatchesApiV1BetaBatchesGetError, ListBatchesApiV1BetaBatchesGetErrors, ListBatchesApiV1BetaBatchesGetResponse, ListBatchesApiV1BetaBatchesGetResponses, ListClassifyJobsApiV1ClassifierJobsGetData, ListClassifyJobsApiV1ClassifierJobsGetError, ListClassifyJobsApiV1ClassifierJobsGetErrors, ListClassifyJobsApiV1ClassifierJobsGetResponse, ListClassifyJobsApiV1ClassifierJobsGetResponses, ListDataSinksApiV1DataSinksGetData, ListDataSinksApiV1DataSinksGetError, ListDataSinksApiV1DataSinksGetErrors, ListDataSinksApiV1DataSinksGetResponse, ListDataSinksApiV1DataSinksGetResponses, ListDataSourcesApiV1DataSourcesGetData, ListDataSourcesApiV1DataSourcesGetError, ListDataSourcesApiV1DataSourcesGetErrors, ListDataSourcesApiV1DataSourcesGetResponse, ListDataSourcesApiV1DataSourcesGetResponses, ListDeploymentsApiV1ProjectsProjectIdAgentsGetData, ListDeploymentsApiV1ProjectsProjectIdAgentsGetError, ListDeploymentsApiV1ProjectsProjectIdAgentsGetErrors, ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponse, ListDeploymentsApiV1ProjectsProjectIdAgentsGetResponses, ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData, ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError, ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors, ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse, ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses, ListExtractRunsApiV1ExtractionRunsGetData, ListExtractRunsApiV1ExtractionRunsGetError, ListExtractRunsApiV1ExtractionRunsGetErrors, ListExtractRunsApiV1ExtractionRunsGetResponse, ListExtractRunsApiV1ExtractionRunsGetResponses, ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData, ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError, ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors, ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse, ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses, ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData, ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError, ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors, ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse, ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses, ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData, ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError, ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors, ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse, ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses, ListFilePagesFiguresApiV1FilesIdPageFiguresGetData, ListFilePagesFiguresApiV1FilesIdPageFiguresGetError, ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors, ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse, ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses, ListFilesApiV1FilesGetData, ListFilesApiV1FilesGetError, ListFilesApiV1FilesGetErrors, ListFilesApiV1FilesGetResponse, ListFilesApiV1FilesGetResponses, ListJobsApiV1ExtractionJobsGetData, ListJobsApiV1ExtractionJobsGetError, ListJobsApiV1ExtractionJobsGetErrors, ListJobsApiV1ExtractionJobsGetResponse, ListJobsApiV1ExtractionJobsGetResponses, ListKeysApiV1ApiKeysGetData, ListKeysApiV1ApiKeysGetError, ListKeysApiV1ApiKeysGetErrors, ListKeysApiV1ApiKeysGetResponse, ListKeysApiV1ApiKeysGetResponses, ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData, ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError, ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors, ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse, ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses, ListOrganizationsApiV1OrganizationsGetData, ListOrganizationsApiV1OrganizationsGetError, ListOrganizationsApiV1OrganizationsGetErrors, ListOrganizationsApiV1OrganizationsGetResponse, ListOrganizationsApiV1OrganizationsGetResponses, ListParseConfigurationsApiV1BetaParseConfigurationsGetData, ListParseConfigurationsApiV1BetaParseConfigurationsGetError, ListParseConfigurationsApiV1BetaParseConfigurationsGetErrors, ListParseConfigurationsApiV1BetaParseConfigurationsGetResponse, ListParseConfigurationsApiV1BetaParseConfigurationsGetResponses, ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData, ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError, ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors, ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse, ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses, ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData, ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError, ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors, ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse, ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses, ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData, ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError, ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors, ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse, ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses, ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData, ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError, ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors, ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse, ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses, ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData, ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError, ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors, ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse, ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses, ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData, ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError, ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors, ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse, ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses, ListProjectsApiV1ProjectsGetData, ListProjectsApiV1ProjectsGetError, ListProjectsApiV1ProjectsGetErrors, ListProjectsApiV1ProjectsGetResponse, ListProjectsApiV1ProjectsGetResponses, ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData, ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError, ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors, ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse, ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses, ListQuotaConfigurationsApiV1BetaQuotaManagementGetData, ListQuotaConfigurationsApiV1BetaQuotaManagementGetError, ListQuotaConfigurationsApiV1BetaQuotaManagementGetErrors, ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponse, ListQuotaConfigurationsApiV1BetaQuotaManagementGetResponses, ListRetrieversApiV1RetrieversGetData, ListRetrieversApiV1RetrieversGetError, ListRetrieversApiV1RetrieversGetErrors, ListRetrieversApiV1RetrieversGetResponse, ListRetrieversApiV1RetrieversGetResponses, ListRolesApiV1OrganizationsOrganizationIdRolesGetData, ListRolesApiV1OrganizationsOrganizationIdRolesGetError, ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors, ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse, ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses, ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetData, ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetError, ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetErrors, ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponse, ListSpreadsheetJobsApiV1BetaSpreadsheetJobsGetResponses, ListSupportedModelsApiV1EvalsModelsGetData, ListSupportedModelsApiV1EvalsModelsGetError, ListSupportedModelsApiV1EvalsModelsGetErrors, ListSupportedModelsApiV1EvalsModelsGetResponse, ListSupportedModelsApiV1EvalsModelsGetResponses, LlamaParseParameters, LlmModelData, LlmParameters, LoadFilesJobConfig, ManagedIngestionStatusResponse, ManagedOpenAiEmbedding, ManagedOpenAiEmbeddingConfig, MessageAnnotation, MetadataFilter, MetadataFilters, MetronomeDashboardResponse, NoneChunkingConfig, NoneSegmentationConfig, OpenAiEmbedding, OpenAiEmbeddingConfig, Options, Organization, OrganizationCreate, OrganizationUpdate, PageFigureMetadata, PageFigureNodeWithScore, PageScreenshotMetadata, PageScreenshotNodeWithScore, PageSegmentationConfig, PaginatedExtractRunsResponse, PaginatedJobsHistoryWithMetrics, PaginatedListCloudDocumentsResponse, PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData, PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError, PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors, PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse, PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses, PaginatedListPipelineFilesResponse, PaginatedResponseAgentData, PaginatedResponseAggregateGroup, PaginatedResponseClassifyJob, PaginatedResponseQuotaConfiguration, PaginatedResponseSpreadsheetJob, ParseConfiguration, ParseConfigurationCreate, ParseConfigurationFilter, ParseConfigurationQueryRequest, ParseConfigurationQueryResponse, ParseConfigurationUpdate, ParseJobConfig, ParsingHistoryItem, ParsingJob, ParsingJobJsonResult, ParsingJobMarkdownResult, ParsingJobStructuredResult, ParsingJobTextResult, Permission, PgVectorHnswSettings, PipelineConfigurationHashes, PipelineCreateReadable, PipelineCreateWritable, PipelineDataSourceCreate, PipelineDataSourceReadable, PipelineDataSourceUpdate, PipelineDataSourceWritable, PipelineDeployment, PipelineFile, PipelineFileCreate, PipelineFileUpdate, PipelineFileUpdateDispatcherConfig, PipelineFileUpdaterConfig, PipelineManagedIngestionJobParams, PipelineMetadataConfig, PipelineReadable, PipelineUpdateReadable, PipelineUpdateWritable, PipelineWritable, PlanLimits, PlaygroundSession, PresetCompositeRetrievalParams, PresetRetrievalParams, PresignedUrl, Project, ProjectCreate, ProjectUpdate, QueryFilesApiV1BetaFilesQueryPostData, QueryFilesApiV1BetaFilesQueryPostError, QueryFilesApiV1BetaFilesQueryPostErrors, QueryFilesApiV1BetaFilesQueryPostResponse, QueryFilesApiV1BetaFilesQueryPostResponses, QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostData, QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostError, QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostErrors, QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponse, QueryParseConfigurationsApiV1BetaParseConfigurationsQueryPostResponses, QuotaConfiguration, QuotaRateLimitConfigurationValue, ReRankConfig, ReadFileContentApiV1FilesIdContentGetData, ReadFileContentApiV1FilesIdContentGetError, ReadFileContentApiV1FilesIdContentGetErrors, ReadFileContentApiV1FilesIdContentGetResponse, ReadFileContentApiV1FilesIdContentGetResponses, ReadSelfApiV1AuthMeGetData, ReadSelfApiV1AuthMeGetError, ReadSelfApiV1AuthMeGetErrors, ReadSelfApiV1AuthMeGetResponse, ReadSelfApiV1AuthMeGetResponses, RecurringCreditGrant, RelatedNodeInfo, RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData, RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError, RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors, RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteResponses, RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData, RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError, RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors, RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse, RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses, Restrict, RetrievalParams, RetrieveApiV1RetrieversRetrieverIdRetrievePostData, RetrieveApiV1RetrieversRetrieverIdRetrievePostError, RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors, RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse, RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses, RetrieveResults, Retriever, RetrieverCreate, RetrieverPipeline, RetrieverUpdate, Role, RunBatchJobsApiV1ExtractionJobsBatchPostData, RunBatchJobsApiV1ExtractionJobsBatchPostError, RunBatchJobsApiV1ExtractionJobsBatchPostErrors, RunBatchJobsApiV1ExtractionJobsBatchPostResponse, RunBatchJobsApiV1ExtractionJobsBatchPostResponses, RunJobApiV1ExtractionJobsPostData, RunJobApiV1ExtractionJobsPostError, RunJobApiV1ExtractionJobsPostErrors, RunJobApiV1ExtractionJobsPostResponse, RunJobApiV1ExtractionJobsPostResponses, RunJobOnFileApiV1ExtractionJobsFilePostData, RunJobOnFileApiV1ExtractionJobsFilePostError, RunJobOnFileApiV1ExtractionJobsFilePostErrors, RunJobOnFileApiV1ExtractionJobsFilePostResponse, RunJobOnFileApiV1ExtractionJobsFilePostResponses, RunSearchApiV1PipelinesPipelineIdRetrievePostData, RunSearchApiV1PipelinesPipelineIdRetrievePostError, RunSearchApiV1PipelinesPipelineIdRetrievePostErrors, RunSearchApiV1PipelinesPipelineIdRetrievePostResponse, RunSearchApiV1PipelinesPipelineIdRetrievePostResponses, ScreenshotApiParsingScreenshotPostData, ScreenshotApiParsingScreenshotPostError, ScreenshotApiParsingScreenshotPostErrors, ScreenshotApiParsingScreenshotPostResponse, ScreenshotApiParsingScreenshotPostResponses, ScreenshotApiV1ParsingScreenshotPostData, ScreenshotApiV1ParsingScreenshotPostError, ScreenshotApiV1ParsingScreenshotPostErrors, ScreenshotApiV1ParsingScreenshotPostResponse, ScreenshotApiV1ParsingScreenshotPostResponses, SearchAgentDataApiV1BetaAgentDataSearchPostData, SearchAgentDataApiV1BetaAgentDataSearchPostError, SearchAgentDataApiV1BetaAgentDataSearchPostErrors, SearchAgentDataApiV1BetaAgentDataSearchPostResponse, SearchAgentDataApiV1BetaAgentDataSearchPostResponses, SearchPipelinesApiV1PipelinesGetData, SearchPipelinesApiV1PipelinesGetError, SearchPipelinesApiV1PipelinesGetErrors, SearchPipelinesApiV1PipelinesGetResponse, SearchPipelinesApiV1PipelinesGetResponses, SearchRequest, SemanticChunkingConfig, SentenceChunkingConfig, SetDefaultOrganizationApiV1OrganizationsDefaultPutData, SetDefaultOrganizationApiV1OrganizationsDefaultPutError, SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors, SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse, SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses, SparseModelConfig, SpreadsheetJob, SpreadsheetJobCreate, SpreadsheetParsingConfig, SupportedLlmModel, SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostData, SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostError, SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostErrors, SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponse, SyncDeploymentsApiV1ProjectsProjectIdAgentsSyncPostResponses, SyncFilesApiV1FilesSyncPutData, SyncFilesApiV1FilesSyncPutError, SyncFilesApiV1FilesSyncPutErrors, SyncFilesApiV1FilesSyncPutResponse, SyncFilesApiV1FilesSyncPutResponses, SyncPipelineApiV1PipelinesPipelineIdSyncPostData, SyncPipelineApiV1PipelinesPipelineIdSyncPostError, SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors, SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse, SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses, SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData, SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError, SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors, SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse, SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses, SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostData, SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostError, SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostErrors, SyncPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdSyncPostResponses, TextNode, TextNodeWithScore, TokenChunkingConfig, UpdateAgentDataApiV1BetaAgentDataItemIdPutData, UpdateAgentDataApiV1BetaAgentDataItemIdPutError, UpdateAgentDataApiV1BetaAgentDataItemIdPutErrors, UpdateAgentDataApiV1BetaAgentDataItemIdPutResponse, UpdateAgentDataApiV1BetaAgentDataItemIdPutResponses, UpdateChatAppApiV1AppsIdPutData, UpdateChatAppApiV1AppsIdPutError, UpdateChatAppApiV1AppsIdPutErrors, UpdateChatAppApiV1AppsIdPutResponse, UpdateChatAppApiV1AppsIdPutResponses, UpdateDataSinkApiV1DataSinksDataSinkIdPutData, UpdateDataSinkApiV1DataSinksDataSinkIdPutError, UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors, UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse, UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses, UpdateDataSourceApiV1DataSourcesDataSourceIdPutData, UpdateDataSourceApiV1DataSourcesDataSourceIdPutError, UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors, UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse, UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses, UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData, UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError, UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors, UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse, UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses, UpdateExistingPipelineApiV1PipelinesPipelineIdPutData, UpdateExistingPipelineApiV1PipelinesPipelineIdPutError, UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors, UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse, UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses, UpdateExistingProjectApiV1ProjectsProjectIdPutData, UpdateExistingProjectApiV1ProjectsProjectIdPutError, UpdateExistingProjectApiV1ProjectsProjectIdPutErrors, UpdateExistingProjectApiV1ProjectsProjectIdPutResponse, UpdateExistingProjectApiV1ProjectsProjectIdPutResponses, UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData, UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError, UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors, UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse, UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses, UpdateOrganizationApiV1OrganizationsOrganizationIdPutData, UpdateOrganizationApiV1OrganizationsOrganizationIdPutError, UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors, UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses, UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutData, UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutError, UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutErrors, UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponse, UpdateParseConfigurationApiV1BetaParseConfigurationsConfigIdPutResponses, UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData, UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError, UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors, UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse, UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses, UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData, UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError, UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors, UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse, UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses, UpdateRetrieverApiV1RetrieversRetrieverIdPutData, UpdateRetrieverApiV1RetrieversRetrieverIdPutError, UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors, UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse, UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses, UploadFileApiParsingUploadPostData, UploadFileApiParsingUploadPostError, UploadFileApiParsingUploadPostErrors, UploadFileApiParsingUploadPostResponse, UploadFileApiParsingUploadPostResponses, UploadFileApiV1FilesPostData, UploadFileApiV1FilesPostError, UploadFileApiV1FilesPostErrors, UploadFileApiV1FilesPostResponse, UploadFileApiV1FilesPostResponses, UploadFileApiV1ParsingUploadPostData, UploadFileApiV1ParsingUploadPostError, UploadFileApiV1ParsingUploadPostErrors, UploadFileApiV1ParsingUploadPostResponse, UploadFileApiV1ParsingUploadPostResponses, UploadFileFromUrlApiV1FilesUploadFromUrlPutData, UploadFileFromUrlApiV1FilesUploadFromUrlPutError, UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors, UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse, UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses, UploadFileV2ApiV2Alpha1ParseUploadPostData, UploadFileV2ApiV2Alpha1ParseUploadPostError, UploadFileV2ApiV2Alpha1ParseUploadPostErrors, UploadFileV2ApiV2Alpha1ParseUploadPostResponse, UploadFileV2ApiV2Alpha1ParseUploadPostResponses, UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData, UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError, UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors, UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse, UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses, UpsertDataSinkApiV1DataSinksPutData, UpsertDataSinkApiV1DataSinksPutError, UpsertDataSinkApiV1DataSinksPutErrors, UpsertDataSinkApiV1DataSinksPutResponse, UpsertDataSinkApiV1DataSinksPutResponses, UpsertDataSourceApiV1DataSourcesPutData, UpsertDataSourceApiV1DataSourcesPutError, UpsertDataSourceApiV1DataSourcesPutErrors, UpsertDataSourceApiV1DataSourcesPutResponse, UpsertDataSourceApiV1DataSourcesPutResponses, UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData, UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError, UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors, UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse, UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses, UpsertFileApiV1BetaFilesPutData, UpsertFileApiV1BetaFilesPutError, UpsertFileApiV1BetaFilesPutErrors, UpsertFileApiV1BetaFilesPutResponse, UpsertFileApiV1BetaFilesPutResponses, UpsertOrganizationApiV1OrganizationsPutData, UpsertOrganizationApiV1OrganizationsPutError, UpsertOrganizationApiV1OrganizationsPutErrors, UpsertOrganizationApiV1OrganizationsPutResponse, UpsertOrganizationApiV1OrganizationsPutResponses, UpsertParseConfigurationApiV1BetaParseConfigurationsPutData, UpsertParseConfigurationApiV1BetaParseConfigurationsPutError, UpsertParseConfigurationApiV1BetaParseConfigurationsPutErrors, UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponse, UpsertParseConfigurationApiV1BetaParseConfigurationsPutResponses, UpsertPipelineApiV1PipelinesPutData, UpsertPipelineApiV1PipelinesPutError, UpsertPipelineApiV1PipelinesPutErrors, UpsertPipelineApiV1PipelinesPutResponse, UpsertPipelineApiV1PipelinesPutResponses, UpsertProjectApiV1ProjectsPutData, UpsertProjectApiV1ProjectsPutError, UpsertProjectApiV1ProjectsPutErrors, UpsertProjectApiV1ProjectsPutResponse, UpsertProjectApiV1ProjectsPutResponses, UpsertRetrieverApiV1RetrieversPutData, UpsertRetrieverApiV1RetrieversPutError, UpsertRetrieverApiV1RetrieversPutErrors, UpsertRetrieverApiV1RetrieversPutResponse, UpsertRetrieverApiV1RetrieversPutResponses, UsageAndPlan, UsageMetricResponse, UsageResponse, User, UserJobRecord, UserOrganization, UserOrganizationCreate, UserOrganizationDelete, UserOrganizationRole, UserOrganizationRoleCreate, ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData, ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError, ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors, ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse, ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses, ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData, ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError, ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors, ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse, ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses, ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData, ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError, ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors, ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse, ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses, ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData, ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError, ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors, ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse, ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses, ValidationError, VertexAiEmbeddingConfig, VertexTextEmbedding, WebhookConfiguration };
