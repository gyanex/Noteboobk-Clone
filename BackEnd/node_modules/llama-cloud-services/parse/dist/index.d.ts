import * as _hey_api_client_fetch from '@hey-api/client-fetch';
import * as _llamaindex_workflow_core_middleware_trace_events from '@llamaindex/workflow-core/middleware/trace-events';
import * as _llamaindex_workflow_core from '@llamaindex/workflow-core';
import { InferWorkflowEventData } from '@llamaindex/workflow-core';

/**
 * Enum for representing the status of a job
 */
type StatusEnum = "PENDING" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Enum for representing the status of a job
 */
declare const StatusEnum: {
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};

declare const uploadEvent: any;

type LlamaParseWorkflowParams = {
    region?: "us" | "eu" | "us-staging";
    apiKey?: string;
};
declare const llamaParseWorkflow: Omit<Omit<_llamaindex_workflow_core.Workflow, "handle"> & {
    handle<const AcceptEvents extends _llamaindex_workflow_core.WorkflowEvent<any>[], Result extends ReturnType<_llamaindex_workflow_core.WorkflowEvent<any>["with"]> | void, Fn extends _llamaindex_workflow_core.Handler<AcceptEvents, Result>>(accept: AcceptEvents, handler: Fn): _llamaindex_workflow_core_middleware_trace_events.HandlerRef<AcceptEvents, Result, Fn>;
    substream<T extends _llamaindex_workflow_core.WorkflowEventData<any>>(eventData: _llamaindex_workflow_core.WorkflowEventData<any>, stream: _llamaindex_workflow_core.WorkflowStream<T>): _llamaindex_workflow_core.WorkflowStream<T>;
}, "createContext"> & {
    createContext(input: LlamaParseWorkflowParams): _llamaindex_workflow_core.WorkflowContext & {
        readonly state: {
            cache: Record<string, StatusEnum>;
            client: _hey_api_client_fetch.Client;
        };
    };
};
type ParseJob = {
    get jobId(): string;
    get signal(): AbortSignal;
    get context(): ReturnType<typeof llamaParseWorkflow.createContext>;
    get form(): InferWorkflowEventData<typeof uploadEvent>;
    markdown(): Promise<string>;
    text(): Promise<string>;
    json(): Promise<any[]>;
};
declare const upload: (params: InferWorkflowEventData<typeof uploadEvent> & LlamaParseWorkflowParams) => Promise<ParseJob>;

export { upload };
export type { LlamaParseWorkflowParams, ParseJob };
