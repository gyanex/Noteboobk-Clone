{"version":3,"file":"mcp.js","names":["workflow: Workflow","start: WorkflowEvent<Start>","stop: WorkflowEvent<Stop>"],"sources":["../src/mcp.ts"],"sourcesContent":["import type { Workflow, WorkflowEvent } from \"@llamaindex/workflow-core\";\nimport { AsyncContext } from \"@llamaindex/workflow-core/async-context\";\nimport type { RequestHandlerExtra } from \"@modelcontextprotocol/sdk/shared/protocol.js\";\nimport type { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { runWorkflow } from \"./stream/run\";\n\nconst requestHandlerExtraAsyncLocalStorage = new AsyncContext.Variable<\n  RequestHandlerExtra<any, any>\n>();\n\nexport const getReqHandlerExtra = () => {\n  const extra = requestHandlerExtraAsyncLocalStorage.get();\n  if (!extra) {\n    throw new Error(\"Request handler extra not set\");\n  }\n  return extra;\n};\n\nexport function mcpTool<\n  Start extends { [x: string]: any },\n  Stop extends CallToolResult,\n>(\n  workflow: Workflow,\n  start: WorkflowEvent<Start>,\n  stop: WorkflowEvent<Stop>,\n): (\n  args: Start,\n  extra: RequestHandlerExtra<any, any>,\n) => CallToolResult | Promise<CallToolResult> {\n  return async (args, extra) =>\n    requestHandlerExtraAsyncLocalStorage.run(extra, async () => {\n      const { data } = await runWorkflow(workflow, start.with(args), stop);\n      return data;\n    });\n}\n"],"mappings":";;;;AAMA,MAAM,uCAAuC,IAAI,aAAa;AAI9D,MAAa,qBAAqB,MAAM;CACtC,MAAM,QAAQ,qCAAqC,KAAK;AACxD,MAAK,MACH,OAAM,IAAI,MAAM;AAElB,QAAO;AACR;AAED,SAAgB,QAIdA,UACAC,OACAC,MAI4C;AAC5C,QAAO,OAAO,MAAM,UAClB,qCAAqC,IAAI,OAAO,YAAY;EAC1D,MAAM,EAAE,MAAM,GAAG,MAAM,YAAY,UAAU,MAAM,KAAK,KAAK,EAAE,KAAK;AACpE,SAAO;CACR,EAAC;AACL"}