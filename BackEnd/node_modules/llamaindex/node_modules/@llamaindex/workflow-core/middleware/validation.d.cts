import { Workflow, WorkflowContext, WorkflowEvent, WorkflowEventData } from "@llamaindex/workflow-core";

//#region src/middleware/validation.d.ts
type ValidationHandler<Validation extends [inputs: WorkflowEvent<any>[], output: WorkflowEvent<any>[]][], AcceptEvents extends WorkflowEvent<any>[], Result extends WorkflowEventData<any> | void, Context extends WorkflowContext = WorkflowContext> = (sendEvent: (...inputs: Array<Validation[number] extends infer Tuple ? Tuple extends [AcceptEvents, infer Outputs] ? Outputs extends WorkflowEvent<any>[] ? ReturnType<Outputs[number]["with"]> : never : never : never>) => void, context: Context, ...events: { [K in keyof AcceptEvents]: ReturnType<AcceptEvents[K]["with"]> }) => Result | Promise<Result>;
type WithValidationWorkflow<Validation extends [inputs: WorkflowEvent<any>[], output: WorkflowEvent<any>[]][], Context extends WorkflowContext = WorkflowContext> = {
  strictHandle<const AcceptEvents extends WorkflowEvent<any>[], Result extends ReturnType<WorkflowEvent<any>["with"]> | void>(accept: AcceptEvents, handler: ValidationHandler<Validation, AcceptEvents, Result, Context>): void;
};
declare function withValidation<const Validation extends [inputs: WorkflowEvent<any>[], outputs: WorkflowEvent<any>[]][], WorkflowLike extends Workflow>(workflow: WorkflowLike, validation: Validation): WithValidationWorkflow<Validation> & WorkflowLike;
//#endregion
export { ValidationHandler, WithValidationWorkflow, withValidation };
//# sourceMappingURL=validation.d.cts.map