{"version":3,"file":"zod.js","names":["schema: ZodSchema<T>","config?: WorkflowEventConfig<DebugLabel>"],"sources":["../src/util/zod.ts"],"sourcesContent":["import {\n  type WorkflowEvent,\n  type WorkflowEventConfig,\n  workflowEvent,\n} from \"@llamaindex/workflow-core\";\nimport type * as z3 from \"zod/v3\";\nimport * as z4 from \"zod/v4/core\";\n\n// Union type to support both Zod 3 and Zod 4 schemas\ntype ZodSchema<T> = z3.ZodType<T> | z4.$ZodType<T>;\n\nexport const zodEvent = <T, DebugLabel extends string>(\n  schema: ZodSchema<T>,\n  config?: WorkflowEventConfig<DebugLabel>,\n): WorkflowEvent<T, DebugLabel> & { readonly schema: ZodSchema<T> } => {\n  const event = workflowEvent<T, DebugLabel>(config);\n  event.onInit(({ data }) => {\n    // Runtime detection to handle both Zod 3 and Zod 4\n    if (\"_zod\" in schema) {\n      // Zod 4 schema\n      z4.parse(schema as z4.$ZodType<T>, data);\n    } else {\n      // Zod 3 schema\n      (schema as z3.ZodType<T>).parse(data);\n    }\n  });\n\n  return Object.assign(event, {\n    get schema() {\n      return schema;\n    },\n  });\n};\n"],"mappings":";;;;AAWA,MAAa,WAAW,CACtBA,QACAC,WACqE;CACrE,MAAM,QAAQ,cAA6B,OAAO;AAClD,OAAM,OAAO,CAAC,EAAE,MAAM,KAAK;AAEzB,MAAI,UAAU,OAEZ,IAAG,MAAM,QAA0B,KAAK;MAGxC,CAAC,OAAyB,MAAM,KAAK;CAExC,EAAC;AAEF,QAAO,OAAO,OAAO,OAAO,EAC1B,IAAI,SAAS;AACX,SAAO;CACR,EACF,EAAC;AACH"}